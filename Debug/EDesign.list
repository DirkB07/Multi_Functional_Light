
EDesign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9ec  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  0800ab84  0800ab84  0001ab84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ade4  0800ade4  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  0800ade4  0800ade4  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ade4  0800ade4  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ade4  0800ade4  0001ade4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ade8  0800ade8  0001ade8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800adec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052a4  200000bc  0800aea8  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005360  0800aea8  00025360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6b4  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003512  00000000  00000000  0003a7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  0003dcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001460  00000000  00000000  0003f278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023bc2  00000000  00000000  000406d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c788  00000000  00000000  0006429a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9a21  00000000  00000000  00080a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015a443  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cb4  00000000  00000000  0015a494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000bc 	.word	0x200000bc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800ab6c 	.word	0x0800ab6c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000c0 	.word	0x200000c0
 80001d4:	0800ab6c 	.word	0x0800ab6c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <getReadyPinState>:
uint16_t xBufIdx = 0;
uint16_t xCoordProcessed = 0;
uint32_t timeFirstGesture = 0;


uint8_t getReadyPinState(void){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0

	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80009b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <getReadyPinState+0x14>)
 80009be:	f005 f93d 	bl	8005c3c <HAL_GPIO_ReadPin>
 80009c2:	4603      	mov	r3, r0

}
 80009c4:	4618      	mov	r0, r3
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	48000400 	.word	0x48000400

080009cc <hwReset>:

void hwReset(void){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2140      	movs	r1, #64	; 0x40
 80009d4:	4808      	ldr	r0, [pc, #32]	; (80009f8 <hwReset+0x2c>)
 80009d6:	f005 f949 	bl	8005c6c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80009da:	2064      	movs	r0, #100	; 0x64
 80009dc:	f003 fbde 	bl	800419c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	2140      	movs	r1, #64	; 0x40
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <hwReset+0x2c>)
 80009e6:	f005 f941 	bl	8005c6c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80009ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ee:	f003 fbd5 	bl	800419c <HAL_Delay>
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	48000800 	.word	0x48000800

080009fc <writeRandomBytes>:

// writes value and reads into uint8_t array (little endian) so bytes has to be swopped if more than 1 byte is read
void writeRandomBytes(uint8_t memoryAddress, uint8_t numBytes, uint8_t bytesArray[]){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af04      	add	r7, sp, #16
 8000a02:	4603      	mov	r3, r0
 8000a04:	603a      	str	r2, [r7, #0]
 8000a06:	71fb      	strb	r3, [r7, #7]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	71bb      	strb	r3, [r7, #6]
	uint16_t data[2];
	data[0] = memoryAddress;
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	81bb      	strh	r3, [r7, #12]

	while (RDY == 0){
 8000a12:	bf00      	nop
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <writeRandomBytes+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d0fb      	beq.n	8000a14 <writeRandomBytes+0x18>

	}
	if(RDY == 1){
 8000a1c:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <writeRandomBytes+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d113      	bne.n	8000a4c <writeRandomBytes+0x50>
		HAL_I2C_Mem_Write(&hi2c1, (deviceAddress<<1), data[0], I2C_MEMADD_SIZE_8BIT, bytesArray, (uint16_t)numBytes, 50);
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <writeRandomBytes+0x68>)
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	b299      	uxth	r1, r3
 8000a2c:	89ba      	ldrh	r2, [r7, #12]
 8000a2e:	79bb      	ldrb	r3, [r7, #6]
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	2032      	movs	r0, #50	; 0x32
 8000a34:	9002      	str	r0, [sp, #8]
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	480a      	ldr	r0, [pc, #40]	; (8000a68 <writeRandomBytes+0x6c>)
 8000a40:	f005 f9d4 	bl	8005dec <HAL_I2C_Mem_Write>
		RDY = 0;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <writeRandomBytes+0x64>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
	} else {
		writeRandomBytes(memoryAddress, numBytes, bytesArray);

	}

}
 8000a4a:	e005      	b.n	8000a58 <writeRandomBytes+0x5c>
		writeRandomBytes(memoryAddress, numBytes, bytesArray);
 8000a4c:	79b9      	ldrb	r1, [r7, #6]
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	683a      	ldr	r2, [r7, #0]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ffd2 	bl	80009fc <writeRandomBytes>
}
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200000ac 	.word	0x200000ac
 8000a64:	20000000 	.word	0x20000000
 8000a68:	20004f6c 	.word	0x20004f6c

08000a6c <readRandomBytes>:

// reads value and reads into uint8_t array (little endian) so bytes has to be swopped if more than 1 byte is read
void readRandomBytes(uint8_t memoryAddress, uint8_t numBytes, uint8_t bytesArray[]){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af04      	add	r7, sp, #16
 8000a72:	4603      	mov	r3, r0
 8000a74:	603a      	str	r2, [r7, #0]
 8000a76:	71fb      	strb	r3, [r7, #7]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	71bb      	strb	r3, [r7, #6]

	while(getReadyPinState() != 0)
 8000a7c:	bf00      	nop
 8000a7e:	f7ff ff99 	bl	80009b4 <getReadyPinState>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d1fa      	bne.n	8000a7e <readRandomBytes+0x12>
	{

	}

	HAL_I2C_Mem_Read(&hi2c1, (deviceAddress<<1), memoryAddress, I2C_MEMADD_SIZE_8BIT, bytesArray, (uint16_t)numBytes, 50);
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <readRandomBytes+0x48>)
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	b299      	uxth	r1, r3
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	79bb      	ldrb	r3, [r7, #6]
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	2032      	movs	r0, #50	; 0x32
 8000a9a:	9002      	str	r0, [sp, #8]
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <readRandomBytes+0x4c>)
 8000aa6:	f005 fab5 	bl	8006014 <HAL_I2C_Mem_Read>

}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	20004f6c 	.word	0x20004f6c

08000abc <readGestureData>:

uint8_t readGestureData(uint8_t *gestureData){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

	readRandomBytes(0x11, 10, gestureData);
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	210a      	movs	r1, #10
 8000ac8:	2011      	movs	r0, #17
 8000aca:	f7ff ffcf 	bl	8000a6c <readRandomBytes>

}
 8000ace:	bf00      	nop
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <processGestureData>:

/* process gesture data */
void processGestureData(uint8_t *gestureData){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

	GESTURETYPE newGesture = GEST_NONE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]

	if((gestureData[0] & 0x01) == 0x01){
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d002      	beq.n	8000af6 <processGestureData+0x1e>
		newGesture = GEST_TAP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	73fb      	strb	r3, [r7, #15]
 8000af4:	e007      	b.n	8000b06 <processGestureData+0x2e>

	} else if ((gestureData[0] & 0x02) == 0x02){
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <processGestureData+0x2e>

		newGesture = GEST_HOLD;
 8000b02:	2303      	movs	r3, #3
 8000b04:	73fb      	strb	r3, [r7, #15]

	}

	if (newGesture == GEST_NONE && currentGesture != GEST_NONE){
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d119      	bne.n	8000b40 <processGestureData+0x68>
 8000b0c:	4b4d      	ldr	r3, [pc, #308]	; (8000c44 <processGestureData+0x16c>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d015      	beq.n	8000b40 <processGestureData+0x68>

		xBufEmpty = 1;
 8000b14:	4b4c      	ldr	r3, [pc, #304]	; (8000c48 <processGestureData+0x170>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	701a      	strb	r2, [r3, #0]
		xCoordinateLatest = 0;
 8000b1a:	4b4c      	ldr	r3, [pc, #304]	; (8000c4c <processGestureData+0x174>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	801a      	strh	r2, [r3, #0]
		yCoordinateLatest = 0;
 8000b20:	4b4b      	ldr	r3, [pc, #300]	; (8000c50 <processGestureData+0x178>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	801a      	strh	r2, [r3, #0]
		xBufIdx = 0;
 8000b26:	4b4b      	ldr	r3, [pc, #300]	; (8000c54 <processGestureData+0x17c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	801a      	strh	r2, [r3, #0]
		xCoordProcessed = 0;
 8000b2c:	4b4a      	ldr	r3, [pc, #296]	; (8000c58 <processGestureData+0x180>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	801a      	strh	r2, [r3, #0]
		timeFirstGesture = 0;
 8000b32:	4b4a      	ldr	r3, [pc, #296]	; (8000c5c <processGestureData+0x184>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
		currentGesture = GEST_NONE;
 8000b38:	4b42      	ldr	r3, [pc, #264]	; (8000c44 <processGestureData+0x16c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
		return;
 8000b3e:	e07e      	b.n	8000c3e <processGestureData+0x166>

	}


	xCoordinateLatest = gestureData[6];
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3306      	adds	r3, #6
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	4b40      	ldr	r3, [pc, #256]	; (8000c4c <processGestureData+0x174>)
 8000b4a:	801a      	strh	r2, [r3, #0]
	xCoordinateLatest |= (gestureData[7] << 8);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3307      	adds	r3, #7
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	021b      	lsls	r3, r3, #8
 8000b54:	b21a      	sxth	r2, r3
 8000b56:	4b3d      	ldr	r3, [pc, #244]	; (8000c4c <processGestureData+0x174>)
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	b21b      	sxth	r3, r3
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	b21b      	sxth	r3, r3
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	4b3a      	ldr	r3, [pc, #232]	; (8000c4c <processGestureData+0x174>)
 8000b64:	801a      	strh	r2, [r3, #0]
	yCoordinateLatest = gestureData[8];
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	3308      	adds	r3, #8
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	4b38      	ldr	r3, [pc, #224]	; (8000c50 <processGestureData+0x178>)
 8000b70:	801a      	strh	r2, [r3, #0]
	yCoordinateLatest |= (gestureData[9] << 8);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	3309      	adds	r3, #9
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	021b      	lsls	r3, r3, #8
 8000b7a:	b21a      	sxth	r2, r3
 8000b7c:	4b34      	ldr	r3, [pc, #208]	; (8000c50 <processGestureData+0x178>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	b21b      	sxth	r3, r3
 8000b82:	4313      	orrs	r3, r2
 8000b84:	b21b      	sxth	r3, r3
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	4b31      	ldr	r3, [pc, #196]	; (8000c50 <processGestureData+0x178>)
 8000b8a:	801a      	strh	r2, [r3, #0]

	if(newGesture == GEST_TAP){
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d103      	bne.n	8000b9a <processGestureData+0xc2>
		currentGesture = GEST_TAP;
 8000b92:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <processGestureData+0x16c>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
		return;
 8000b98:	e051      	b.n	8000c3e <processGestureData+0x166>
	}

	if(newGesture == GEST_HOLD){
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	d14e      	bne.n	8000c3e <processGestureData+0x166>
		if(currentGesture == GEST_NONE){
 8000ba0:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <processGestureData+0x16c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d107      	bne.n	8000bb8 <processGestureData+0xe0>
			timeFirstGesture = HAL_GetTick();
 8000ba8:	f003 faec 	bl	8004184 <HAL_GetTick>
 8000bac:	4603      	mov	r3, r0
 8000bae:	4a2b      	ldr	r2, [pc, #172]	; (8000c5c <processGestureData+0x184>)
 8000bb0:	6013      	str	r3, [r2, #0]
			currentGesture = GEST_DECIDING;
 8000bb2:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <processGestureData+0x16c>)
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	701a      	strb	r2, [r3, #0]
		}

		xBuffer[xBufIdx] = xCoordinateLatest;
 8000bb8:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <processGestureData+0x17c>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <processGestureData+0x174>)
 8000bc0:	8819      	ldrh	r1, [r3, #0]
 8000bc2:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <processGestureData+0x188>)
 8000bc4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		xBufIdx++;
 8000bc8:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <processGestureData+0x17c>)
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <processGestureData+0x17c>)
 8000bd2:	801a      	strh	r2, [r3, #0]
		xCoordProcessed++;
 8000bd4:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <processGestureData+0x180>)
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	b29a      	uxth	r2, r3
 8000bdc:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <processGestureData+0x180>)
 8000bde:	801a      	strh	r2, [r3, #0]
		xBufEmpty = 0;
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <processGestureData+0x170>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	701a      	strb	r2, [r3, #0]
		if(xBufIdx == TRACKPADBUFFERSIZE){
 8000be6:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <processGestureData+0x17c>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	f242 7210 	movw	r2, #10000	; 0x2710
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d102      	bne.n	8000bf8 <processGestureData+0x120>
			xBufIdx = 0;
 8000bf2:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <processGestureData+0x17c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	801a      	strh	r2, [r3, #0]
		}

		if(currentGesture == GEST_DECIDING){
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <processGestureData+0x16c>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d11e      	bne.n	8000c3e <processGestureData+0x166>
			if(xCoordProcessed > 5)
 8000c00:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <processGestureData+0x180>)
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	2b05      	cmp	r3, #5
 8000c06:	d90e      	bls.n	8000c26 <processGestureData+0x14e>
			{
				 if(abs(xBuffer[0] - xCoordinateLatest) > 30){
 8000c08:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <processGestureData+0x188>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <processGestureData+0x174>)
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	bfb8      	it	lt
 8000c18:	425b      	neglt	r3, r3
 8000c1a:	2b1e      	cmp	r3, #30
 8000c1c:	dd03      	ble.n	8000c26 <processGestureData+0x14e>
					 currentGesture = GEST_SLIDE;
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <processGestureData+0x16c>)
 8000c20:	2204      	movs	r2, #4
 8000c22:	701a      	strb	r2, [r3, #0]
					 return;
 8000c24:	e00b      	b.n	8000c3e <processGestureData+0x166>
				 }
			}
			if(HAL_GetTick() > timeFirstGesture + 1500){
 8000c26:	f003 faad 	bl	8004184 <HAL_GetTick>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <processGestureData+0x184>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d902      	bls.n	8000c3e <processGestureData+0x166>
				currentGesture = GEST_HOLD;
 8000c38:	4b02      	ldr	r3, [pc, #8]	; (8000c44 <processGestureData+0x16c>)
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	701a      	strb	r2, [r3, #0]
		}

	}


}
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200000d8 	.word	0x200000d8
 8000c48:	20000002 	.word	0x20000002
 8000c4c:	20004efc 	.word	0x20004efc
 8000c50:	20004efe 	.word	0x20004efe
 8000c54:	20004f00 	.word	0x20004f00
 8000c58:	20004f02 	.word	0x20004f02
 8000c5c:	20004f04 	.word	0x20004f04
 8000c60:	200000dc 	.word	0x200000dc

08000c64 <getGestureType>:

GESTURETYPE getGestureType(){
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
	GESTURETYPE gestureReturned = currentGesture;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <getGestureType+0x28>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]

	if(currentGesture == GEST_DECIDING){
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <getGestureType+0x28>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d101      	bne.n	8000c7c <getGestureType+0x18>
		gestureReturned = GEST_NONE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	71fb      	strb	r3, [r7, #7]
	}
	return gestureReturned;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]

}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	200000d8 	.word	0x200000d8

08000c90 <getGestureCoordinates>:

void getGestureCoordinates(uint16_t *xCoordinate, uint16_t *yCoordinate){
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
	*xCoordinate = xCoordinateLatest;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <getGestureCoordinates+0x28>)
 8000c9c:	881a      	ldrh	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	801a      	strh	r2, [r3, #0]
	*yCoordinate = yCoordinateLatest;
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <getGestureCoordinates+0x2c>)
 8000ca4:	881a      	ldrh	r2, [r3, #0]
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	801a      	strh	r2, [r3, #0]
	return;
 8000caa:	bf00      	nop

}
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20004efc 	.word	0x20004efc
 8000cbc:	20004efe 	.word	0x20004efe

08000cc0 <getProductNum>:





void getProductNum(void){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0

	uint8_t transferBytes[2];	// A temporary array to hold the byte to be transferred.
	uint8_t prodNumLow = 0;         // Temporary storage for the counts low byte.
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	71fb      	strb	r3, [r7, #7]
	uint8_t prodNumHigh = 0;        // Temporary storage for the counts high byte.
 8000cca:	2300      	movs	r3, #0
 8000ccc:	71bb      	strb	r3, [r7, #6]
	uint16_t prodNumReturn = 0;     // The 16bit return value.
 8000cce:	2300      	movs	r3, #0
 8000cd0:	80bb      	strh	r3, [r7, #4]

	readRandomBytes(IQS7211A_MM_PROD_NUM, 2, transferBytes);
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	2102      	movs	r1, #2
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f7ff fec7 	bl	8000a6c <readRandomBytes>

	// Construct the 16bit return value.
	prodNumLow = transferBytes[0];
 8000cde:	783b      	ldrb	r3, [r7, #0]
 8000ce0:	71fb      	strb	r3, [r7, #7]
	prodNumHigh = transferBytes[1];
 8000ce2:	787b      	ldrb	r3, [r7, #1]
 8000ce4:	71bb      	strb	r3, [r7, #6]
	prodNumReturn = (uint16_t)(prodNumLow);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	80bb      	strh	r3, [r7, #4]
	prodNumReturn |= (uint16_t)(prodNumHigh<<8);
 8000cea:	79bb      	ldrb	r3, [r7, #6]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	021b      	lsls	r3, r3, #8
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	88bb      	ldrh	r3, [r7, #4]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	80bb      	strh	r3, [r7, #4]
	// Return the product number value.
	//char ProdNum[10];
	//uint16_t padNum = prodNumReturn;
	//sprintf(ProdNum, "%u\n", padNum);
	//HAL_UART_Transmit(&huart2, (uint8_t*)ProdNum, strlen(ProdNum), 50);
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <checkReset>:

}


uint8_t checkReset(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
	uint8_t bytesArray[2];
	readRandomBytes(IQS7211A_MM_INFOFLAGS, 2, bytesArray);
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	461a      	mov	r2, r3
 8000d0a:	2102      	movs	r1, #2
 8000d0c:	2010      	movs	r0, #16
 8000d0e:	f7ff fead 	bl	8000a6c <readRandomBytes>

	//little endian, lsb first so when not swopping the first bit is in second part
	if((bytesArray[0] & 0x80) == 0x80)
 8000d12:	793b      	ldrb	r3, [r7, #4]
 8000d14:	b25b      	sxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	da01      	bge.n	8000d1e <checkReset+0x1e>
	{
		return 1;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e000      	b.n	8000d20 <checkReset+0x20>

	} else
	{
		return 0;
 8000d1e:	2300      	movs	r3, #0
	}

}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <swReset>:

void swReset(){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0

	uint8_t transferByte[2]; // Array to store the bytes transferred.
	  	  	  	  	  	  	   // Use an array to be consistent with other methods in this class.
	readRandomBytes(IQS7211A_MM_SYSTEM_CONTROL, 2, transferByte);
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	461a      	mov	r2, r3
 8000d32:	2102      	movs	r1, #2
 8000d34:	2050      	movs	r0, #80	; 0x50
 8000d36:	f7ff fe99 	bl	8000a6c <readRandomBytes>
	  // Mask the settings with the SW_RESET_BIT.
	transferByte[1] |= 0x02;  // This is the bit required to perform SW Reset.
 8000d3a:	797b      	ldrb	r3, [r7, #5]
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	717b      	strb	r3, [r7, #5]
	  // Write the new byte to the required device.
	  writeRandomBytes(IQS7211A_MM_SYSTEM_CONTROL, 2, transferByte);
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	461a      	mov	r2, r3
 8000d48:	2102      	movs	r1, #2
 8000d4a:	2050      	movs	r0, #80	; 0x50
 8000d4c:	f7ff fe56 	bl	80009fc <writeRandomBytes>

}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <acknowledgeReset>:

void acknowledgeReset()
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
	uint8_t transferBytes[2];	// A temporary array to hold the bytes to be transferred.
	// Read the System Flags from the IQS7211A, these must be read first in order not to change any settings.
	// We are interested in the 2nd byte at the address location, therefore, we must read and write both bytes.
	readRandomBytes(IQS7211A_MM_SYSTEM_CONTROL, 2, transferBytes);
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	461a      	mov	r2, r3
 8000d62:	2102      	movs	r1, #2
 8000d64:	2050      	movs	r0, #80	; 0x50
 8000d66:	f7ff fe81 	bl	8000a6c <readRandomBytes>
	// SWrite the AAck Reset bit to 1 to clear the Show Reset Flag.
	transferBytes[0] |= 0x80;
 8000d6a:	793b      	ldrb	r3, [r7, #4]
 8000d6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	713b      	strb	r3, [r7, #4]
	// Write the new byte to the System Flags address.
	writeRandomBytes(IQS7211A_MM_SYSTEM_CONTROL, 2, transferBytes);
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	461a      	mov	r2, r3
 8000d78:	2102      	movs	r1, #2
 8000d7a:	2050      	movs	r0, #80	; 0x50
 8000d7c:	f7ff fe3e 	bl	80009fc <writeRandomBytes>
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <getSoftwareMajorNum>:

uint8_t getSoftwareMajorNum()
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
	uint8_t transferBytes[1];	// A temporary array to hold the byte to be transferred.
								// Use an array to be consistent with other methods of the library.
	// Read the Device info from the IQS7211A.
	readRandomBytes(IQS7211A_MM_MAJOR_VERSION_NUM, 1, transferBytes);
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	461a      	mov	r2, r3
 8000d92:	2101      	movs	r1, #1
 8000d94:	2001      	movs	r0, #1
 8000d96:	f7ff fe69 	bl	8000a6c <readRandomBytes>
  return transferBytes[0];
 8000d9a:	793b      	ldrb	r3, [r7, #4]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <getSoftwareMinorNum>:

uint8_t getSoftwareMinorNum()
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
	uint8_t transferBytes[1];	// A temporary array to hold the byte to be transferred.
								// Use an array to be consistent with other methods of the library.
	// Read the Device info from the IQS7211A.
	readRandomBytes(IQS7211A_MM_MINOR_VERSION_NUM, 1, transferBytes);
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	461a      	mov	r2, r3
 8000dae:	2101      	movs	r1, #1
 8000db0:	2002      	movs	r0, #2
 8000db2:	f7ff fe5b 	bl	8000a6c <readRandomBytes>
	return transferBytes[0];
 8000db6:	793b      	ldrb	r3, [r7, #4]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <TP_ReATI>:

void TP_ReATI()
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
  uint8_t transferByte[1]; // Array to store the bytes transferred.
  	  	  	  	  	  	   // Use an array to be consistent with other methods in this class.
  readRandomBytes(IQS7211A_MM_SYSTEM_CONTROL, 1, transferByte);
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	461a      	mov	r2, r3
 8000dca:	2101      	movs	r1, #1
 8000dcc:	2050      	movs	r0, #80	; 0x50
 8000dce:	f7ff fe4d 	bl	8000a6c <readRandomBytes>
  // Mask the settings with the REDO_ATI_BIT.
  transferByte[0] |= 0x20;  // This is the bit required to start an ATI routine.
 8000dd2:	793b      	ldrb	r3, [r7, #4]
 8000dd4:	f043 0320 	orr.w	r3, r3, #32
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	713b      	strb	r3, [r7, #4]
  // Write the new byte to the required device.
  writeRandomBytes(IQS7211A_MM_SYSTEM_CONTROL, 1, transferByte);
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	461a      	mov	r2, r3
 8000de0:	2101      	movs	r1, #1
 8000de2:	2050      	movs	r0, #80	; 0x50
 8000de4:	f7ff fe0a 	bl	80009fc <writeRandomBytes>
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <enableGestureEvent>:




void enableGestureEvent()
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
  uint8_t transferBytes[2]; // The array which will hold the bytes which are transferred.

  // First read the bytes at the memory address so that they can be preserved.
  readRandomBytes(IQS7211A_MM_CONFIG_SETTINGS, 2, transferBytes);
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	461a      	mov	r2, r3
 8000dfa:	2102      	movs	r1, #2
 8000dfc:	2051      	movs	r0, #81	; 0x51
 8000dfe:	f7ff fe35 	bl	8000a6c <readRandomBytes>
  // Set the GESTURE_EVENT_BIT in CONFIG_SETTINGS
  transferBytes[1] |= 0x02;
 8000e02:	797b      	ldrb	r3, [r7, #5]
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	717b      	strb	r3, [r7, #5]
  // Write the bytes back to the device
  writeRandomBytes(IQS7211A_MM_CONFIG_SETTINGS, 2, transferBytes);
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	461a      	mov	r2, r3
 8000e10:	2102      	movs	r1, #2
 8000e12:	2051      	movs	r0, #81	; 0x51
 8000e14:	f7ff fdf2 	bl	80009fc <writeRandomBytes>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <enableGestures>:

void enableGestures()
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
  uint8_t transferBytes[2]; // The array which will hold the bytes which are transferred.

  // First read the bytes at the memory address so that they can be preserved.
  readRandomBytes(IQS7211A_MM_GESTURE_ENABLE, 2, transferBytes);
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	461a      	mov	r2, r3
 8000e2a:	2102      	movs	r1, #2
 8000e2c:	2080      	movs	r0, #128	; 0x80
 8000e2e:	f7ff fe1d 	bl	8000a6c <readRandomBytes>
  // Set the GESTURE_EVENT_BIT in CONFIG_SETTINGS
  transferBytes[1] |= 0x1F;
 8000e32:	797b      	ldrb	r3, [r7, #5]
 8000e34:	f043 031f 	orr.w	r3, r3, #31
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	717b      	strb	r3, [r7, #5]
  // Write the bytes back to the device
  writeRandomBytes(IQS7211A_MM_GESTURE_ENABLE, 2, transferBytes);
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	461a      	mov	r2, r3
 8000e40:	2102      	movs	r1, #2
 8000e42:	2080      	movs	r0, #128	; 0x80
 8000e44:	f7ff fdda 	bl	80009fc <writeRandomBytes>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <enableTPEvent>:
    }

}

void enableTPEvent()
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  uint8_t transferBytes[2]; // The array which will hold the bytes which are transferred.

  // First read the bytes at the memory address so that they can be preserved.
  readRandomBytes(IQS7211A_MM_CONFIG_SETTINGS, 2, transferBytes);
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	461a      	mov	r2, r3
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	2051      	movs	r0, #81	; 0x51
 8000e5e:	f7ff fe05 	bl	8000a6c <readRandomBytes>
  // Set the TP_EVENT_BIT in CONFIG_SETTINGS
  transferBytes[1] |= 0x04;
 8000e62:	797b      	ldrb	r3, [r7, #5]
 8000e64:	f043 0304 	orr.w	r3, r3, #4
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	717b      	strb	r3, [r7, #5]
  // Write the bytes back to the device
  writeRandomBytes(IQS7211A_MM_CONFIG_SETTINGS, 2, transferBytes);
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	461a      	mov	r2, r3
 8000e70:	2102      	movs	r1, #2
 8000e72:	2051      	movs	r0, #81	; 0x51
 8000e74:	f7ff fdc2 	bl	80009fc <writeRandomBytes>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <writeMM>:

    return absXCoordReturn;
}

void writeMM()
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
	uint8_t transferBytes[30];	// Temporary array which holds the bytes to be transferred.

  /* Change the ATI Settings */
  /* Memory Map Position 0x30 - 0x3D */
  transferBytes[0] = TP_ATI_MULTIPLIERS_DIVIDERS_0;
 8000e86:	23e1      	movs	r3, #225	; 0xe1
 8000e88:	703b      	strb	r3, [r7, #0]
  transferBytes[1] = TP_ATI_MULTIPLIERS_DIVIDERS_1;
 8000e8a:	2333      	movs	r3, #51	; 0x33
 8000e8c:	707b      	strb	r3, [r7, #1]
  transferBytes[2] = TP_COMPENSATION_DIV_0;
 8000e8e:	230c      	movs	r3, #12
 8000e90:	70bb      	strb	r3, [r7, #2]
  transferBytes[3] = TP_COMPENSATION_DIV_1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	70fb      	strb	r3, [r7, #3]
  transferBytes[4] = TP_ATI_TARGET_0;
 8000e96:	232c      	movs	r3, #44	; 0x2c
 8000e98:	713b      	strb	r3, [r7, #4]
  transferBytes[5] = TP_ATI_TARGET_1;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	717b      	strb	r3, [r7, #5]
  transferBytes[6] = TP_REF_DRIFT_LIMIT_0;
 8000e9e:	2332      	movs	r3, #50	; 0x32
 8000ea0:	71bb      	strb	r3, [r7, #6]
  transferBytes[7] = TP_REF_DRIFT_LIMIT_1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  transferBytes[8] = TP_MIN_COUNT_REATI_0;
 8000ea6:	2332      	movs	r3, #50	; 0x32
 8000ea8:	723b      	strb	r3, [r7, #8]
  transferBytes[9] = TP_MIN_COUNT_REATI_1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	727b      	strb	r3, [r7, #9]
  transferBytes[10] = REATI_RETRY_TIME_0;
 8000eae:	2305      	movs	r3, #5
 8000eb0:	72bb      	strb	r3, [r7, #10]
  transferBytes[11] = REATI_RETRY_TIME_1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	72fb      	strb	r3, [r7, #11]
  transferBytes[12] = ALP_ATI_MULTIPLIERS_DIVIDERS_0;
 8000eb6:	2323      	movs	r3, #35	; 0x23
 8000eb8:	733b      	strb	r3, [r7, #12]
  transferBytes[13] = ALP_ATI_MULTIPLIERS_DIVIDERS_1;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	737b      	strb	r3, [r7, #13]
  transferBytes[14] = ALP_COMPENSATION_DIV_0;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	73bb      	strb	r3, [r7, #14]
  transferBytes[15] = ALP_COMPENSATION_DIV_1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	73fb      	strb	r3, [r7, #15]
  transferBytes[16] = ALP_ATI_TARGET_0;
 8000ec6:	23c8      	movs	r3, #200	; 0xc8
 8000ec8:	743b      	strb	r3, [r7, #16]
  transferBytes[17] = ALP_ATI_TARGET_1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	747b      	strb	r3, [r7, #17]
  transferBytes[18] = ALP_LTA_DRIFT_LIMIT_0;
 8000ece:	2314      	movs	r3, #20
 8000ed0:	74bb      	strb	r3, [r7, #18]
  transferBytes[19] = ALP_LTA_DRIFT_LIMIT_1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	74fb      	strb	r3, [r7, #19]

  /* Change the ALP ATI Compensation */
  /* Memory Map Position 0x3A - 0x3D */
  transferBytes[20] = ALP_COMPENSATION_A_0;
 8000ed6:	23e8      	movs	r3, #232	; 0xe8
 8000ed8:	753b      	strb	r3, [r7, #20]
  transferBytes[21] = ALP_COMPENSATION_A_1;
 8000eda:	2301      	movs	r3, #1
 8000edc:	757b      	strb	r3, [r7, #21]
  transferBytes[22] = ALP_COMPENSATION_B_0;
 8000ede:	23d3      	movs	r3, #211	; 0xd3
 8000ee0:	75bb      	strb	r3, [r7, #22]
  transferBytes[23] = ALP_COMPENSATION_B_1;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	75fb      	strb	r3, [r7, #23]
  writeRandomBytes(IQS7211A_MM_TP_ATI_MIR, 24, transferBytes);
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	461a      	mov	r2, r3
 8000eea:	2118      	movs	r1, #24
 8000eec:	2030      	movs	r0, #48	; 0x30
 8000eee:	f7ff fd85 	bl	80009fc <writeRandomBytes>

  /* Change the Report Rates and Timing */
  /* Memory Map Position 0x40 - 0x4A */
  transferBytes[0] = ACTIVE_MODE_REPORT_RATE_0;
 8000ef2:	230a      	movs	r3, #10
 8000ef4:	703b      	strb	r3, [r7, #0]
  transferBytes[1] = ACTIVE_MODE_REPORT_RATE_1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	707b      	strb	r3, [r7, #1]
  transferBytes[2] = IDLE_TOUCH_MODE_REPORT_RATE_0;
 8000efa:	2332      	movs	r3, #50	; 0x32
 8000efc:	70bb      	strb	r3, [r7, #2]
  transferBytes[3] = IDLE_TOUCH_MODE_REPORT_RATE_1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	70fb      	strb	r3, [r7, #3]
  transferBytes[4] = IDLE_MODE_REPORT_RATE_0;
 8000f02:	2332      	movs	r3, #50	; 0x32
 8000f04:	713b      	strb	r3, [r7, #4]
  transferBytes[5] = IDLE_MODE_REPORT_RATE_1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	717b      	strb	r3, [r7, #5]
  transferBytes[6] = LP1_MODE_REPORT_RATE_0;
 8000f0a:	2350      	movs	r3, #80	; 0x50
 8000f0c:	71bb      	strb	r3, [r7, #6]
  transferBytes[7] = LP1_MODE_REPORT_RATE_1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	71fb      	strb	r3, [r7, #7]
  transferBytes[8] = LP2_MODE_REPORT_RATE_0;
 8000f12:	23a0      	movs	r3, #160	; 0xa0
 8000f14:	723b      	strb	r3, [r7, #8]
  transferBytes[9] = LP2_MODE_REPORT_RATE_1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	727b      	strb	r3, [r7, #9]
  transferBytes[10] = ACTIVE_MODE_TIMEOUT_0;
 8000f1a:	230a      	movs	r3, #10
 8000f1c:	72bb      	strb	r3, [r7, #10]
  transferBytes[11] = ACTIVE_MODE_TIMEOUT_1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	72fb      	strb	r3, [r7, #11]
  transferBytes[12] = IDLE_TOUCH_MODE_TIMEOUT_0;
 8000f22:	233c      	movs	r3, #60	; 0x3c
 8000f24:	733b      	strb	r3, [r7, #12]
  transferBytes[13] = IDLE_TOUCH_MODE_TIMEOUT_1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	737b      	strb	r3, [r7, #13]
  transferBytes[14] = IDLE_MODE_TIMEOUT_0;
 8000f2a:	2314      	movs	r3, #20
 8000f2c:	73bb      	strb	r3, [r7, #14]
  transferBytes[15] = IDLE_MODE_TIMEOUT_1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]
  transferBytes[16] = LP1_MODE_TIMEOUT_0;
 8000f32:	230a      	movs	r3, #10
 8000f34:	743b      	strb	r3, [r7, #16]
  transferBytes[17] = LP1_MODE_TIMEOUT_1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	747b      	strb	r3, [r7, #17]
  transferBytes[18] = REF_UPDATE_TIME_0;
 8000f3a:	2308      	movs	r3, #8
 8000f3c:	74bb      	strb	r3, [r7, #18]
  transferBytes[19] = REF_UPDATE_TIME_1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	74fb      	strb	r3, [r7, #19]
  transferBytes[20] = I2C_TIMEOUT_0;
 8000f42:	2364      	movs	r3, #100	; 0x64
 8000f44:	753b      	strb	r3, [r7, #20]
  transferBytes[21] = I2C_TIMEOUT_1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	757b      	strb	r3, [r7, #21]
  writeRandomBytes(IQS7211A_MM_ACTIVE_MODE_RR, 22, transferBytes);
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	2116      	movs	r1, #22
 8000f50:	2040      	movs	r0, #64	; 0x40
 8000f52:	f7ff fd53 	bl	80009fc <writeRandomBytes>

  /* Change the System Settings */
  /* Memory Map Position 0x50 - 0x5B */
  transferBytes[0] = SYSTEM_CONTROL_0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	703b      	strb	r3, [r7, #0]
  transferBytes[1] = SYSTEM_CONTROL_1;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	707b      	strb	r3, [r7, #1]
  transferBytes[2] = CONFIG_SETTINGS0;
 8000f5e:	233c      	movs	r3, #60	; 0x3c
 8000f60:	70bb      	strb	r3, [r7, #2]
  transferBytes[3] = CONFIG_SETTINGS1;
 8000f62:	2306      	movs	r3, #6
 8000f64:	70fb      	strb	r3, [r7, #3]
  transferBytes[4] = OTHER_SETTINGS_0;
 8000f66:	2320      	movs	r3, #32
 8000f68:	713b      	strb	r3, [r7, #4]
  transferBytes[5] = OTHER_SETTINGS_1;
 8000f6a:	23ff      	movs	r3, #255	; 0xff
 8000f6c:	717b      	strb	r3, [r7, #5]
  transferBytes[6] = TRACKPAD_TOUCH_SET_THRESHOLD;
 8000f6e:	2332      	movs	r3, #50	; 0x32
 8000f70:	71bb      	strb	r3, [r7, #6]
  transferBytes[7] = TRACKPAD_TOUCH_CLEAR_THRESHOLD;
 8000f72:	2314      	movs	r3, #20
 8000f74:	71fb      	strb	r3, [r7, #7]
  transferBytes[8] = ALP_THRESHOLD_0;
 8000f76:	2308      	movs	r3, #8
 8000f78:	723b      	strb	r3, [r7, #8]
  transferBytes[9] = ALP_THRESHOLD_1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	727b      	strb	r3, [r7, #9]
  transferBytes[10] = OPEN_0_0;
 8000f7e:	23ff      	movs	r3, #255	; 0xff
 8000f80:	72bb      	strb	r3, [r7, #10]
  transferBytes[11] = OPEN_0_1;
 8000f82:	23ff      	movs	r3, #255	; 0xff
 8000f84:	72fb      	strb	r3, [r7, #11]
  transferBytes[12] = ALP_SET_DEBOUNCE;
 8000f86:	2304      	movs	r3, #4
 8000f88:	733b      	strb	r3, [r7, #12]
  transferBytes[13] = ALP_CLEAR_DEBOUNCE;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	737b      	strb	r3, [r7, #13]
  transferBytes[14] = OPEN_1_0;
 8000f8e:	23ff      	movs	r3, #255	; 0xff
 8000f90:	73bb      	strb	r3, [r7, #14]
  transferBytes[15] = OPEN_1_1;
 8000f92:	23ff      	movs	r3, #255	; 0xff
 8000f94:	73fb      	strb	r3, [r7, #15]
  transferBytes[16] = TP_CONVERSION_FREQUENCY_UP_PASS_LENGTH;
 8000f96:	2302      	movs	r3, #2
 8000f98:	743b      	strb	r3, [r7, #16]
  transferBytes[17] = TP_CONVERSION_FREQUENCY_FRACTION_VALUE;
 8000f9a:	231a      	movs	r3, #26
 8000f9c:	747b      	strb	r3, [r7, #17]
  transferBytes[18] = ALP_CONVERSION_FREQUENCY_UP_PASS_LENGTH;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	74bb      	strb	r3, [r7, #18]
  transferBytes[19] = ALP_CONVERSION_FREQUENCY_FRACTION_VALUE;
 8000fa2:	231a      	movs	r3, #26
 8000fa4:	74fb      	strb	r3, [r7, #19]
  transferBytes[20] = TRACKPAD_HARDWARE_SETTINGS_0;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	753b      	strb	r3, [r7, #20]
  transferBytes[21] = TRACKPAD_HARDWARE_SETTINGS_1;
 8000faa:	238d      	movs	r3, #141	; 0x8d
 8000fac:	757b      	strb	r3, [r7, #21]
  transferBytes[22] = ALP_HARDWARE_SETTINGS_0;
 8000fae:	2365      	movs	r3, #101	; 0x65
 8000fb0:	75bb      	strb	r3, [r7, #22]
  transferBytes[23] = ALP_HARDWARE_SETTINGS_1;
 8000fb2:	239d      	movs	r3, #157	; 0x9d
 8000fb4:	75fb      	strb	r3, [r7, #23]
  writeRandomBytes(IQS7211A_MM_SYSTEM_CONTROL, 24, transferBytes);
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	461a      	mov	r2, r3
 8000fba:	2118      	movs	r1, #24
 8000fbc:	2050      	movs	r0, #80	; 0x50
 8000fbe:	f7ff fd1d 	bl	80009fc <writeRandomBytes>

  /* Change the Trackpad Settings */
  /* Memory Map Position 0x60 - 0x69 */
  transferBytes[0] = TRACKPAD_SETTINGS_0_0;
 8000fc2:	2328      	movs	r3, #40	; 0x28
 8000fc4:	703b      	strb	r3, [r7, #0]
  transferBytes[1] = TRACKPAD_SETTINGS_0_1;
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	707b      	strb	r3, [r7, #1]
  transferBytes[2] = TRACKPAD_SETTINGS_1_0;
 8000fca:	2304      	movs	r3, #4
 8000fcc:	70bb      	strb	r3, [r7, #2]
  transferBytes[3] = TRACKPAD_SETTINGS_1_1;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	70fb      	strb	r3, [r7, #3]
  transferBytes[4] = X_RESOLUTION_0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	713b      	strb	r3, [r7, #4]
  transferBytes[5] = X_RESOLUTION_1;
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	717b      	strb	r3, [r7, #5]
  transferBytes[6] = Y_RESOLUTION_0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	71bb      	strb	r3, [r7, #6]
  transferBytes[7] = Y_RESOLUTION_1;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	71fb      	strb	r3, [r7, #7]
  transferBytes[8] = XY_DYNAMIC_FILTER_BOTTOM_SPEED_0;
 8000fe2:	2306      	movs	r3, #6
 8000fe4:	723b      	strb	r3, [r7, #8]
  transferBytes[9] = XY_DYNAMIC_FILTER_BOTTOM_SPEED_1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	727b      	strb	r3, [r7, #9]
  transferBytes[10] = XY_DYNAMIC_FILTER_TOP_SPEED_0;
 8000fea:	237c      	movs	r3, #124	; 0x7c
 8000fec:	72bb      	strb	r3, [r7, #10]
  transferBytes[11] = XY_DYNAMIC_FILTER_TOP_SPEED_1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	72fb      	strb	r3, [r7, #11]
  transferBytes[12] = XY_DYNAMIC_FILTER_BOTTOM_BETA;
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	733b      	strb	r3, [r7, #12]
  transferBytes[13] = XY_DYNAMIC_FILTER_STATIC_FILTER_BETA;
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	737b      	strb	r3, [r7, #13]
  transferBytes[14] = STATIONARY_TOUCH_MOV_THRESHOLD;
 8000ffa:	2314      	movs	r3, #20
 8000ffc:	73bb      	strb	r3, [r7, #14]
  transferBytes[15] = FINGER_SPLIT_FACTOR;
 8000ffe:	2303      	movs	r3, #3
 8001000:	73fb      	strb	r3, [r7, #15]
  transferBytes[16] = X_TRIM_VALUE_0;
 8001002:	2314      	movs	r3, #20
 8001004:	743b      	strb	r3, [r7, #16]
  transferBytes[17] = X_TRIM_VALUE_1;
 8001006:	2300      	movs	r3, #0
 8001008:	747b      	strb	r3, [r7, #17]
  transferBytes[18] = Y_TRIM_VALUE_0;
 800100a:	2314      	movs	r3, #20
 800100c:	74bb      	strb	r3, [r7, #18]
  transferBytes[19] = Y_TRIM_VALUE_1;
 800100e:	2300      	movs	r3, #0
 8001010:	74fb      	strb	r3, [r7, #19]
  writeRandomBytes(IQS7211A_MM_TP_SETTINGS_0, 20, transferBytes);
 8001012:	463b      	mov	r3, r7
 8001014:	461a      	mov	r2, r3
 8001016:	2114      	movs	r1, #20
 8001018:	2060      	movs	r0, #96	; 0x60
 800101a:	f7ff fcef 	bl	80009fc <writeRandomBytes>

  /* Change the ALP Settings */
  /* Memory Map Position 0x70 - 0x74 */
  transferBytes[0] = ALP_COUNT_FILTER_BETA_0;
 800101e:	23b4      	movs	r3, #180	; 0xb4
 8001020:	703b      	strb	r3, [r7, #0]
  transferBytes[1] = OPEN_0;
 8001022:	2300      	movs	r3, #0
 8001024:	707b      	strb	r3, [r7, #1]
  transferBytes[2] = ALP_LTA_BETA_LP1;
 8001026:	2306      	movs	r3, #6
 8001028:	70bb      	strb	r3, [r7, #2]
  transferBytes[3] = ALP_LTA_BETA_LP2;
 800102a:	2304      	movs	r3, #4
 800102c:	70fb      	strb	r3, [r7, #3]
  transferBytes[4] = ALP_SETUP_0;
 800102e:	23aa      	movs	r3, #170	; 0xaa
 8001030:	713b      	strb	r3, [r7, #4]
  transferBytes[5] = ALP_SETUP_1;
 8001032:	2303      	movs	r3, #3
 8001034:	717b      	strb	r3, [r7, #5]
  transferBytes[6] = ALP_TX_ENABLE_0;
 8001036:	2300      	movs	r3, #0
 8001038:	71bb      	strb	r3, [r7, #6]
  transferBytes[7] = ALP_TX_ENABLE_1;
 800103a:	230f      	movs	r3, #15
 800103c:	71fb      	strb	r3, [r7, #7]

  /* Change the Settings Version Numbers */
  /* Memory Map Position 0x74 - 0x75 */
  transferBytes[8] = MINOR_VERSION;
 800103e:	2300      	movs	r3, #0
 8001040:	723b      	strb	r3, [r7, #8]
  transferBytes[9] = MAJOR_VERSION;
 8001042:	2300      	movs	r3, #0
 8001044:	727b      	strb	r3, [r7, #9]
  writeRandomBytes(IQS7211A_MM_ALP_COUNT_FILTER_BETA, 10, transferBytes);
 8001046:	463b      	mov	r3, r7
 8001048:	461a      	mov	r2, r3
 800104a:	210a      	movs	r1, #10
 800104c:	2070      	movs	r0, #112	; 0x70
 800104e:	f7ff fcd5 	bl	80009fc <writeRandomBytes>

  /* Change the Gesture Settings */
  /* Memory Map Position 0x80 - 0x8F */
  transferBytes[0] = GESTURE_ENABLE_0;
 8001052:	233f      	movs	r3, #63	; 0x3f
 8001054:	703b      	strb	r3, [r7, #0]
  transferBytes[1] = GESTURE_ENABLE_1;
 8001056:	230f      	movs	r3, #15
 8001058:	707b      	strb	r3, [r7, #1]
  transferBytes[2] = TAP_TIME_0;
 800105a:	2396      	movs	r3, #150	; 0x96
 800105c:	70bb      	strb	r3, [r7, #2]
  transferBytes[3] = TAP_TIME_1;
 800105e:	2300      	movs	r3, #0
 8001060:	70fb      	strb	r3, [r7, #3]
  transferBytes[4] = TAP_DISTANCE_0;
 8001062:	2332      	movs	r3, #50	; 0x32
 8001064:	713b      	strb	r3, [r7, #4]
  transferBytes[5] = TAP_DISTANCE_1;
 8001066:	2300      	movs	r3, #0
 8001068:	717b      	strb	r3, [r7, #5]
  transferBytes[6] = HOLD_TIME_0;
 800106a:	232c      	movs	r3, #44	; 0x2c
 800106c:	71bb      	strb	r3, [r7, #6]
  transferBytes[7] = HOLD_TIME_1;
 800106e:	2301      	movs	r3, #1
 8001070:	71fb      	strb	r3, [r7, #7]
  transferBytes[8] = SWIPE_TIME_0;
 8001072:	2396      	movs	r3, #150	; 0x96
 8001074:	723b      	strb	r3, [r7, #8]
  transferBytes[9] = SWIPE_TIME_1;
 8001076:	2300      	movs	r3, #0
 8001078:	727b      	strb	r3, [r7, #9]
  transferBytes[10] = SWIPE_X_DISTANCE_0;
 800107a:	23c8      	movs	r3, #200	; 0xc8
 800107c:	72bb      	strb	r3, [r7, #10]
  transferBytes[11] = SWIPE_X_DISTANCE_1;
 800107e:	2300      	movs	r3, #0
 8001080:	72fb      	strb	r3, [r7, #11]
  transferBytes[12] = SWIPE_Y_DISTANCE_0;
 8001082:	23c8      	movs	r3, #200	; 0xc8
 8001084:	733b      	strb	r3, [r7, #12]
  transferBytes[13] = SWIPE_Y_DISTANCE_1;
 8001086:	2300      	movs	r3, #0
 8001088:	737b      	strb	r3, [r7, #13]
  transferBytes[14] = SWIPE_ANGLE_0;
 800108a:	2317      	movs	r3, #23
 800108c:	73bb      	strb	r3, [r7, #14]
  transferBytes[15] = GESTURE_OPEN_0;
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]
  writeRandomBytes(IQS7211A_MM_GESTURE_ENABLE, 16, transferBytes);
 8001092:	463b      	mov	r3, r7
 8001094:	461a      	mov	r2, r3
 8001096:	2110      	movs	r1, #16
 8001098:	2080      	movs	r0, #128	; 0x80
 800109a:	f7ff fcaf 	bl	80009fc <writeRandomBytes>

  /* Change the RxTx Mapping */
  /* Memory Map Position 0x90 - 0x9C */
  transferBytes[0] = RX_TX_MAP_0;
 800109e:	2307      	movs	r3, #7
 80010a0:	703b      	strb	r3, [r7, #0]
  transferBytes[1] = RX_TX_MAP_1;
 80010a2:	2306      	movs	r3, #6
 80010a4:	707b      	strb	r3, [r7, #1]
  transferBytes[2] = RX_TX_MAP_2;
 80010a6:	2305      	movs	r3, #5
 80010a8:	70bb      	strb	r3, [r7, #2]
  transferBytes[3] = RX_TX_MAP_3;
 80010aa:	2304      	movs	r3, #4
 80010ac:	70fb      	strb	r3, [r7, #3]
  transferBytes[4] = RX_TX_MAP_4;
 80010ae:	2303      	movs	r3, #3
 80010b0:	713b      	strb	r3, [r7, #4]
  transferBytes[5] = RX_TX_MAP_5;
 80010b2:	2302      	movs	r3, #2
 80010b4:	717b      	strb	r3, [r7, #5]
  transferBytes[6] = RX_TX_MAP_6;
 80010b6:	2301      	movs	r3, #1
 80010b8:	71bb      	strb	r3, [r7, #6]
  transferBytes[7] = RX_TX_MAP_7;
 80010ba:	2300      	movs	r3, #0
 80010bc:	71fb      	strb	r3, [r7, #7]
  transferBytes[8] = RX_TX_MAP_8;
 80010be:	2308      	movs	r3, #8
 80010c0:	723b      	strb	r3, [r7, #8]
  transferBytes[9] = RX_TX_MAP_9;
 80010c2:	2309      	movs	r3, #9
 80010c4:	727b      	strb	r3, [r7, #9]
  transferBytes[10] = RX_TX_MAP_10;
 80010c6:	230a      	movs	r3, #10
 80010c8:	72bb      	strb	r3, [r7, #10]
  transferBytes[11] = RX_TX_MAP_11;
 80010ca:	230b      	movs	r3, #11
 80010cc:	72fb      	strb	r3, [r7, #11]
  transferBytes[12] = RX_TX_MAP_12;
 80010ce:	2300      	movs	r3, #0
 80010d0:	733b      	strb	r3, [r7, #12]
  writeRandomBytes(IQS7211A_MM_RXTX_MAPPING_1_0, 13, transferBytes);
 80010d2:	463b      	mov	r3, r7
 80010d4:	461a      	mov	r2, r3
 80010d6:	210d      	movs	r1, #13
 80010d8:	2090      	movs	r0, #144	; 0x90
 80010da:	f7ff fc8f 	bl	80009fc <writeRandomBytes>

  /* Change the Allocation of channels into cycles 0-9 */
  /* Memory Map Position 0xA0 - 0xBD */
  transferBytes[0] = PLACEHOLDER_0;
 80010de:	2305      	movs	r3, #5
 80010e0:	703b      	strb	r3, [r7, #0]
  transferBytes[1] = CH_1_CYCLE_0;
 80010e2:	2304      	movs	r3, #4
 80010e4:	707b      	strb	r3, [r7, #1]
  transferBytes[2] = CH_2_CYCLE_0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	70bb      	strb	r3, [r7, #2]
  transferBytes[3] = PLACEHOLDER_1;
 80010ea:	2305      	movs	r3, #5
 80010ec:	70fb      	strb	r3, [r7, #3]
  transferBytes[4] = CH_1_CYCLE_1;
 80010ee:	2305      	movs	r3, #5
 80010f0:	713b      	strb	r3, [r7, #4]
  transferBytes[5] = CH_2_CYCLE_1;
 80010f2:	2301      	movs	r3, #1
 80010f4:	717b      	strb	r3, [r7, #5]
  transferBytes[6] = PLACEHOLDER_2;
 80010f6:	2305      	movs	r3, #5
 80010f8:	71bb      	strb	r3, [r7, #6]
  transferBytes[7] = CH_1_CYCLE_2;
 80010fa:	2306      	movs	r3, #6
 80010fc:	71fb      	strb	r3, [r7, #7]
  transferBytes[8] = CH_2_CYCLE_2;
 80010fe:	2302      	movs	r3, #2
 8001100:	723b      	strb	r3, [r7, #8]
  transferBytes[9] = PLACEHOLDER_3;
 8001102:	2305      	movs	r3, #5
 8001104:	727b      	strb	r3, [r7, #9]
  transferBytes[10] = CH_1_CYCLE_3;
 8001106:	2307      	movs	r3, #7
 8001108:	72bb      	strb	r3, [r7, #10]
  transferBytes[11] = CH_2_CYCLE_3;
 800110a:	2303      	movs	r3, #3
 800110c:	72fb      	strb	r3, [r7, #11]
  transferBytes[12] = PLACEHOLDER_4;
 800110e:	2305      	movs	r3, #5
 8001110:	733b      	strb	r3, [r7, #12]
  transferBytes[13] = CH_1_CYCLE_4;
 8001112:	230c      	movs	r3, #12
 8001114:	737b      	strb	r3, [r7, #13]
  transferBytes[14] = CH_2_CYCLE_4;
 8001116:	2308      	movs	r3, #8
 8001118:	73bb      	strb	r3, [r7, #14]
  transferBytes[15] = PLACEHOLDER_5;
 800111a:	2305      	movs	r3, #5
 800111c:	73fb      	strb	r3, [r7, #15]
  transferBytes[16] = CH_1_CYCLE_5;
 800111e:	230d      	movs	r3, #13
 8001120:	743b      	strb	r3, [r7, #16]
  transferBytes[17] = CH_2_CYCLE_5;
 8001122:	2309      	movs	r3, #9
 8001124:	747b      	strb	r3, [r7, #17]
  transferBytes[18] = PLACEHOLDER_6;
 8001126:	2305      	movs	r3, #5
 8001128:	74bb      	strb	r3, [r7, #18]
  transferBytes[19] = CH_1_CYCLE_6;
 800112a:	230e      	movs	r3, #14
 800112c:	74fb      	strb	r3, [r7, #19]
  transferBytes[20] = CH_2_CYCLE_6;
 800112e:	230a      	movs	r3, #10
 8001130:	753b      	strb	r3, [r7, #20]
  transferBytes[21] = PLACEHOLDER_7;
 8001132:	2305      	movs	r3, #5
 8001134:	757b      	strb	r3, [r7, #21]
  transferBytes[22] = CH_1_CYCLE_7;
 8001136:	230f      	movs	r3, #15
 8001138:	75bb      	strb	r3, [r7, #22]
  transferBytes[23] = CH_2_CYCLE_7;
 800113a:	230b      	movs	r3, #11
 800113c:	75fb      	strb	r3, [r7, #23]
  transferBytes[24] = PLACEHOLDER_8;
 800113e:	2305      	movs	r3, #5
 8001140:	763b      	strb	r3, [r7, #24]
  transferBytes[25] = CH_1_CYCLE_8;
 8001142:	2314      	movs	r3, #20
 8001144:	767b      	strb	r3, [r7, #25]
  transferBytes[26] = CH_2_CYCLE_8;
 8001146:	2310      	movs	r3, #16
 8001148:	76bb      	strb	r3, [r7, #26]
  transferBytes[27] = PLACEHOLDER_9;
 800114a:	2305      	movs	r3, #5
 800114c:	76fb      	strb	r3, [r7, #27]
  transferBytes[28] = CH_1_CYCLE_9;
 800114e:	2315      	movs	r3, #21
 8001150:	773b      	strb	r3, [r7, #28]
  transferBytes[29] = CH_2_CYCLE_9;
 8001152:	2311      	movs	r3, #17
 8001154:	777b      	strb	r3, [r7, #29]
  writeRandomBytes(IQS7211A_MM_CYCLE_SETUP_0_9, 30, transferBytes);
 8001156:	463b      	mov	r3, r7
 8001158:	461a      	mov	r2, r3
 800115a:	211e      	movs	r1, #30
 800115c:	20a0      	movs	r0, #160	; 0xa0
 800115e:	f7ff fc4d 	bl	80009fc <writeRandomBytes>

  /* Change the Allocation of channels into cycles 10-17 */
  /* Memory Map Position 0xB0 - 0xCA */
  transferBytes[0] = PLACEHOLDER_10;
 8001162:	2305      	movs	r3, #5
 8001164:	703b      	strb	r3, [r7, #0]
  transferBytes[1] = CH_1_CYCLE_10;
 8001166:	2316      	movs	r3, #22
 8001168:	707b      	strb	r3, [r7, #1]
  transferBytes[2] = CH_2_CYCLE_10;
 800116a:	2312      	movs	r3, #18
 800116c:	70bb      	strb	r3, [r7, #2]
  transferBytes[3] = PLACEHOLDER_11;
 800116e:	2305      	movs	r3, #5
 8001170:	70fb      	strb	r3, [r7, #3]
  transferBytes[4] = CH_1_CYCLE_11;
 8001172:	2317      	movs	r3, #23
 8001174:	713b      	strb	r3, [r7, #4]
  transferBytes[5] = CH_2_CYCLE_11;
 8001176:	2313      	movs	r3, #19
 8001178:	717b      	strb	r3, [r7, #5]
  transferBytes[6] = PLACEHOLDER_12;
 800117a:	2305      	movs	r3, #5
 800117c:	71bb      	strb	r3, [r7, #6]
  transferBytes[7] = CH_1_CYCLE_12;
 800117e:	231c      	movs	r3, #28
 8001180:	71fb      	strb	r3, [r7, #7]
  transferBytes[8] = CH_2_CYCLE_12;
 8001182:	2318      	movs	r3, #24
 8001184:	723b      	strb	r3, [r7, #8]
  transferBytes[9] = PLACEHOLDER_13;
 8001186:	2305      	movs	r3, #5
 8001188:	727b      	strb	r3, [r7, #9]
  transferBytes[10] = CH_1_CYCLE_13;
 800118a:	231d      	movs	r3, #29
 800118c:	72bb      	strb	r3, [r7, #10]
  transferBytes[11] = CH_2_CYCLE_13;
 800118e:	2319      	movs	r3, #25
 8001190:	72fb      	strb	r3, [r7, #11]
  transferBytes[12] = PLACEHOLDER_14;
 8001192:	2305      	movs	r3, #5
 8001194:	733b      	strb	r3, [r7, #12]
  transferBytes[13] = CH_1_CYCLE_14;
 8001196:	231e      	movs	r3, #30
 8001198:	737b      	strb	r3, [r7, #13]
  transferBytes[14] = CH_2_CYCLE_14;
 800119a:	231a      	movs	r3, #26
 800119c:	73bb      	strb	r3, [r7, #14]
  transferBytes[15] = PLACEHOLDER_15;
 800119e:	2305      	movs	r3, #5
 80011a0:	73fb      	strb	r3, [r7, #15]
  transferBytes[16] = CH_1_CYCLE_15;
 80011a2:	231f      	movs	r3, #31
 80011a4:	743b      	strb	r3, [r7, #16]
  transferBytes[17] = CH_2_CYCLE_15;
 80011a6:	231b      	movs	r3, #27
 80011a8:	747b      	strb	r3, [r7, #17]
  transferBytes[18] = PLACEHOLDER_16;
 80011aa:	2305      	movs	r3, #5
 80011ac:	74bb      	strb	r3, [r7, #18]
  transferBytes[19] = CH_1_CYCLE_16;
 80011ae:	23ff      	movs	r3, #255	; 0xff
 80011b0:	74fb      	strb	r3, [r7, #19]
  transferBytes[20] = CH_2_CYCLE_16;
 80011b2:	23ff      	movs	r3, #255	; 0xff
 80011b4:	753b      	strb	r3, [r7, #20]
  transferBytes[21] = PLACEHOLDER_17;
 80011b6:	2305      	movs	r3, #5
 80011b8:	757b      	strb	r3, [r7, #21]
  transferBytes[22] = CH_1_CYCLE_17;
 80011ba:	23ff      	movs	r3, #255	; 0xff
 80011bc:	75bb      	strb	r3, [r7, #22]
  transferBytes[23] = CH_2_CYCLE_17;
 80011be:	23ff      	movs	r3, #255	; 0xff
 80011c0:	75fb      	strb	r3, [r7, #23]
  writeRandomBytes(IQS7211A_MM_CYCLE_SETUP_10_17, 24, transferBytes);
 80011c2:	463b      	mov	r3, r7
 80011c4:	461a      	mov	r2, r3
 80011c6:	2118      	movs	r1, #24
 80011c8:	20b0      	movs	r0, #176	; 0xb0
 80011ca:	f7ff fc17 	bl	80009fc <writeRandomBytes>

}
 80011ce:	bf00      	nop
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d8:	b5b0      	push	{r4, r5, r7, lr}
 80011da:	b0a2      	sub	sp, #136	; 0x88
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011de:	f002 ff77 	bl	80040d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e2:	f000 fb83 	bl	80018ec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  tickAtStart = HAL_GetTick();
 80011e6:	f002 ffcd 	bl	8004184 <HAL_GetTick>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4a98      	ldr	r2, [pc, #608]	; (8001450 <main+0x278>)
 80011ee:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f0:	f000 ff80 	bl	80020f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011f4:	f000 ff4c 	bl	8002090 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80011f8:	f000 fbe8 	bl	80019cc <MX_ADC1_Init>
  MX_DAC1_Init();
 80011fc:	f000 fc56 	bl	8001aac <MX_DAC1_Init>
  MX_TIM2_Init();
 8001200:	f000 fd4e 	bl	8001ca0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001204:	f000 fc7c 	bl	8001b00 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001208:	f000 fcba 	bl	8001b80 <MX_TIM1_Init>
  MX_TIM15_Init();
 800120c:	f000 fe22 	bl	8001e54 <MX_TIM15_Init>
  MX_TIM16_Init();
 8001210:	f000 fec4 	bl	8001f9c <MX_TIM16_Init>
  MX_TIM4_Init();
 8001214:	f000 fdd0 	bl	8001db8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  uint8_t studentNumber[] = "#:25137018:$\n";
 8001218:	4b8e      	ldr	r3, [pc, #568]	; (8001454 <main+0x27c>)
 800121a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800121e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001220:	c407      	stmia	r4!, {r0, r1, r2}
 8001222:	8023      	strh	r3, [r4, #0]
  uint8_t message[] = "button pressed \n";
 8001224:	4b8c      	ldr	r3, [pc, #560]	; (8001458 <main+0x280>)
 8001226:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800122a:	461d      	mov	r5, r3
 800122c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001230:	682b      	ldr	r3, [r5, #0]
 8001232:	7023      	strb	r3, [r4, #0]
  uint8_t stdMessageSize[] = "#:MM:512:000:000:$\n"; //19
 8001234:	4b89      	ldr	r3, [pc, #548]	; (800145c <main+0x284>)
 8001236:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800123a:	461d      	mov	r5, r3
 800123c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001240:	682b      	ldr	r3, [r5, #0]
 8001242:	6023      	str	r3, [r4, #0]

//first adc sample set
  uint8_t adcStart = 1;
 8001244:	2301      	movs	r3, #1
 8001246:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

  //I2C buffers

  //ADD WAIT FOR UART TRANSMIT
  while(HAL_GetTick() - tickAtStart < 100){
 800124a:	bf00      	nop
 800124c:	f002 ff9a 	bl	8004184 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	4b7f      	ldr	r3, [pc, #508]	; (8001450 <main+0x278>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b63      	cmp	r3, #99	; 0x63
 800125a:	d9f7      	bls.n	800124c <main+0x74>

  }
  uint32_t tickNow = HAL_GetTick();
 800125c:	f002 ff92 	bl	8004184 <HAL_GetTick>
 8001260:	6778      	str	r0, [r7, #116]	; 0x74
  HAL_UART_Transmit(&huart2, studentNumber, 13, 500);
 8001262:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001266:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800126a:	220d      	movs	r2, #13
 800126c:	487c      	ldr	r0, [pc, #496]	; (8001460 <main+0x288>)
 800126e:	f008 f9db 	bl	8009628 <HAL_UART_Transmit>


  btns[BTN_LEFT].button_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 8001272:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001276:	487b      	ldr	r0, [pc, #492]	; (8001464 <main+0x28c>)
 8001278:	f004 fce0 	bl	8005c3c <HAL_GPIO_ReadPin>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	4b79      	ldr	r3, [pc, #484]	; (8001468 <main+0x290>)
 8001282:	725a      	strb	r2, [r3, #9]
  btns[BTN_LEFT].new_button_state = btns[BTN_LEFT].button_state;
 8001284:	4b78      	ldr	r3, [pc, #480]	; (8001468 <main+0x290>)
 8001286:	7a5a      	ldrb	r2, [r3, #9]
 8001288:	4b77      	ldr	r3, [pc, #476]	; (8001468 <main+0x290>)
 800128a:	721a      	strb	r2, [r3, #8]
  btns[BTN_LEFT].gpio = GPIO_PIN_9;
 800128c:	4b76      	ldr	r3, [pc, #472]	; (8001468 <main+0x290>)
 800128e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001292:	815a      	strh	r2, [r3, #10]
  btns[BTN_LEFT].group = GPIOB;
 8001294:	4b74      	ldr	r3, [pc, #464]	; (8001468 <main+0x290>)
 8001296:	4a73      	ldr	r2, [pc, #460]	; (8001464 <main+0x28c>)
 8001298:	60da      	str	r2, [r3, #12]
  btns[BTN_LEFT].press_tick = 0;
 800129a:	4b73      	ldr	r3, [pc, #460]	; (8001468 <main+0x290>)
 800129c:	2200      	movs	r2, #0
 800129e:	605a      	str	r2, [r3, #4]

  btns[BTN_RIGHT].button_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 80012a0:	2180      	movs	r1, #128	; 0x80
 80012a2:	4872      	ldr	r0, [pc, #456]	; (800146c <main+0x294>)
 80012a4:	f004 fcca 	bl	8005c3c <HAL_GPIO_ReadPin>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b6e      	ldr	r3, [pc, #440]	; (8001468 <main+0x290>)
 80012ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  btns[BTN_RIGHT].new_button_state = btns[BTN_RIGHT].button_state;
 80012b2:	4b6d      	ldr	r3, [pc, #436]	; (8001468 <main+0x290>)
 80012b4:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80012b8:	4b6b      	ldr	r3, [pc, #428]	; (8001468 <main+0x290>)
 80012ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  btns[BTN_RIGHT].gpio = GPIO_PIN_7;
 80012be:	4b6a      	ldr	r3, [pc, #424]	; (8001468 <main+0x290>)
 80012c0:	2280      	movs	r2, #128	; 0x80
 80012c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  btns[BTN_RIGHT].group = GPIOC;
 80012c4:	4b68      	ldr	r3, [pc, #416]	; (8001468 <main+0x290>)
 80012c6:	4a69      	ldr	r2, [pc, #420]	; (800146c <main+0x294>)
 80012c8:	62da      	str	r2, [r3, #44]	; 0x2c
  btns[BTN_RIGHT].press_tick = 0;
 80012ca:	4b67      	ldr	r3, [pc, #412]	; (8001468 <main+0x290>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24


  btns[BTN_MIDDLE].button_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80012d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d8:	f004 fcb0 	bl	8005c3c <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	4b61      	ldr	r3, [pc, #388]	; (8001468 <main+0x290>)
 80012e2:	765a      	strb	r2, [r3, #25]
  btns[BTN_MIDDLE].new_button_state = btns[BTN_MIDDLE].button_state;
 80012e4:	4b60      	ldr	r3, [pc, #384]	; (8001468 <main+0x290>)
 80012e6:	7e5a      	ldrb	r2, [r3, #25]
 80012e8:	4b5f      	ldr	r3, [pc, #380]	; (8001468 <main+0x290>)
 80012ea:	761a      	strb	r2, [r3, #24]
  btns[BTN_MIDDLE].gpio = GPIO_PIN_8;
 80012ec:	4b5e      	ldr	r3, [pc, #376]	; (8001468 <main+0x290>)
 80012ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012f2:	835a      	strh	r2, [r3, #26]
  btns[BTN_MIDDLE].group = GPIOA;
 80012f4:	4b5c      	ldr	r3, [pc, #368]	; (8001468 <main+0x290>)
 80012f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012fa:	61da      	str	r2, [r3, #28]
  btns[BTN_MIDDLE].press_tick = 0;
 80012fc:	4b5a      	ldr	r3, [pc, #360]	; (8001468 <main+0x290>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]


  //ADD STATE INIT FOR ALL STATES

  STATE currentState = STATE1;
 8001302:	2300      	movs	r3, #0
 8001304:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
  STATE newState = STATE_MAX;
 8001308:	2303      	movs	r3, #3
 800130a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
  STATE targetedState = STATE_MAX;
 800130e:	2303      	movs	r3, #3
 8001310:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
  int s = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for(s = 0; s < STATE_MAX; s++)
 800131a:	2300      	movs	r3, #0
 800131c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001320:	e00f      	b.n	8001342 <main+0x16a>
  	  {
	  stateCallback[s].handleOnInit();
 8001322:	4953      	ldr	r1, [pc, #332]	; (8001470 <main+0x298>)
 8001324:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001328:	4613      	mov	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	1a9b      	subs	r3, r3, r2
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	440b      	add	r3, r1
 8001332:	330c      	adds	r3, #12
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4798      	blx	r3
  for(s = 0; s < STATE_MAX; s++)
 8001338:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800133c:	3301      	adds	r3, #1
 800133e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001342:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001346:	2b02      	cmp	r3, #2
 8001348:	ddeb      	ble.n	8001322 <main+0x14a>
  	  }

  stateCallback[STATE1].handleOnEnterEvt();
 800134a:	4b49      	ldr	r3, [pc, #292]	; (8001470 <main+0x298>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4798      	blx	r3

  //Code for byte recieve
  HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 8001350:	2201      	movs	r2, #1
 8001352:	4948      	ldr	r1, [pc, #288]	; (8001474 <main+0x29c>)
 8001354:	4842      	ldr	r0, [pc, #264]	; (8001460 <main+0x288>)
 8001356:	f008 f9f1 	bl	800973c <HAL_UART_Receive_IT>

  //adc calibration
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800135a:	2100      	movs	r1, #0
 800135c:	4846      	ldr	r0, [pc, #280]	; (8001478 <main+0x2a0>)
 800135e:	f003 fb60 	bl	8004a22 <HAL_ADCEx_Calibration_Start>

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001362:	2100      	movs	r1, #0
 8001364:	4845      	ldr	r0, [pc, #276]	; (800147c <main+0x2a4>)
 8001366:	f004 f9cf 	bl	8005708 <HAL_DAC_Start>

  initTrackpad();
 800136a:	f001 f819 	bl	80023a0 <initTrackpad>


  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800136e:	2100      	movs	r1, #0
 8001370:	4843      	ldr	r0, [pc, #268]	; (8001480 <main+0x2a8>)
 8001372:	f007 f80f 	bl	8008394 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001376:	2100      	movs	r1, #0
 8001378:	4842      	ldr	r0, [pc, #264]	; (8001484 <main+0x2ac>)
 800137a:	f007 f80b 	bl	8008394 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800137e:	210c      	movs	r1, #12
 8001380:	4841      	ldr	r0, [pc, #260]	; (8001488 <main+0x2b0>)
 8001382:	f007 f807 	bl	8008394 <HAL_TIM_PWM_Start>



  char message2[] = "SLIDE\n";
 8001386:	4a41      	ldr	r2, [pc, #260]	; (800148c <main+0x2b4>)
 8001388:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800138c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001390:	6018      	str	r0, [r3, #0]
 8001392:	3304      	adds	r3, #4
 8001394:	8019      	strh	r1, [r3, #0]
 8001396:	3302      	adds	r3, #2
 8001398:	0c0a      	lsrs	r2, r1, #16
 800139a:	701a      	strb	r2, [r3, #0]
  char messageIntSetTo[] = "INTENSITYSET";
 800139c:	4b3c      	ldr	r3, [pc, #240]	; (8001490 <main+0x2b8>)
 800139e:	f107 0418 	add.w	r4, r7, #24
 80013a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013a4:	c407      	stmia	r4!, {r0, r1, r2}
 80013a6:	7023      	strb	r3, [r4, #0]
  char message3[] = "";
 80013a8:	2300      	movs	r3, #0
 80013aa:	753b      	strb	r3, [r7, #20]
  uint8_t gestureData[10];
  slideDetected = 0;
 80013ac:	4b39      	ldr	r3, [pc, #228]	; (8001494 <main+0x2bc>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	801a      	strh	r2, [r3, #0]

  GESTURETYPE currentGesture = GEST_NONE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  GESTURETYPE readGesture = GEST_NONE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint16_t currentXCoord = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	80fb      	strh	r3, [r7, #6]
  uint16_t currentYCoord = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	80bb      	strh	r3, [r7, #4]
  uint32_t trackInitTime = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (RDY == 1)
 80013ca:	4b33      	ldr	r3, [pc, #204]	; (8001498 <main+0x2c0>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	f040 8086 	bne.w	80014e2 <main+0x30a>
	  {

		  readGestureData(gestureData);
 80013d6:	f107 0308 	add.w	r3, r7, #8
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fb6e 	bl	8000abc <readGestureData>
		  if (HAL_GetTick()- tickAtStart > 5000)
 80013e0:	f002 fed0 	bl	8004184 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <main+0x278>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d973      	bls.n	80014dc <main+0x304>
		  {

			  processGestureData(gestureData);
 80013f4:	f107 0308 	add.w	r3, r7, #8
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fb6d 	bl	8000ad8 <processGestureData>
			  readGesture = getGestureType();
 80013fe:	f7ff fc31 	bl	8000c64 <getGestureType>
 8001402:	4603      	mov	r3, r0
 8001404:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			  getGestureCoordinates(&currentXCoord, &currentYCoord);
 8001408:	1d3a      	adds	r2, r7, #4
 800140a:	1dbb      	adds	r3, r7, #6
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fc3e 	bl	8000c90 <getGestureCoordinates>
			  if(readGesture != currentGesture){
 8001414:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8001418:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800141c:	429a      	cmp	r2, r3
 800141e:	d04c      	beq.n	80014ba <main+0x2e2>
				  currentGesture = readGesture;
 8001420:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001424:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				  if(currentGesture == GEST_TAP)
 8001428:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800142c:	2b01      	cmp	r3, #1
 800142e:	d135      	bne.n	800149c <main+0x2c4>
				  {
					  stateCallback[currentState].handleOnTap(currentXCoord, currentYCoord);
 8001430:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8001434:	490e      	ldr	r1, [pc, #56]	; (8001470 <main+0x298>)
 8001436:	4613      	mov	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	1a9b      	subs	r3, r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	440b      	add	r3, r1
 8001440:	3334      	adds	r3, #52	; 0x34
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	88fa      	ldrh	r2, [r7, #6]
 8001446:	88b9      	ldrh	r1, [r7, #4]
 8001448:	4610      	mov	r0, r2
 800144a:	4798      	blx	r3
 800144c:	e035      	b.n	80014ba <main+0x2e2>
 800144e:	bf00      	nop
 8001450:	2000524c 	.word	0x2000524c
 8001454:	0800ab84 	.word	0x0800ab84
 8001458:	0800ab94 	.word	0x0800ab94
 800145c:	0800aba8 	.word	0x0800aba8
 8001460:	2000513c 	.word	0x2000513c
 8001464:	48000400 	.word	0x48000400
 8001468:	200051c4 	.word	0x200051c4
 800146c:	48000800 	.word	0x48000800
 8001470:	20000004 	.word	0x20000004
 8001474:	200051f4 	.word	0x200051f4
 8001478:	20004f08 	.word	0x20004f08
 800147c:	20004f58 	.word	0x20004f58
 8001480:	200050a4 	.word	0x200050a4
 8001484:	200050f0 	.word	0x200050f0
 8001488:	2000500c 	.word	0x2000500c
 800148c:	0800abbc 	.word	0x0800abbc
 8001490:	0800abc4 	.word	0x0800abc4
 8001494:	20005248 	.word	0x20005248
 8001498:	200000ac 	.word	0x200000ac
				  } else if (currentGesture == GEST_HOLD)
 800149c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d10a      	bne.n	80014ba <main+0x2e2>
				  {
					  stateCallback[currentState].handleOnHold();
 80014a4:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80014a8:	499b      	ldr	r1, [pc, #620]	; (8001718 <main+0x540>)
 80014aa:	4613      	mov	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	1a9b      	subs	r3, r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	440b      	add	r3, r1
 80014b4:	3328      	adds	r3, #40	; 0x28
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4798      	blx	r3

				  }
			  }
			  if (currentGesture == GEST_SLIDE){
 80014ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80014be:	2b04      	cmp	r3, #4
 80014c0:	d10c      	bne.n	80014dc <main+0x304>

					 stateCallback[currentState].handleOnSlide(currentXCoord);
 80014c2:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80014c6:	4994      	ldr	r1, [pc, #592]	; (8001718 <main+0x540>)
 80014c8:	4613      	mov	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	1a9b      	subs	r3, r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	440b      	add	r3, r1
 80014d2:	3330      	adds	r3, #48	; 0x30
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	88fa      	ldrh	r2, [r7, #6]
 80014d8:	4610      	mov	r0, r2
 80014da:	4798      	blx	r3

				  }
		  }
	  	  RDY = 0;
 80014dc:	4b8f      	ldr	r3, [pc, #572]	; (800171c <main+0x544>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]

	  	}

	  //adc
	  HAL_ADC_Start(&hadc1);
 80014e2:	488f      	ldr	r0, [pc, #572]	; (8001720 <main+0x548>)
 80014e4:	f003 f878 	bl	80045d8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1);
 80014e8:	2101      	movs	r1, #1
 80014ea:	488d      	ldr	r0, [pc, #564]	; (8001720 <main+0x548>)
 80014ec:	f003 f98a 	bl	8004804 <HAL_ADC_PollForConversion>
	  uint32_t adcVal = HAL_ADC_GetValue(&hadc1);
 80014f0:	488b      	ldr	r0, [pc, #556]	; (8001720 <main+0x548>)
 80014f2:	f003 fa89 	bl	8004a08 <HAL_ADC_GetValue>
 80014f6:	66b8      	str	r0, [r7, #104]	; 0x68
	  // if sample >= 12 && average changed with certain amount then read slider value to current status handle slider

	  //scaling
	  adcVal = (adcVal/INPUT_MAX)*OUTPUT_MAX;
 80014f8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80014fa:	f7fe ffaf 	bl	800045c <__aeabi_ui2d>
 80014fe:	a384      	add	r3, pc, #528	; (adr r3, 8001710 <main+0x538>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	f7ff f94e 	bl	80007a4 <__aeabi_ddiv>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001518:	f7ff f81a 	bl	8000550 <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f7ff fa26 	bl	8000974 <__aeabi_d2uiz>
 8001528:	4603      	mov	r3, r0
 800152a:	66bb      	str	r3, [r7, #104]	; 0x68

	  adcSum = adcSum +adcVal;
 800152c:	4b7d      	ldr	r3, [pc, #500]	; (8001724 <main+0x54c>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001532:	4413      	add	r3, r2
 8001534:	4a7b      	ldr	r2, [pc, #492]	; (8001724 <main+0x54c>)
 8001536:	6013      	str	r3, [r2, #0]
	  adcNumSamples++;
 8001538:	4b7b      	ldr	r3, [pc, #492]	; (8001728 <main+0x550>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	3301      	adds	r3, #1
 800153e:	4a7a      	ldr	r2, [pc, #488]	; (8001728 <main+0x550>)
 8001540:	6013      	str	r3, [r2, #0]

	  if(adcNumSamples == ADC_SAMPLES){
 8001542:	4b79      	ldr	r3, [pc, #484]	; (8001728 <main+0x550>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b0c      	cmp	r3, #12
 8001548:	d164      	bne.n	8001614 <main+0x43c>
		  adcAvg = adcSum/ADC_SAMPLES;
 800154a:	4b76      	ldr	r3, [pc, #472]	; (8001724 <main+0x54c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a77      	ldr	r2, [pc, #476]	; (800172c <main+0x554>)
 8001550:	fba2 2303 	umull	r2, r3, r2, r3
 8001554:	08db      	lsrs	r3, r3, #3
 8001556:	4a76      	ldr	r2, [pc, #472]	; (8001730 <main+0x558>)
 8001558:	6013      	str	r3, [r2, #0]
		  if(adcAvg > 480){
 800155a:	4b75      	ldr	r3, [pc, #468]	; (8001730 <main+0x558>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001562:	d903      	bls.n	800156c <main+0x394>
			  adcAvg = 512;
 8001564:	4b72      	ldr	r3, [pc, #456]	; (8001730 <main+0x558>)
 8001566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800156a:	601a      	str	r2, [r3, #0]
		  }
		  if(adcAvg <= 18)
 800156c:	4b70      	ldr	r3, [pc, #448]	; (8001730 <main+0x558>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b12      	cmp	r3, #18
 8001572:	d802      	bhi.n	800157a <main+0x3a2>
		  {
			  adcAvg = 1;
 8001574:	4b6e      	ldr	r3, [pc, #440]	; (8001730 <main+0x558>)
 8001576:	2201      	movs	r2, #1
 8001578:	601a      	str	r2, [r3, #0]
		  }
		  adcNumSamples = 0;
 800157a:	4b6b      	ldr	r3, [pc, #428]	; (8001728 <main+0x550>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
		  if((adcAvg > adcPreviousAvg && adcAvg - adcPreviousAvg > ADC_THRESHOLD) || (adcAvg < adcPreviousAvg && adcPreviousAvg - adcAvg > ADC_THRESHOLD))
 8001580:	4b6b      	ldr	r3, [pc, #428]	; (8001730 <main+0x558>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b6b      	ldr	r3, [pc, #428]	; (8001734 <main+0x55c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d906      	bls.n	800159a <main+0x3c2>
 800158c:	4b68      	ldr	r3, [pc, #416]	; (8001730 <main+0x558>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b68      	ldr	r3, [pc, #416]	; (8001734 <main+0x55c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b14      	cmp	r3, #20
 8001598:	d80c      	bhi.n	80015b4 <main+0x3dc>
 800159a:	4b65      	ldr	r3, [pc, #404]	; (8001730 <main+0x558>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	4b65      	ldr	r3, [pc, #404]	; (8001734 <main+0x55c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d233      	bcs.n	800160e <main+0x436>
 80015a6:	4b63      	ldr	r3, [pc, #396]	; (8001734 <main+0x55c>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	4b61      	ldr	r3, [pc, #388]	; (8001730 <main+0x558>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b14      	cmp	r3, #20
 80015b2:	d92c      	bls.n	800160e <main+0x436>
		  {
			  if(adcStart != 1)
 80015b4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d021      	beq.n	8001600 <main+0x428>
			  {

			  stateCallback[currentState].handleSliderVal(adcAvg);
 80015bc:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80015c0:	4955      	ldr	r1, [pc, #340]	; (8001718 <main+0x540>)
 80015c2:	4613      	mov	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	1a9b      	subs	r3, r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	440b      	add	r3, r1
 80015cc:	3318      	adds	r3, #24
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a57      	ldr	r2, [pc, #348]	; (8001730 <main+0x558>)
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	4610      	mov	r0, r2
 80015d6:	4798      	blx	r3

			  if(currentState == STATE1 || currentState == STATE3)
 80015d8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <main+0x410>
 80015e0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d10b      	bne.n	8001600 <main+0x428>
			  {
				  stateCallback[currentState].handleGetConfig(txBuffer);
 80015e8:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80015ec:	494a      	ldr	r1, [pc, #296]	; (8001718 <main+0x540>)
 80015ee:	4613      	mov	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	1a9b      	subs	r3, r3, r2
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	440b      	add	r3, r1
 80015f8:	3314      	adds	r3, #20
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	484e      	ldr	r0, [pc, #312]	; (8001738 <main+0x560>)
 80015fe:	4798      	blx	r3
				  //HAL_UART_Transmit(&huart2, txBuffer, 19, 500);
			  }

			  }
			  adcPreviousAvg = adcAvg;
 8001600:	4b4b      	ldr	r3, [pc, #300]	; (8001730 <main+0x558>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a4b      	ldr	r2, [pc, #300]	; (8001734 <main+0x55c>)
 8001606:	6013      	str	r3, [r2, #0]
			  adcStart = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

		  }
		  adcSum = 0;
 800160e:	4b45      	ldr	r3, [pc, #276]	; (8001724 <main+0x54c>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
	  }

	  //Button code
	  	  int j;
	  	  for (j = 0; j < NUM_BTN; j++) {
 8001614:	2300      	movs	r3, #0
 8001616:	67bb      	str	r3, [r7, #120]	; 0x78
 8001618:	e0b1      	b.n	800177e <main+0x5a6>
	  		if(HAL_GetTick() - btns[j].press_tick > 50 && btns[j].button_state_change == 1)
 800161a:	f002 fdb3 	bl	8004184 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	4946      	ldr	r1, [pc, #280]	; (800173c <main+0x564>)
 8001622:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	440b      	add	r3, r1
 8001628:	3304      	adds	r3, #4
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b32      	cmp	r3, #50	; 0x32
 8001630:	d925      	bls.n	800167e <main+0x4a6>
 8001632:	4a42      	ldr	r2, [pc, #264]	; (800173c <main+0x564>)
 8001634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	4413      	add	r3, r2
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d11e      	bne.n	800167e <main+0x4a6>
	  			  	{
	  					btns[j].new_button_state = HAL_GPIO_ReadPin(btns[j].group, btns[j].gpio);
 8001640:	4a3e      	ldr	r2, [pc, #248]	; (800173c <main+0x564>)
 8001642:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001644:	011b      	lsls	r3, r3, #4
 8001646:	4413      	add	r3, r2
 8001648:	330c      	adds	r3, #12
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	493b      	ldr	r1, [pc, #236]	; (800173c <main+0x564>)
 800164e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	440b      	add	r3, r1
 8001654:	330a      	adds	r3, #10
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	4610      	mov	r0, r2
 800165c:	f004 faee 	bl	8005c3c <HAL_GPIO_ReadPin>
 8001660:	4603      	mov	r3, r0
 8001662:	4619      	mov	r1, r3
 8001664:	4a35      	ldr	r2, [pc, #212]	; (800173c <main+0x564>)
 8001666:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	4413      	add	r3, r2
 800166c:	3308      	adds	r3, #8
 800166e:	460a      	mov	r2, r1
 8001670:	701a      	strb	r2, [r3, #0]
	  					btns[j].button_state_change = 0;									//button isn't changing anymore
 8001672:	4a32      	ldr	r2, [pc, #200]	; (800173c <main+0x564>)
 8001674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001676:	011b      	lsls	r3, r3, #4
 8001678:	4413      	add	r3, r2
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
	  			  	}

	  		if(btns[j].new_button_state != btns[j].button_state){
 800167e:	4a2f      	ldr	r2, [pc, #188]	; (800173c <main+0x564>)
 8001680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	4413      	add	r3, r2
 8001686:	3308      	adds	r3, #8
 8001688:	781a      	ldrb	r2, [r3, #0]
 800168a:	492c      	ldr	r1, [pc, #176]	; (800173c <main+0x564>)
 800168c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800168e:	011b      	lsls	r3, r3, #4
 8001690:	440b      	add	r3, r1
 8001692:	3309      	adds	r3, #9
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d06e      	beq.n	8001778 <main+0x5a0>
	  			  if(btns[j].new_button_state == BTN_STATE_PRESSED)
 800169a:	4a28      	ldr	r2, [pc, #160]	; (800173c <main+0x564>)
 800169c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	4413      	add	r3, r2
 80016a2:	3308      	adds	r3, #8
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d159      	bne.n	800175e <main+0x586>
	  			  {
	  				  if(btns[BTN_LEFT].new_button_state == BTN_STATE_PRESSED)
 80016aa:	4b24      	ldr	r3, [pc, #144]	; (800173c <main+0x564>)
 80016ac:	7a1b      	ldrb	r3, [r3, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d146      	bne.n	8001740 <main+0x568>
	  				  {
	  					stateCallback[currentState].handleOnExitEvt();
 80016b2:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80016b6:	4918      	ldr	r1, [pc, #96]	; (8001718 <main+0x540>)
 80016b8:	4613      	mov	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	1a9b      	subs	r3, r3, r2
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	440b      	add	r3, r1
 80016c2:	3304      	adds	r3, #4
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4798      	blx	r3
	  					  //HAL_UART_Transmit(&huart2, message, 16, 1000);
	  					  	  if(currentState == STATE1)
 80016c8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <main+0x4fe>
	  					  		{

	  					  			newState = STATE3;
 80016d0:	2302      	movs	r3, #2
 80016d2:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

	  					  		}
	  					  		if(currentState == STATE2)
 80016d6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d102      	bne.n	80016e4 <main+0x50c>
	  					  		{

	  					  			newState = STATE1;
 80016de:	2300      	movs	r3, #0
 80016e0:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

	  					  		}
	  					  		if(currentState == STATE3)
 80016e4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d102      	bne.n	80016f2 <main+0x51a>
	  					  		{

	  					  			newState = STATE2;
 80016ec:	2301      	movs	r3, #1
 80016ee:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

	  					  		}
	  					  		currentState = newState;
 80016f2:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80016f6:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	  					  		stateCallback[currentState].handleOnEnterEvt();
 80016fa:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80016fe:	4906      	ldr	r1, [pc, #24]	; (8001718 <main+0x540>)
 8001700:	4613      	mov	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	1a9b      	subs	r3, r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	440b      	add	r3, r1
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4798      	blx	r3
 800170e:	e026      	b.n	800175e <main+0x586>
 8001710:	00000000 	.word	0x00000000
 8001714:	40affe00 	.word	0x40affe00
 8001718:	20000004 	.word	0x20000004
 800171c:	200000ac 	.word	0x200000ac
 8001720:	20004f08 	.word	0x20004f08
 8001724:	20005238 	.word	0x20005238
 8001728:	2000523c 	.word	0x2000523c
 800172c:	aaaaaaab 	.word	0xaaaaaaab
 8001730:	20005244 	.word	0x20005244
 8001734:	20005240 	.word	0x20005240
 8001738:	20005218 	.word	0x20005218
 800173c:	200051c4 	.word	0x200051c4

	  				  }
	  				  else {
	  					stateCallback[currentState].handleOnButtonEvt(j, BTN_STATE_PRESSED);
 8001740:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8001744:	4962      	ldr	r1, [pc, #392]	; (80018d0 <main+0x6f8>)
 8001746:	4613      	mov	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	1a9b      	subs	r3, r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	440b      	add	r3, r1
 8001750:	3308      	adds	r3, #8
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	2100      	movs	r1, #0
 800175a:	4610      	mov	r0, r2
 800175c:	4798      	blx	r3

	  				  }

	  			  }
	  			  btns[j].button_state = btns[j].new_button_state;
 800175e:	4a5d      	ldr	r2, [pc, #372]	; (80018d4 <main+0x6fc>)
 8001760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	4413      	add	r3, r2
 8001766:	3308      	adds	r3, #8
 8001768:	7819      	ldrb	r1, [r3, #0]
 800176a:	4a5a      	ldr	r2, [pc, #360]	; (80018d4 <main+0x6fc>)
 800176c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	4413      	add	r3, r2
 8001772:	3309      	adds	r3, #9
 8001774:	460a      	mov	r2, r1
 8001776:	701a      	strb	r2, [r3, #0]
	  	  for (j = 0; j < NUM_BTN; j++) {
 8001778:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800177a:	3301      	adds	r3, #1
 800177c:	67bb      	str	r3, [r7, #120]	; 0x78
 800177e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001780:	2b02      	cmp	r3, #2
 8001782:	f77f af4a 	ble.w	800161a <main+0x442>
	  			  }
	  	  	 }

	  	  if(recievedUartMessage == 1){
 8001786:	4b54      	ldr	r3, [pc, #336]	; (80018d8 <main+0x700>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b01      	cmp	r3, #1
 800178c:	f040 8093 	bne.w	80018b6 <main+0x6de>
	  		targetedState = STATE_MAX;
 8001790:	2303      	movs	r3, #3
 8001792:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

	  		  if(rxMessageLength == 19 || rxMessageLength == 7){
 8001796:	4b51      	ldr	r3, [pc, #324]	; (80018dc <main+0x704>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b13      	cmp	r3, #19
 800179c:	d004      	beq.n	80017a8 <main+0x5d0>
 800179e:	4b4f      	ldr	r3, [pc, #316]	; (80018dc <main+0x704>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b07      	cmp	r3, #7
 80017a4:	f040 8081 	bne.w	80018aa <main+0x6d2>
	  			  // Flasing state
	  			  if(rxBuffer[2] == 'M' && rxBuffer[3] == 'F'){
 80017a8:	4b4d      	ldr	r3, [pc, #308]	; (80018e0 <main+0x708>)
 80017aa:	789b      	ldrb	r3, [r3, #2]
 80017ac:	2b4d      	cmp	r3, #77	; 0x4d
 80017ae:	d107      	bne.n	80017c0 <main+0x5e8>
 80017b0:	4b4b      	ldr	r3, [pc, #300]	; (80018e0 <main+0x708>)
 80017b2:	78db      	ldrb	r3, [r3, #3]
 80017b4:	2b46      	cmp	r3, #70	; 0x46
 80017b6:	d103      	bne.n	80017c0 <main+0x5e8>
	  				  targetedState = STATE1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 80017be:	e016      	b.n	80017ee <main+0x616>

	  			}
	  			  else if(rxBuffer[2] == 'M' && rxBuffer[3] == 'M'){
 80017c0:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <main+0x708>)
 80017c2:	789b      	ldrb	r3, [r3, #2]
 80017c4:	2b4d      	cmp	r3, #77	; 0x4d
 80017c6:	d107      	bne.n	80017d8 <main+0x600>
 80017c8:	4b45      	ldr	r3, [pc, #276]	; (80018e0 <main+0x708>)
 80017ca:	78db      	ldrb	r3, [r3, #3]
 80017cc:	2b4d      	cmp	r3, #77	; 0x4d
 80017ce:	d103      	bne.n	80017d8 <main+0x600>
	  				targetedState = STATE2;
 80017d0:	2301      	movs	r3, #1
 80017d2:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 80017d6:	e00a      	b.n	80017ee <main+0x616>

	  			}
	  			else if(rxBuffer[2] == 'M' && rxBuffer[3] == 'E'){
 80017d8:	4b41      	ldr	r3, [pc, #260]	; (80018e0 <main+0x708>)
 80017da:	789b      	ldrb	r3, [r3, #2]
 80017dc:	2b4d      	cmp	r3, #77	; 0x4d
 80017de:	d106      	bne.n	80017ee <main+0x616>
 80017e0:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <main+0x708>)
 80017e2:	78db      	ldrb	r3, [r3, #3]
 80017e4:	2b45      	cmp	r3, #69	; 0x45
 80017e6:	d102      	bne.n	80017ee <main+0x616>
	  				targetedState = STATE3;
 80017e8:	2302      	movs	r3, #2
 80017ea:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

	  			}


	  			  //if there was a valid state entered
	  			if(targetedState != STATE_MAX)
 80017ee:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d059      	beq.n	80018aa <main+0x6d2>
	  			{
	  				if(rxMessageLength == 19)
 80017f6:	4b39      	ldr	r3, [pc, #228]	; (80018dc <main+0x704>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b13      	cmp	r3, #19
 80017fc:	d13e      	bne.n	800187c <main+0x6a4>
	  				{


	  					if(targetedState != currentState)
 80017fe:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8001802:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001806:	429a      	cmp	r2, r3
 8001808:	d018      	beq.n	800183c <main+0x664>
	  					{
	  						stateCallback[currentState].handleOnExitEvt();
 800180a:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800180e:	4930      	ldr	r1, [pc, #192]	; (80018d0 <main+0x6f8>)
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	440b      	add	r3, r1
 800181a:	3304      	adds	r3, #4
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4798      	blx	r3
	  						currentState = targetedState;
 8001820:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8001824:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	  						stateCallback[currentState].handleOnEnterEvt();
 8001828:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800182c:	4928      	ldr	r1, [pc, #160]	; (80018d0 <main+0x6f8>)
 800182e:	4613      	mov	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	1a9b      	subs	r3, r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4798      	blx	r3
	  					}

						stateCallback[targetedState].handleSetConfig(rxBuffer);
 800183c:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8001840:	4923      	ldr	r1, [pc, #140]	; (80018d0 <main+0x6f8>)
 8001842:	4613      	mov	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	1a9b      	subs	r3, r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	440b      	add	r3, r1
 800184c:	3310      	adds	r3, #16
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4823      	ldr	r0, [pc, #140]	; (80018e0 <main+0x708>)
 8001852:	4798      	blx	r3
	  					stateCallback[currentState].handleGetConfig(txBuffer);
 8001854:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8001858:	491d      	ldr	r1, [pc, #116]	; (80018d0 <main+0x6f8>)
 800185a:	4613      	mov	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	1a9b      	subs	r3, r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	440b      	add	r3, r1
 8001864:	3314      	adds	r3, #20
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	481e      	ldr	r0, [pc, #120]	; (80018e4 <main+0x70c>)
 800186a:	4798      	blx	r3
	  					HAL_UART_Transmit(&huart2, txBuffer, 19, 500);
 800186c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001870:	2213      	movs	r2, #19
 8001872:	491c      	ldr	r1, [pc, #112]	; (80018e4 <main+0x70c>)
 8001874:	481c      	ldr	r0, [pc, #112]	; (80018e8 <main+0x710>)
 8001876:	f007 fed7 	bl	8009628 <HAL_UART_Transmit>
 800187a:	e016      	b.n	80018aa <main+0x6d2>
	  				}
	  				else if(rxMessageLength == 7)
 800187c:	4b17      	ldr	r3, [pc, #92]	; (80018dc <main+0x704>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b07      	cmp	r3, #7
 8001882:	d112      	bne.n	80018aa <main+0x6d2>
	  				{
	  					stateCallback[targetedState].handleGetConfig(txBuffer);
 8001884:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8001888:	4911      	ldr	r1, [pc, #68]	; (80018d0 <main+0x6f8>)
 800188a:	4613      	mov	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	1a9b      	subs	r3, r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	440b      	add	r3, r1
 8001894:	3314      	adds	r3, #20
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4812      	ldr	r0, [pc, #72]	; (80018e4 <main+0x70c>)
 800189a:	4798      	blx	r3
	  					HAL_UART_Transmit(&huart2, txBuffer, 19, 500);
 800189c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018a0:	2213      	movs	r2, #19
 80018a2:	4910      	ldr	r1, [pc, #64]	; (80018e4 <main+0x70c>)
 80018a4:	4810      	ldr	r0, [pc, #64]	; (80018e8 <main+0x710>)
 80018a6:	f007 febf 	bl	8009628 <HAL_UART_Transmit>

	  			}

	  		  }

	  		recievedUartMessage = 0;
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <main+0x700>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
	  		rxMessageLength = 0;
 80018b0:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <main+0x704>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
	  	  }

	  	  stateCallback[currentState].handleHousekeep();
 80018b6:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80018ba:	4905      	ldr	r1, [pc, #20]	; (80018d0 <main+0x6f8>)
 80018bc:	4613      	mov	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	1a9b      	subs	r3, r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	440b      	add	r3, r1
 80018c6:	331c      	adds	r3, #28
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4798      	blx	r3
  {
 80018cc:	e57d      	b.n	80013ca <main+0x1f2>
 80018ce:	bf00      	nop
 80018d0:	20000004 	.word	0x20000004
 80018d4:	200051c4 	.word	0x200051c4
 80018d8:	20005213 	.word	0x20005213
 80018dc:	20005214 	.word	0x20005214
 80018e0:	200051f4 	.word	0x200051f4
 80018e4:	20005218 	.word	0x20005218
 80018e8:	2000513c 	.word	0x2000513c

080018ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b0a6      	sub	sp, #152	; 0x98
 80018f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018f6:	2228      	movs	r2, #40	; 0x28
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f009 f92e 	bl	800ab5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001900:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	2258      	movs	r2, #88	; 0x58
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f009 f920 	bl	800ab5c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800191c:	2302      	movs	r3, #2
 800191e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001920:	2301      	movs	r3, #1
 8001922:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001924:	2310      	movs	r3, #16
 8001926:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800192a:	2302      	movs	r3, #2
 800192c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001934:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001938:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800193c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001940:	2300      	movs	r3, #0
 8001942:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001946:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800194a:	4618      	mov	r0, r3
 800194c:	f004 ffcc 	bl	80068e8 <HAL_RCC_OscConfig>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001956:	f000 fd63 	bl	8002420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800195a:	230f      	movs	r3, #15
 800195c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800195e:	2302      	movs	r3, #2
 8001960:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001962:	2300      	movs	r3, #0
 8001964:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800196a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001970:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001974:	2102      	movs	r1, #2
 8001976:	4618      	mov	r0, r3
 8001978:	f006 f80a 	bl	8007990 <HAL_RCC_ClockConfig>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001982:	f000 fd4d 	bl	8002420 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <SystemClock_Config+0xdc>)
 8001988:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800198e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001994:	2300      	movs	r3, #0
 8001996:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001998:	2300      	movs	r3, #0
 800199a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 800199c:	2300      	movs	r3, #0
 800199e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	4618      	mov	r0, r3
 80019b0:	f006 fa24 	bl	8007dfc <HAL_RCCEx_PeriphCLKConfig>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80019ba:	f000 fd31 	bl	8002420 <Error_Handler>
  }
}
 80019be:	bf00      	nop
 80019c0:	3798      	adds	r7, #152	; 0x98
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	00f010a2 	.word	0x00f010a2

080019cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
 80019ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019ee:	4b2e      	ldr	r3, [pc, #184]	; (8001aa8 <MX_ADC1_Init+0xdc>)
 80019f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80019f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80019f6:	4b2c      	ldr	r3, [pc, #176]	; (8001aa8 <MX_ADC1_Init+0xdc>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019fc:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <MX_ADC1_Init+0xdc>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a02:	4b29      	ldr	r3, [pc, #164]	; (8001aa8 <MX_ADC1_Init+0xdc>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a08:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <MX_ADC1_Init+0xdc>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a0e:	4b26      	ldr	r3, [pc, #152]	; (8001aa8 <MX_ADC1_Init+0xdc>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a16:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <MX_ADC1_Init+0xdc>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a1c:	4b22      	ldr	r3, [pc, #136]	; (8001aa8 <MX_ADC1_Init+0xdc>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a22:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <MX_ADC1_Init+0xdc>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a28:	4b1f      	ldr	r3, [pc, #124]	; (8001aa8 <MX_ADC1_Init+0xdc>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <MX_ADC1_Init+0xdc>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a36:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <MX_ADC1_Init+0xdc>)
 8001a38:	2204      	movs	r2, #4
 8001a3a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a3c:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <MX_ADC1_Init+0xdc>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001a42:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <MX_ADC1_Init+0xdc>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a48:	4817      	ldr	r0, [pc, #92]	; (8001aa8 <MX_ADC1_Init+0xdc>)
 8001a4a:	f002 fbcb 	bl	80041e4 <HAL_ADC_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001a54:	f000 fce4 	bl	8002420 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a5c:	f107 031c 	add.w	r3, r7, #28
 8001a60:	4619      	mov	r1, r3
 8001a62:	4811      	ldr	r0, [pc, #68]	; (8001aa8 <MX_ADC1_Init+0xdc>)
 8001a64:	f003 fb3c 	bl	80050e0 <HAL_ADCEx_MultiModeConfigChannel>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001a6e:	f000 fcd7 	bl	8002420 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a72:	2301      	movs	r3, #1
 8001a74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a76:	2301      	movs	r3, #1
 8001a78:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4806      	ldr	r0, [pc, #24]	; (8001aa8 <MX_ADC1_Init+0xdc>)
 8001a90:	f003 f83a 	bl	8004b08 <HAL_ADC_ConfigChannel>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001a9a:	f000 fcc1 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	3728      	adds	r7, #40	; 0x28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20004f08 	.word	0x20004f08

08001aac <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001abc:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <MX_DAC1_Init+0x4c>)
 8001abe:	4a0f      	ldr	r2, [pc, #60]	; (8001afc <MX_DAC1_Init+0x50>)
 8001ac0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001ac2:	480d      	ldr	r0, [pc, #52]	; (8001af8 <MX_DAC1_Init+0x4c>)
 8001ac4:	f003 fdd9 	bl	800567a <HAL_DAC_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8001ace:	f000 fca7 	bl	8002420 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	2200      	movs	r2, #0
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_DAC1_Init+0x4c>)
 8001ae2:	f003 fe5c 	bl	800579e <HAL_DAC_ConfigChannel>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8001aec:	f000 fc98 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20004f58 	.word	0x20004f58
 8001afc:	40007400 	.word	0x40007400

08001b00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <MX_I2C1_Init+0x74>)
 8001b06:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <MX_I2C1_Init+0x78>)
 8001b08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x200009FE;
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <MX_I2C1_Init+0x74>)
 8001b0c:	4a1b      	ldr	r2, [pc, #108]	; (8001b7c <MX_I2C1_Init+0x7c>)
 8001b0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <MX_I2C1_Init+0x74>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <MX_I2C1_Init+0x74>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <MX_I2C1_Init+0x74>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <MX_I2C1_Init+0x74>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <MX_I2C1_Init+0x74>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <MX_I2C1_Init+0x74>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <MX_I2C1_Init+0x74>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b3a:	480e      	ldr	r0, [pc, #56]	; (8001b74 <MX_I2C1_Init+0x74>)
 8001b3c:	f004 f8c6 	bl	8005ccc <HAL_I2C_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b46:	f000 fc6b 	bl	8002420 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4809      	ldr	r0, [pc, #36]	; (8001b74 <MX_I2C1_Init+0x74>)
 8001b4e:	f004 fe33 	bl	80067b8 <HAL_I2CEx_ConfigAnalogFilter>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b58:	f000 fc62 	bl	8002420 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4805      	ldr	r0, [pc, #20]	; (8001b74 <MX_I2C1_Init+0x74>)
 8001b60:	f004 fe75 	bl	800684e <HAL_I2CEx_ConfigDigitalFilter>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b6a:	f000 fc59 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20004f6c 	.word	0x20004f6c
 8001b78:	40005400 	.word	0x40005400
 8001b7c:	200009fe 	.word	0x200009fe

08001b80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b096      	sub	sp, #88	; 0x58
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]
 8001ba0:	611a      	str	r2, [r3, #16]
 8001ba2:	615a      	str	r2, [r3, #20]
 8001ba4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	222c      	movs	r2, #44	; 0x2c
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f008 ffd5 	bl	800ab5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bb2:	4b39      	ldr	r3, [pc, #228]	; (8001c98 <MX_TIM1_Init+0x118>)
 8001bb4:	4a39      	ldr	r2, [pc, #228]	; (8001c9c <MX_TIM1_Init+0x11c>)
 8001bb6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001bb8:	4b37      	ldr	r3, [pc, #220]	; (8001c98 <MX_TIM1_Init+0x118>)
 8001bba:	2247      	movs	r2, #71	; 0x47
 8001bbc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbe:	4b36      	ldr	r3, [pc, #216]	; (8001c98 <MX_TIM1_Init+0x118>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8001bc4:	4b34      	ldr	r3, [pc, #208]	; (8001c98 <MX_TIM1_Init+0x118>)
 8001bc6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001bca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bcc:	4b32      	ldr	r3, [pc, #200]	; (8001c98 <MX_TIM1_Init+0x118>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bd2:	4b31      	ldr	r3, [pc, #196]	; (8001c98 <MX_TIM1_Init+0x118>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd8:	4b2f      	ldr	r3, [pc, #188]	; (8001c98 <MX_TIM1_Init+0x118>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bde:	482e      	ldr	r0, [pc, #184]	; (8001c98 <MX_TIM1_Init+0x118>)
 8001be0:	f006 fb81 	bl	80082e6 <HAL_TIM_PWM_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001bea:	f000 fc19 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bfa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4825      	ldr	r0, [pc, #148]	; (8001c98 <MX_TIM1_Init+0x118>)
 8001c02:	f007 fbb1 	bl	8009368 <HAL_TIMEx_MasterConfigSynchronization>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001c0c:	f000 fc08 	bl	8002420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c10:	2360      	movs	r3, #96	; 0x60
 8001c12:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c24:	2300      	movs	r3, #0
 8001c26:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c30:	2200      	movs	r2, #0
 8001c32:	4619      	mov	r1, r3
 8001c34:	4818      	ldr	r0, [pc, #96]	; (8001c98 <MX_TIM1_Init+0x118>)
 8001c36:	f006 fd55 	bl	80086e4 <HAL_TIM_PWM_ConfigChannel>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001c40:	f000 fbee 	bl	8002420 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	4619      	mov	r1, r3
 8001c78:	4807      	ldr	r0, [pc, #28]	; (8001c98 <MX_TIM1_Init+0x118>)
 8001c7a:	f007 fc01 	bl	8009480 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001c84:	f000 fbcc 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c88:	4803      	ldr	r0, [pc, #12]	; (8001c98 <MX_TIM1_Init+0x118>)
 8001c8a:	f002 f871 	bl	8003d70 <HAL_TIM_MspPostInit>

}
 8001c8e:	bf00      	nop
 8001c90:	3758      	adds	r7, #88	; 0x58
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20004fc0 	.word	0x20004fc0
 8001c9c:	40012c00 	.word	0x40012c00

08001ca0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08e      	sub	sp, #56	; 0x38
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb4:	f107 031c 	add.w	r3, r7, #28
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cc0:	463b      	mov	r3, r7
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
 8001ccc:	611a      	str	r2, [r3, #16]
 8001cce:	615a      	str	r2, [r3, #20]
 8001cd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cd2:	4b38      	ldr	r3, [pc, #224]	; (8001db4 <MX_TIM2_Init+0x114>)
 8001cd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cd8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001cda:	4b36      	ldr	r3, [pc, #216]	; (8001db4 <MX_TIM2_Init+0x114>)
 8001cdc:	2247      	movs	r2, #71	; 0x47
 8001cde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce0:	4b34      	ldr	r3, [pc, #208]	; (8001db4 <MX_TIM2_Init+0x114>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8001ce6:	4b33      	ldr	r3, [pc, #204]	; (8001db4 <MX_TIM2_Init+0x114>)
 8001ce8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001cec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cee:	4b31      	ldr	r3, [pc, #196]	; (8001db4 <MX_TIM2_Init+0x114>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf4:	4b2f      	ldr	r3, [pc, #188]	; (8001db4 <MX_TIM2_Init+0x114>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cfa:	482e      	ldr	r0, [pc, #184]	; (8001db4 <MX_TIM2_Init+0x114>)
 8001cfc:	f006 fa9c 	bl	8008238 <HAL_TIM_Base_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001d06:	f000 fb8b 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d14:	4619      	mov	r1, r3
 8001d16:	4827      	ldr	r0, [pc, #156]	; (8001db4 <MX_TIM2_Init+0x114>)
 8001d18:	f006 fdf8 	bl	800890c <HAL_TIM_ConfigClockSource>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001d22:	f000 fb7d 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d26:	4823      	ldr	r0, [pc, #140]	; (8001db4 <MX_TIM2_Init+0x114>)
 8001d28:	f006 fadd 	bl	80082e6 <HAL_TIM_PWM_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001d32:	f000 fb75 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d3e:	f107 031c 	add.w	r3, r7, #28
 8001d42:	4619      	mov	r1, r3
 8001d44:	481b      	ldr	r0, [pc, #108]	; (8001db4 <MX_TIM2_Init+0x114>)
 8001d46:	f007 fb0f 	bl	8009368 <HAL_TIMEx_MasterConfigSynchronization>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001d50:	f000 fb66 	bl	8002420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d54:	2360      	movs	r3, #96	; 0x60
 8001d56:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d64:	463b      	mov	r3, r7
 8001d66:	2204      	movs	r2, #4
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4812      	ldr	r0, [pc, #72]	; (8001db4 <MX_TIM2_Init+0x114>)
 8001d6c:	f006 fcba 	bl	80086e4 <HAL_TIM_PWM_ConfigChannel>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001d76:	f000 fb53 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	2208      	movs	r2, #8
 8001d7e:	4619      	mov	r1, r3
 8001d80:	480c      	ldr	r0, [pc, #48]	; (8001db4 <MX_TIM2_Init+0x114>)
 8001d82:	f006 fcaf 	bl	80086e4 <HAL_TIM_PWM_ConfigChannel>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001d8c:	f000 fb48 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d90:	463b      	mov	r3, r7
 8001d92:	220c      	movs	r2, #12
 8001d94:	4619      	mov	r1, r3
 8001d96:	4807      	ldr	r0, [pc, #28]	; (8001db4 <MX_TIM2_Init+0x114>)
 8001d98:	f006 fca4 	bl	80086e4 <HAL_TIM_PWM_ConfigChannel>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8001da2:	f000 fb3d 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001da6:	4803      	ldr	r0, [pc, #12]	; (8001db4 <MX_TIM2_Init+0x114>)
 8001da8:	f001 ffe2 	bl	8003d70 <HAL_TIM_MspPostInit>

}
 8001dac:	bf00      	nop
 8001dae:	3738      	adds	r7, #56	; 0x38
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	2000500c 	.word	0x2000500c

08001db8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dbe:	f107 0310 	add.w	r3, r7, #16
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <MX_TIM4_Init+0x94>)
 8001dd8:	4a1d      	ldr	r2, [pc, #116]	; (8001e50 <MX_TIM4_Init+0x98>)
 8001dda:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <MX_TIM4_Init+0x94>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de2:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <MX_TIM4_Init+0x94>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <MX_TIM4_Init+0x94>)
 8001dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df0:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <MX_TIM4_Init+0x94>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <MX_TIM4_Init+0x94>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001dfc:	4813      	ldr	r0, [pc, #76]	; (8001e4c <MX_TIM4_Init+0x94>)
 8001dfe:	f006 fa1b 	bl	8008238 <HAL_TIM_Base_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001e08:	f000 fb0a 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e12:	f107 0310 	add.w	r3, r7, #16
 8001e16:	4619      	mov	r1, r3
 8001e18:	480c      	ldr	r0, [pc, #48]	; (8001e4c <MX_TIM4_Init+0x94>)
 8001e1a:	f006 fd77 	bl	800890c <HAL_TIM_ConfigClockSource>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001e24:	f000 fafc 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	4619      	mov	r1, r3
 8001e34:	4805      	ldr	r0, [pc, #20]	; (8001e4c <MX_TIM4_Init+0x94>)
 8001e36:	f007 fa97 	bl	8009368 <HAL_TIMEx_MasterConfigSynchronization>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001e40:	f000 faee 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e44:	bf00      	nop
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20005058 	.word	0x20005058
 8001e50:	40000800 	.word	0x40000800

08001e54 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b09a      	sub	sp, #104	; 0x68
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e68:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
 8001e84:	615a      	str	r2, [r3, #20]
 8001e86:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	222c      	movs	r2, #44	; 0x2c
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f008 fe64 	bl	800ab5c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001e94:	4b3f      	ldr	r3, [pc, #252]	; (8001f94 <MX_TIM15_Init+0x140>)
 8001e96:	4a40      	ldr	r2, [pc, #256]	; (8001f98 <MX_TIM15_Init+0x144>)
 8001e98:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 71;
 8001e9a:	4b3e      	ldr	r3, [pc, #248]	; (8001f94 <MX_TIM15_Init+0x140>)
 8001e9c:	2247      	movs	r2, #71	; 0x47
 8001e9e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea0:	4b3c      	ldr	r3, [pc, #240]	; (8001f94 <MX_TIM15_Init+0x140>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1999;
 8001ea6:	4b3b      	ldr	r3, [pc, #236]	; (8001f94 <MX_TIM15_Init+0x140>)
 8001ea8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001eac:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eae:	4b39      	ldr	r3, [pc, #228]	; (8001f94 <MX_TIM15_Init+0x140>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001eb4:	4b37      	ldr	r3, [pc, #220]	; (8001f94 <MX_TIM15_Init+0x140>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eba:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <MX_TIM15_Init+0x140>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001ec0:	4834      	ldr	r0, [pc, #208]	; (8001f94 <MX_TIM15_Init+0x140>)
 8001ec2:	f006 f9b9 	bl	8008238 <HAL_TIM_Base_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001ecc:	f000 faa8 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001ed6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001eda:	4619      	mov	r1, r3
 8001edc:	482d      	ldr	r0, [pc, #180]	; (8001f94 <MX_TIM15_Init+0x140>)
 8001ede:	f006 fd15 	bl	800890c <HAL_TIM_ConfigClockSource>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001ee8:	f000 fa9a 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001eec:	4829      	ldr	r0, [pc, #164]	; (8001f94 <MX_TIM15_Init+0x140>)
 8001eee:	f006 f9fa 	bl	80082e6 <HAL_TIM_PWM_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001ef8:	f000 fa92 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001efc:	2300      	movs	r3, #0
 8001efe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001f04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4822      	ldr	r0, [pc, #136]	; (8001f94 <MX_TIM15_Init+0x140>)
 8001f0c:	f007 fa2c 	bl	8009368 <HAL_TIMEx_MasterConfigSynchronization>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001f16:	f000 fa83 	bl	8002420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f1a:	2360      	movs	r3, #96	; 0x60
 8001f1c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f22:	2300      	movs	r3, #0
 8001f24:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f26:	2300      	movs	r3, #0
 8001f28:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4815      	ldr	r0, [pc, #84]	; (8001f94 <MX_TIM15_Init+0x140>)
 8001f40:	f006 fbd0 	bl	80086e4 <HAL_TIM_PWM_ConfigChannel>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8001f4a:	f000 fa69 	bl	8002420 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f66:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	4619      	mov	r1, r3
 8001f74:	4807      	ldr	r0, [pc, #28]	; (8001f94 <MX_TIM15_Init+0x140>)
 8001f76:	f007 fa83 	bl	8009480 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 8001f80:	f000 fa4e 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001f84:	4803      	ldr	r0, [pc, #12]	; (8001f94 <MX_TIM15_Init+0x140>)
 8001f86:	f001 fef3 	bl	8003d70 <HAL_TIM_MspPostInit>

}
 8001f8a:	bf00      	nop
 8001f8c:	3768      	adds	r7, #104	; 0x68
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200050a4 	.word	0x200050a4
 8001f98:	40014000 	.word	0x40014000

08001f9c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b092      	sub	sp, #72	; 0x48
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
 8001fb0:	611a      	str	r2, [r3, #16]
 8001fb2:	615a      	str	r2, [r3, #20]
 8001fb4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fb6:	463b      	mov	r3, r7
 8001fb8:	222c      	movs	r2, #44	; 0x2c
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f008 fdcd 	bl	800ab5c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001fc2:	4b31      	ldr	r3, [pc, #196]	; (8002088 <MX_TIM16_Init+0xec>)
 8001fc4:	4a31      	ldr	r2, [pc, #196]	; (800208c <MX_TIM16_Init+0xf0>)
 8001fc6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 71;
 8001fc8:	4b2f      	ldr	r3, [pc, #188]	; (8002088 <MX_TIM16_Init+0xec>)
 8001fca:	2247      	movs	r2, #71	; 0x47
 8001fcc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fce:	4b2e      	ldr	r3, [pc, #184]	; (8002088 <MX_TIM16_Init+0xec>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1999;
 8001fd4:	4b2c      	ldr	r3, [pc, #176]	; (8002088 <MX_TIM16_Init+0xec>)
 8001fd6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001fda:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fdc:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <MX_TIM16_Init+0xec>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001fe2:	4b29      	ldr	r3, [pc, #164]	; (8002088 <MX_TIM16_Init+0xec>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe8:	4b27      	ldr	r3, [pc, #156]	; (8002088 <MX_TIM16_Init+0xec>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001fee:	4826      	ldr	r0, [pc, #152]	; (8002088 <MX_TIM16_Init+0xec>)
 8001ff0:	f006 f922 	bl	8008238 <HAL_TIM_Base_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001ffa:	f000 fa11 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001ffe:	4822      	ldr	r0, [pc, #136]	; (8002088 <MX_TIM16_Init+0xec>)
 8002000:	f006 f971 	bl	80082e6 <HAL_TIM_PWM_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800200a:	f000 fa09 	bl	8002420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800200e:	2360      	movs	r3, #96	; 0x60
 8002010:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002016:	2300      	movs	r3, #0
 8002018:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800201a:	2300      	movs	r3, #0
 800201c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002022:	2300      	movs	r3, #0
 8002024:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800202a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800202e:	2200      	movs	r2, #0
 8002030:	4619      	mov	r1, r3
 8002032:	4815      	ldr	r0, [pc, #84]	; (8002088 <MX_TIM16_Init+0xec>)
 8002034:	f006 fb56 	bl	80086e4 <HAL_TIM_PWM_ConfigChannel>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800203e:	f000 f9ef 	bl	8002420 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800205a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002060:	2300      	movs	r3, #0
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002064:	463b      	mov	r3, r7
 8002066:	4619      	mov	r1, r3
 8002068:	4807      	ldr	r0, [pc, #28]	; (8002088 <MX_TIM16_Init+0xec>)
 800206a:	f007 fa09 	bl	8009480 <HAL_TIMEx_ConfigBreakDeadTime>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8002074:	f000 f9d4 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002078:	4803      	ldr	r0, [pc, #12]	; (8002088 <MX_TIM16_Init+0xec>)
 800207a:	f001 fe79 	bl	8003d70 <HAL_TIM_MspPostInit>

}
 800207e:	bf00      	nop
 8002080:	3748      	adds	r7, #72	; 0x48
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200050f0 	.word	0x200050f0
 800208c:	40014400 	.word	0x40014400

08002090 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002094:	4b15      	ldr	r3, [pc, #84]	; (80020ec <MX_USART2_UART_Init+0x5c>)
 8002096:	4a16      	ldr	r2, [pc, #88]	; (80020f0 <MX_USART2_UART_Init+0x60>)
 8002098:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800209a:	4b14      	ldr	r3, [pc, #80]	; (80020ec <MX_USART2_UART_Init+0x5c>)
 800209c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80020a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80020a2:	4b12      	ldr	r3, [pc, #72]	; (80020ec <MX_USART2_UART_Init+0x5c>)
 80020a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020a8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <MX_USART2_UART_Init+0x5c>)
 80020ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <MX_USART2_UART_Init+0x5c>)
 80020b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020b8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020ba:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <MX_USART2_UART_Init+0x5c>)
 80020bc:	220c      	movs	r2, #12
 80020be:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020c0:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <MX_USART2_UART_Init+0x5c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <MX_USART2_UART_Init+0x5c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <MX_USART2_UART_Init+0x5c>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <MX_USART2_UART_Init+0x5c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020d8:	4804      	ldr	r0, [pc, #16]	; (80020ec <MX_USART2_UART_Init+0x5c>)
 80020da:	f007 fa57 	bl	800958c <HAL_UART_Init>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80020e4:	f000 f99c 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	2000513c 	.word	0x2000513c
 80020f0:	40004400 	.word	0x40004400

080020f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08a      	sub	sp, #40	; 0x28
 80020f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fa:	f107 0314 	add.w	r3, r7, #20
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	60da      	str	r2, [r3, #12]
 8002108:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800210a:	4b59      	ldr	r3, [pc, #356]	; (8002270 <MX_GPIO_Init+0x17c>)
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	4a58      	ldr	r2, [pc, #352]	; (8002270 <MX_GPIO_Init+0x17c>)
 8002110:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002114:	6153      	str	r3, [r2, #20]
 8002116:	4b56      	ldr	r3, [pc, #344]	; (8002270 <MX_GPIO_Init+0x17c>)
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002122:	4b53      	ldr	r3, [pc, #332]	; (8002270 <MX_GPIO_Init+0x17c>)
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	4a52      	ldr	r2, [pc, #328]	; (8002270 <MX_GPIO_Init+0x17c>)
 8002128:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800212c:	6153      	str	r3, [r2, #20]
 800212e:	4b50      	ldr	r3, [pc, #320]	; (8002270 <MX_GPIO_Init+0x17c>)
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800213a:	4b4d      	ldr	r3, [pc, #308]	; (8002270 <MX_GPIO_Init+0x17c>)
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	4a4c      	ldr	r2, [pc, #304]	; (8002270 <MX_GPIO_Init+0x17c>)
 8002140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002144:	6153      	str	r3, [r2, #20]
 8002146:	4b4a      	ldr	r3, [pc, #296]	; (8002270 <MX_GPIO_Init+0x17c>)
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002152:	4b47      	ldr	r3, [pc, #284]	; (8002270 <MX_GPIO_Init+0x17c>)
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	4a46      	ldr	r2, [pc, #280]	; (8002270 <MX_GPIO_Init+0x17c>)
 8002158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800215c:	6153      	str	r3, [r2, #20]
 800215e:	4b44      	ldr	r3, [pc, #272]	; (8002270 <MX_GPIO_Init+0x17c>)
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_LED_2_Pin|RED_LED_1_Pin|RED_LED_3_Pin, GPIO_PIN_RESET);
 800216a:	2200      	movs	r2, #0
 800216c:	21e0      	movs	r1, #224	; 0xe0
 800216e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002172:	f003 fd7b 	bl	8005c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCLR_GPIO_Port, MCLR_Pin, GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	2140      	movs	r1, #64	; 0x40
 800217a:	483e      	ldr	r0, [pc, #248]	; (8002274 <MX_GPIO_Init+0x180>)
 800217c:	f003 fd76 	bl	8005c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002186:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800218a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	4619      	mov	r1, r3
 8002196:	4837      	ldr	r0, [pc, #220]	; (8002274 <MX_GPIO_Init+0x180>)
 8002198:	f003 fbc6 	bl	8005928 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_2_Pin RED_LED_1_Pin RED_LED_3_Pin */
  GPIO_InitStruct.Pin = RED_LED_2_Pin|RED_LED_1_Pin|RED_LED_3_Pin;
 800219c:	23e0      	movs	r3, #224	; 0xe0
 800219e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a0:	2301      	movs	r3, #1
 80021a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a8:	2300      	movs	r3, #0
 80021aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	4619      	mov	r1, r3
 80021b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b6:	f003 fbb7 	bl	8005928 <HAL_GPIO_Init>

  /*Configure GPIO pin : RDY_Pin */
  GPIO_InitStruct.Pin = RDY_Pin;
 80021ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021c0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RDY_GPIO_Port, &GPIO_InitStruct);
 80021ca:	f107 0314 	add.w	r3, r7, #20
 80021ce:	4619      	mov	r1, r3
 80021d0:	4829      	ldr	r0, [pc, #164]	; (8002278 <MX_GPIO_Init+0x184>)
 80021d2:	f003 fba9 	bl	8005928 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCLR_Pin */
  GPIO_InitStruct.Pin = MCLR_Pin;
 80021d6:	2340      	movs	r3, #64	; 0x40
 80021d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021da:	2301      	movs	r3, #1
 80021dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e2:	2300      	movs	r3, #0
 80021e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCLR_GPIO_Port, &GPIO_InitStruct);
 80021e6:	f107 0314 	add.w	r3, r7, #20
 80021ea:	4619      	mov	r1, r3
 80021ec:	4821      	ldr	r0, [pc, #132]	; (8002274 <MX_GPIO_Init+0x180>)
 80021ee:	f003 fb9b 	bl	8005928 <HAL_GPIO_Init>

  /*Configure GPIO pin : Right_Button_Pin */
  GPIO_InitStruct.Pin = Right_Button_Pin;
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80021f6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80021fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021fc:	2301      	movs	r3, #1
 80021fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Right_Button_GPIO_Port, &GPIO_InitStruct);
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	4619      	mov	r1, r3
 8002206:	481b      	ldr	r0, [pc, #108]	; (8002274 <MX_GPIO_Init+0x180>)
 8002208:	f003 fb8e 	bl	8005928 <HAL_GPIO_Init>

  /*Configure GPIO pin : Middle_Button_Pin */
  GPIO_InitStruct.Pin = Middle_Button_Pin;
 800220c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002212:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002218:	2301      	movs	r3, #1
 800221a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Middle_Button_GPIO_Port, &GPIO_InitStruct);
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	4619      	mov	r1, r3
 8002222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002226:	f003 fb7f 	bl	8005928 <HAL_GPIO_Init>

  /*Configure GPIO pin : Left_Button_Pin */
  GPIO_InitStruct.Pin = Left_Button_Pin;
 800222a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800222e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002230:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002236:	2301      	movs	r3, #1
 8002238:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Left_Button_GPIO_Port, &GPIO_InitStruct);
 800223a:	f107 0314 	add.w	r3, r7, #20
 800223e:	4619      	mov	r1, r3
 8002240:	480d      	ldr	r0, [pc, #52]	; (8002278 <MX_GPIO_Init+0x184>)
 8002242:	f003 fb71 	bl	8005928 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	2100      	movs	r1, #0
 800224a:	2017      	movs	r0, #23
 800224c:	f003 f9df 	bl	800560e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002250:	2017      	movs	r0, #23
 8002252:	f003 f9f8 	bl	8005646 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2100      	movs	r1, #0
 800225a:	2028      	movs	r0, #40	; 0x28
 800225c:	f003 f9d7 	bl	800560e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002260:	2028      	movs	r0, #40	; 0x28
 8002262:	f003 f9f0 	bl	8005646 <HAL_NVIC_EnableIRQ>

}
 8002266:	bf00      	nop
 8002268:	3728      	adds	r7, #40	; 0x28
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40021000 	.word	0x40021000
 8002274:	48000800 	.word	0x48000800
 8002278:	48000400 	.word	0x48000400

0800227c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	80fb      	strh	r3, [r7, #6]
	int i;

	for (i = 0; i < NUM_BTN; i++)
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	e021      	b.n	80022d0 <HAL_GPIO_EXTI_Callback+0x54>
	{
		if(btns[i].gpio == GPIO_Pin)
 800228c:	4a17      	ldr	r2, [pc, #92]	; (80022ec <HAL_GPIO_EXTI_Callback+0x70>)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	4413      	add	r3, r2
 8002294:	330a      	adds	r3, #10
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	88fa      	ldrh	r2, [r7, #6]
 800229a:	429a      	cmp	r2, r3
 800229c:	d115      	bne.n	80022ca <HAL_GPIO_EXTI_Callback+0x4e>
		{
			if(btns[i].button_state_change == 0)
 800229e:	4a13      	ldr	r2, [pc, #76]	; (80022ec <HAL_GPIO_EXTI_Callback+0x70>)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	4413      	add	r3, r2
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10e      	bne.n	80022ca <HAL_GPIO_EXTI_Callback+0x4e>
				{
					btns[i].press_tick = HAL_GetTick();
 80022ac:	f001 ff6a 	bl	8004184 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	490e      	ldr	r1, [pc, #56]	; (80022ec <HAL_GPIO_EXTI_Callback+0x70>)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	440b      	add	r3, r1
 80022ba:	3304      	adds	r3, #4
 80022bc:	601a      	str	r2, [r3, #0]
					btns[i].button_state_change = 1;
 80022be:	4a0b      	ldr	r2, [pc, #44]	; (80022ec <HAL_GPIO_EXTI_Callback+0x70>)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	4413      	add	r3, r2
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < NUM_BTN; i++)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	3301      	adds	r3, #1
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	ddda      	ble.n	800228c <HAL_GPIO_EXTI_Callback+0x10>
				}

		}
	}

	if(GPIO_Pin == GPIO_PIN_15){
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022dc:	d102      	bne.n	80022e4 <HAL_GPIO_EXTI_Callback+0x68>

			RDY = 1;
 80022de:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <HAL_GPIO_EXTI_Callback+0x74>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]

	}

}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	200051c4 	.word	0x200051c4
 80022f0:	200000ac 	.word	0x200000ac

080022f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  // if incorrect first byte

  if(rxIndex == 0 && rxBuffer[0] != '#')
 80022fc:	4b23      	ldr	r3, [pc, #140]	; (800238c <HAL_UART_RxCpltCallback+0x98>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d109      	bne.n	8002318 <HAL_UART_RxCpltCallback+0x24>
 8002304:	4b22      	ldr	r3, [pc, #136]	; (8002390 <HAL_UART_RxCpltCallback+0x9c>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b23      	cmp	r3, #35	; 0x23
 800230a:	d005      	beq.n	8002318 <HAL_UART_RxCpltCallback+0x24>
  {
	  HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 800230c:	2201      	movs	r2, #1
 800230e:	4920      	ldr	r1, [pc, #128]	; (8002390 <HAL_UART_RxCpltCallback+0x9c>)
 8002310:	4820      	ldr	r0, [pc, #128]	; (8002394 <HAL_UART_RxCpltCallback+0xa0>)
 8002312:	f007 fa13 	bl	800973c <HAL_UART_Receive_IT>
	  return;
 8002316:	e035      	b.n	8002384 <HAL_UART_RxCpltCallback+0x90>
  }

  // if end is reached

  if(rxBuffer[rxIndex] == '\n')
 8002318:	4b1c      	ldr	r3, [pc, #112]	; (800238c <HAL_UART_RxCpltCallback+0x98>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <HAL_UART_RxCpltCallback+0x9c>)
 8002320:	5c9b      	ldrb	r3, [r3, r2]
 8002322:	2b0a      	cmp	r3, #10
 8002324:	d115      	bne.n	8002352 <HAL_UART_RxCpltCallback+0x5e>
  {
	  HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 8002326:	2201      	movs	r2, #1
 8002328:	4919      	ldr	r1, [pc, #100]	; (8002390 <HAL_UART_RxCpltCallback+0x9c>)
 800232a:	481a      	ldr	r0, [pc, #104]	; (8002394 <HAL_UART_RxCpltCallback+0xa0>)
 800232c:	f007 fa06 	bl	800973c <HAL_UART_Receive_IT>

	  if(rxIndex>0)
 8002330:	4b16      	ldr	r3, [pc, #88]	; (800238c <HAL_UART_RxCpltCallback+0x98>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d024      	beq.n	8002382 <HAL_UART_RxCpltCallback+0x8e>
	  {
	  rxMessageLength = rxIndex + 1;
 8002338:	4b14      	ldr	r3, [pc, #80]	; (800238c <HAL_UART_RxCpltCallback+0x98>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	3301      	adds	r3, #1
 800233e:	b2da      	uxtb	r2, r3
 8002340:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_UART_RxCpltCallback+0xa4>)
 8002342:	701a      	strb	r2, [r3, #0]
	  rxIndex = 0;
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_UART_RxCpltCallback+0x98>)
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
	  recievedUartMessage = 1;
 800234a:	4b14      	ldr	r3, [pc, #80]	; (800239c <HAL_UART_RxCpltCallback+0xa8>)
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
	  }

	  return;
 8002350:	e017      	b.n	8002382 <HAL_UART_RxCpltCallback+0x8e>

  }
  // if reading middle bytes in
  rxIndex++;
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_UART_RxCpltCallback+0x98>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	3301      	adds	r3, #1
 8002358:	b2da      	uxtb	r2, r3
 800235a:	4b0c      	ldr	r3, [pc, #48]	; (800238c <HAL_UART_RxCpltCallback+0x98>)
 800235c:	701a      	strb	r2, [r3, #0]
  if(rxIndex >= RX_BUF_SIZE)
 800235e:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_UART_RxCpltCallback+0x98>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b1d      	cmp	r3, #29
 8002364:	d902      	bls.n	800236c <HAL_UART_RxCpltCallback+0x78>
  {
	rxIndex = 0;
 8002366:	4b09      	ldr	r3, [pc, #36]	; (800238c <HAL_UART_RxCpltCallback+0x98>)
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
  }

  HAL_UART_Receive_IT(&huart2, &rxBuffer[rxIndex], 1);
 800236c:	4b07      	ldr	r3, [pc, #28]	; (800238c <HAL_UART_RxCpltCallback+0x98>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	4b07      	ldr	r3, [pc, #28]	; (8002390 <HAL_UART_RxCpltCallback+0x9c>)
 8002374:	4413      	add	r3, r2
 8002376:	2201      	movs	r2, #1
 8002378:	4619      	mov	r1, r3
 800237a:	4806      	ldr	r0, [pc, #24]	; (8002394 <HAL_UART_RxCpltCallback+0xa0>)
 800237c:	f007 f9de 	bl	800973c <HAL_UART_Receive_IT>
 8002380:	e000      	b.n	8002384 <HAL_UART_RxCpltCallback+0x90>
	  return;
 8002382:	bf00      	nop

}
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20005212 	.word	0x20005212
 8002390:	200051f4 	.word	0x200051f4
 8002394:	2000513c 	.word	0x2000513c
 8002398:	20005214 	.word	0x20005214
 800239c:	20005213 	.word	0x20005213

080023a0 <initTrackpad>:


void initTrackpad(){
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0

	hwReset();
 80023a4:	f7fe fb12 	bl	80009cc <hwReset>
	//getProductNum();
	while(RDY == 0){
 80023a8:	bf00      	nop
 80023aa:	4b1c      	ldr	r3, [pc, #112]	; (800241c <initTrackpad+0x7c>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0fa      	beq.n	80023aa <initTrackpad+0xa>

	}
	//Reading of info flags
	 while(checkReset() == 0){
 80023b4:	e001      	b.n	80023ba <initTrackpad+0x1a>
		 //soft reset
		 swReset();
 80023b6:	f7fe fcb7 	bl	8000d28 <swReset>
	 while(checkReset() == 0){
 80023ba:	f7fe fca1 	bl	8000d00 <checkReset>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f8      	beq.n	80023b6 <initTrackpad+0x16>
	 }

	  acknowledgeReset();
 80023c4:	f7fe fcc8 	bl	8000d58 <acknowledgeReset>
	  HAL_Delay(100);
 80023c8:	2064      	movs	r0, #100	; 0x64
 80023ca:	f001 fee7 	bl	800419c <HAL_Delay>
	  getProductNum();
 80023ce:	f7fe fc77 	bl	8000cc0 <getProductNum>
	  HAL_Delay(100);
 80023d2:	2064      	movs	r0, #100	; 0x64
 80023d4:	f001 fee2 	bl	800419c <HAL_Delay>
	  getSoftwareMajorNum();
 80023d8:	f7fe fcd6 	bl	8000d88 <getSoftwareMajorNum>
	  HAL_Delay(100);
 80023dc:	2064      	movs	r0, #100	; 0x64
 80023de:	f001 fedd 	bl	800419c <HAL_Delay>
	  getSoftwareMinorNum();
 80023e2:	f7fe fcdf 	bl	8000da4 <getSoftwareMinorNum>
	  HAL_Delay(100);
 80023e6:	2064      	movs	r0, #100	; 0x64
 80023e8:	f001 fed8 	bl	800419c <HAL_Delay>
	  writeMM();
 80023ec:	f7fe fd48 	bl	8000e80 <writeMM>
	  HAL_Delay(100);
 80023f0:	2064      	movs	r0, #100	; 0x64
 80023f2:	f001 fed3 	bl	800419c <HAL_Delay>
	  enableTPEvent();
 80023f6:	f7fe fd2b 	bl	8000e50 <enableTPEvent>
	  HAL_Delay(100);
 80023fa:	2064      	movs	r0, #100	; 0x64
 80023fc:	f001 fece 	bl	800419c <HAL_Delay>
	  TP_ReATI();
 8002400:	f7fe fcde 	bl	8000dc0 <TP_ReATI>
	  HAL_Delay(100);
 8002404:	2064      	movs	r0, #100	; 0x64
 8002406:	f001 fec9 	bl	800419c <HAL_Delay>
	  enableGestureEvent();
 800240a:	f7fe fcf1 	bl	8000df0 <enableGestureEvent>
	  HAL_Delay(100);
 800240e:	2064      	movs	r0, #100	; 0x64
 8002410:	f001 fec4 	bl	800419c <HAL_Delay>
	  enableGestures();
 8002414:	f7fe fd04 	bl	8000e20 <enableGestures>
}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	200000ac 	.word	0x200000ac

08002420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <STATE3_SetIntensity>:
static STATE3_VARS state3_vars;

void updateMorseBinary(uint8_t *input);
void activateMorseMode(EMERGENCY_MODES myEmergencyMode);

void STATE3_SetIntensity(uint16_t newIntensity){
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	80fb      	strh	r3, [r7, #6]

		state3_vars.ledIntensity = newIntensity;
 800243a:	4a06      	ldr	r2, [pc, #24]	; (8002454 <STATE3_SetIntensity+0x24>)
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	8053      	strh	r3, [r2, #2]
		state3_vars.configuredIntensity = newIntensity;
 8002440:	4a04      	ldr	r2, [pc, #16]	; (8002454 <STATE3_SetIntensity+0x24>)
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	80d3      	strh	r3, [r2, #6]



	//STATE3_ApplySettings();
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	20005250 	.word	0x20005250

08002458 <STATE3_ApplySettings>:

void STATE3_ApplySettings(){
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0

	uint32_t val = ((state3_vars.ledIntensity)*INPUT_MAX)/512;
 800245e:	4b26      	ldr	r3, [pc, #152]	; (80024f8 <STATE3_ApplySettings+0xa0>)
 8002460:	885b      	ldrh	r3, [r3, #2]
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe f80a 	bl	800047c <__aeabi_i2d>
 8002468:	a321      	add	r3, pc, #132	; (adr r3, 80024f0 <STATE3_ApplySettings+0x98>)
 800246a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246e:	f7fe f86f 	bl	8000550 <__aeabi_dmul>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8002482:	f7fe f98f 	bl	80007a4 <__aeabi_ddiv>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	f7fe fa71 	bl	8000974 <__aeabi_d2uiz>
 8002492:	4603      	mov	r3, r0
 8002494:	607b      	str	r3, [r7, #4]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, val);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	2100      	movs	r1, #0
 800249c:	4817      	ldr	r0, [pc, #92]	; (80024fc <STATE3_ApplySettings+0xa4>)
 800249e:	f003 f90e 	bl	80056be <HAL_DAC_SetValue>
	TIM2->CCR3 = (state3_vars.ledIntensity*1999)/512;
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <STATE3_ApplySettings+0xa0>)
 80024a4:	885b      	ldrh	r3, [r3, #2]
 80024a6:	461a      	mov	r2, r3
 80024a8:	f240 73cf 	movw	r3, #1999	; 0x7cf
 80024ac:	fb02 f303 	mul.w	r3, r2, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	da01      	bge.n	80024b8 <STATE3_ApplySettings+0x60>
 80024b4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80024b8:	125b      	asrs	r3, r3, #9
 80024ba:	461a      	mov	r2, r3
 80024bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024c0:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR2 = (state3_vars.ledIntensity*1999)/512;
 80024c2:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <STATE3_ApplySettings+0xa0>)
 80024c4:	885b      	ldrh	r3, [r3, #2]
 80024c6:	461a      	mov	r2, r3
 80024c8:	f240 73cf 	movw	r3, #1999	; 0x7cf
 80024cc:	fb02 f303 	mul.w	r3, r2, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	da01      	bge.n	80024d8 <STATE3_ApplySettings+0x80>
 80024d4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80024d8:	125b      	asrs	r3, r3, #9
 80024da:	461a      	mov	r2, r3
 80024dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024e0:	639a      	str	r2, [r3, #56]	; 0x38

}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	f3af 8000 	nop.w
 80024f0:	00000000 	.word	0x00000000
 80024f4:	40affe00 	.word	0x40affe00
 80024f8:	20005250 	.word	0x20005250
 80024fc:	20004f58 	.word	0x20004f58

08002500 <STATE3_OnEnter>:

void STATE3_OnEnter(){
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0

	state3_vars.isActive = 1;
 8002504:	4b18      	ldr	r3, [pc, #96]	; (8002568 <STATE3_OnEnter+0x68>)
 8002506:	2201      	movs	r2, #1
 8002508:	701a      	strb	r2, [r3, #0]
	state3_vars.ledOnTime = 512;
 800250a:	4b17      	ldr	r3, [pc, #92]	; (8002568 <STATE3_OnEnter+0x68>)
 800250c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002510:	809a      	strh	r2, [r3, #4]
	state3_vars.configuredIntensity = 512;
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <STATE3_OnEnter+0x68>)
 8002514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002518:	80da      	strh	r2, [r3, #6]
	state3_vars.ledIntensity = 0;
 800251a:	4b13      	ldr	r3, [pc, #76]	; (8002568 <STATE3_OnEnter+0x68>)
 800251c:	2200      	movs	r2, #0
 800251e:	805a      	strh	r2, [r3, #2]
	state3_vars.ledStatus = 0;
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <STATE3_OnEnter+0x68>)
 8002522:	2200      	movs	r2, #0
 8002524:	741a      	strb	r2, [r3, #16]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002526:	2201      	movs	r2, #1
 8002528:	2120      	movs	r1, #32
 800252a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800252e:	f003 fb9d 	bl	8005c6c <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002532:	2108      	movs	r1, #8
 8002534:	480d      	ldr	r0, [pc, #52]	; (800256c <STATE3_OnEnter+0x6c>)
 8002536:	f005 ff2d 	bl	8008394 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800253a:	2104      	movs	r1, #4
 800253c:	480b      	ldr	r0, [pc, #44]	; (800256c <STATE3_OnEnter+0x6c>)
 800253e:	f005 ff29 	bl	8008394 <HAL_TIM_PWM_Start>
	state3_vars.emergencyMode = STROBE;
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <STATE3_OnEnter+0x68>)
 8002544:	2200      	movs	r2, #0
 8002546:	705a      	strb	r2, [r3, #1]
	state3_vars.morseCustomMessage[0] = 'S';
 8002548:	4b07      	ldr	r3, [pc, #28]	; (8002568 <STATE3_OnEnter+0x68>)
 800254a:	2253      	movs	r2, #83	; 0x53
 800254c:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
	state3_vars.morseCustomMessage[1] = 'O';
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <STATE3_OnEnter+0x68>)
 8002552:	224f      	movs	r2, #79	; 0x4f
 8002554:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
	state3_vars.morseCustomMessage[2] = 'S';
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <STATE3_OnEnter+0x68>)
 800255a:	2253      	movs	r2, #83	; 0x53
 800255c:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6

	STATE3_ApplySettings();
 8002560:	f7ff ff7a 	bl	8002458 <STATE3_ApplySettings>

}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20005250 	.word	0x20005250
 800256c:	2000500c 	.word	0x2000500c

08002570 <STATE3_OnEnterUart>:

void STATE3_OnEnterUart(){
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
//	state3_vars.emergencyMode = STROBE;
//
//
//	STATE3_ApplySettings();
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
	...

08002580 <STATE3_OnExit>:


void STATE3_OnExit(){
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0

	state3_vars.isActive = 0;
 8002584:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <STATE3_OnExit+0x3c>)
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]
	state3_vars.ledStatus = 0;
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <STATE3_OnExit+0x3c>)
 800258c:	2200      	movs	r2, #0
 800258e:	741a      	strb	r2, [r3, #16]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002590:	2200      	movs	r2, #0
 8002592:	2120      	movs	r1, #32
 8002594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002598:	f003 fb68 	bl	8005c6c <HAL_GPIO_WritePin>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 800259c:	2300      	movs	r3, #0
 800259e:	2200      	movs	r2, #0
 80025a0:	2100      	movs	r1, #0
 80025a2:	4807      	ldr	r0, [pc, #28]	; (80025c0 <STATE3_OnExit+0x40>)
 80025a4:	f003 f88b 	bl	80056be <HAL_DAC_SetValue>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80025a8:	2108      	movs	r1, #8
 80025aa:	4806      	ldr	r0, [pc, #24]	; (80025c4 <STATE3_OnExit+0x44>)
 80025ac:	f005 fffe 	bl	80085ac <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80025b0:	2104      	movs	r1, #4
 80025b2:	4804      	ldr	r0, [pc, #16]	; (80025c4 <STATE3_OnExit+0x44>)
 80025b4:	f005 fffa 	bl	80085ac <HAL_TIM_PWM_Stop>


}
 80025b8:	bf00      	nop
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20005250 	.word	0x20005250
 80025c0:	20004f58 	.word	0x20004f58
 80025c4:	2000500c 	.word	0x2000500c

080025c8 <STATE3_OnInit>:

void STATE3_OnInit(){
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
	state3_vars.isActive = 0;
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <STATE3_OnInit+0x4c>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	701a      	strb	r2, [r3, #0]
	state3_vars.emergencyMode = STROBE;
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <STATE3_OnInit+0x4c>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	705a      	strb	r2, [r3, #1]
	state3_vars.ledIntensity = 0;
 80025d8:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <STATE3_OnInit+0x4c>)
 80025da:	2200      	movs	r2, #0
 80025dc:	805a      	strh	r2, [r3, #2]
	state3_vars.configuredIntensity = 0;
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <STATE3_OnInit+0x4c>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	80da      	strh	r2, [r3, #6]
	state3_vars.ledOnTime = 512;
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <STATE3_OnInit+0x4c>)
 80025e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ea:	809a      	strh	r2, [r3, #4]
	state3_vars.morseMessage[0] = 'S';
 80025ec:	4b09      	ldr	r3, [pc, #36]	; (8002614 <STATE3_OnInit+0x4c>)
 80025ee:	2253      	movs	r2, #83	; 0x53
 80025f0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
	state3_vars.morseMessage[1] = 'O';
 80025f4:	4b07      	ldr	r3, [pc, #28]	; (8002614 <STATE3_OnInit+0x4c>)
 80025f6:	224f      	movs	r2, #79	; 0x4f
 80025f8:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
	state3_vars.morseMessage[2] = 'S';
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <STATE3_OnInit+0x4c>)
 80025fe:	2253      	movs	r2, #83	; 0x53
 8002600:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
	state3_vars.ledStatus = 1;
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <STATE3_OnInit+0x4c>)
 8002606:	2201      	movs	r2, #1
 8002608:	741a      	strb	r2, [r3, #16]

}
 800260a:	bf00      	nop
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	20005250 	.word	0x20005250

08002618 <STATE3_OnButtonEvt>:


void STATE3_OnButtonEvt(uint8_t button, uint8_t buttonState){
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	460a      	mov	r2, r1
 8002622:	71fb      	strb	r3, [r7, #7]
 8002624:	4613      	mov	r3, r2
 8002626:	71bb      	strb	r3, [r7, #6]

if(button == BTN_RIGHT && buttonState == BTN_STATE_PRESSED){
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d149      	bne.n	80026c2 <STATE3_OnButtonEvt+0xaa>
 800262e:	79bb      	ldrb	r3, [r7, #6]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d146      	bne.n	80026c2 <STATE3_OnButtonEvt+0xaa>

	if(state3_vars.emergencyMode == STROBE)
 8002634:	4b40      	ldr	r3, [pc, #256]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 8002636:	785b      	ldrb	r3, [r3, #1]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d11b      	bne.n	8002674 <STATE3_OnButtonEvt+0x5c>
	{

		state3_vars.ledIntensity = 0;
 800263c:	4b3e      	ldr	r3, [pc, #248]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 800263e:	2200      	movs	r2, #0
 8002640:	805a      	strh	r2, [r3, #2]
		state3_vars.ledStatus = 0;
 8002642:	4b3d      	ldr	r3, [pc, #244]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 8002644:	2200      	movs	r2, #0
 8002646:	741a      	strb	r2, [r3, #16]
		state3_vars.morseMessage[0] = 'S';
 8002648:	4b3b      	ldr	r3, [pc, #236]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 800264a:	2253      	movs	r2, #83	; 0x53
 800264c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
		state3_vars.morseMessage[1] = 'O';
 8002650:	4b39      	ldr	r3, [pc, #228]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 8002652:	224f      	movs	r2, #79	; 0x4f
 8002654:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
		state3_vars.morseMessage[2] = 'S';
 8002658:	4b37      	ldr	r3, [pc, #220]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 800265a:	2253      	movs	r2, #83	; 0x53
 800265c:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
		state3_vars.configuredIntensity = 512;
 8002660:	4b35      	ldr	r3, [pc, #212]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 8002662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002666:	80da      	strh	r2, [r3, #6]
		state3_vars.emergencyMode = SOS;
 8002668:	4b33      	ldr	r3, [pc, #204]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 800266a:	2201      	movs	r2, #1
 800266c:	705a      	strb	r2, [r3, #1]
		STATE3_ApplySettings();
 800266e:	f7ff fef3 	bl	8002458 <STATE3_ApplySettings>
 8002672:	e026      	b.n	80026c2 <STATE3_OnButtonEvt+0xaa>


	} else if(state3_vars.emergencyMode == SOS)
 8002674:	4b30      	ldr	r3, [pc, #192]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 8002676:	785b      	ldrb	r3, [r3, #1]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d10f      	bne.n	800269c <STATE3_OnButtonEvt+0x84>
	{

		state3_vars.ledIntensity = 0;
 800267c:	4b2e      	ldr	r3, [pc, #184]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 800267e:	2200      	movs	r2, #0
 8002680:	805a      	strh	r2, [r3, #2]
		state3_vars.ledStatus = 0;
 8002682:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 8002684:	2200      	movs	r2, #0
 8002686:	741a      	strb	r2, [r3, #16]
		state3_vars.configuredIntensity = 512;
 8002688:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 800268a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800268e:	80da      	strh	r2, [r3, #6]
		STATE3_ApplySettings();
 8002690:	f7ff fee2 	bl	8002458 <STATE3_ApplySettings>
		state3_vars.emergencyMode = CUSTOM;
 8002694:	4b28      	ldr	r3, [pc, #160]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 8002696:	2202      	movs	r2, #2
 8002698:	705a      	strb	r2, [r3, #1]
 800269a:	e012      	b.n	80026c2 <STATE3_OnButtonEvt+0xaa>

	} else if(state3_vars.emergencyMode == CUSTOM){
 800269c:	4b26      	ldr	r3, [pc, #152]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 800269e:	785b      	ldrb	r3, [r3, #1]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d10e      	bne.n	80026c2 <STATE3_OnButtonEvt+0xaa>

		state3_vars.ledIntensity = 0;
 80026a4:	4b24      	ldr	r3, [pc, #144]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	805a      	strh	r2, [r3, #2]
		state3_vars.ledStatus = 0;
 80026aa:	4b23      	ldr	r3, [pc, #140]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	741a      	strb	r2, [r3, #16]
		state3_vars.configuredIntensity = 512;
 80026b0:	4b21      	ldr	r3, [pc, #132]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 80026b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026b6:	80da      	strh	r2, [r3, #6]
		STATE3_ApplySettings();
 80026b8:	f7ff fece 	bl	8002458 <STATE3_ApplySettings>
		state3_vars.emergencyMode = STROBE;
 80026bc:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 80026be:	2200      	movs	r2, #0
 80026c0:	705a      	strb	r2, [r3, #1]


	}
}

if(button == BTN_MIDDLE && buttonState == BTN_STATE_PRESSED)
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d132      	bne.n	800272e <STATE3_OnButtonEvt+0x116>
 80026c8:	79bb      	ldrb	r3, [r7, #6]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d12f      	bne.n	800272e <STATE3_OnButtonEvt+0x116>
	{

		if(state3_vars.emergencyMode == STROBE){
 80026ce:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 80026d0:	785b      	ldrb	r3, [r3, #1]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d111      	bne.n	80026fa <STATE3_OnButtonEvt+0xe2>
			if(state3_vars.ledStatus == 1){
 80026d6:	4b18      	ldr	r3, [pc, #96]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 80026d8:	7c1b      	ldrb	r3, [r3, #16]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d108      	bne.n	80026f0 <STATE3_OnButtonEvt+0xd8>

						state3_vars.ledIntensity = 0;
 80026de:	4b16      	ldr	r3, [pc, #88]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	805a      	strh	r2, [r3, #2]
						state3_vars.ledStatus = 0;
 80026e4:	4b14      	ldr	r3, [pc, #80]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	741a      	strb	r2, [r3, #16]
						STATE3_ApplySettings();
 80026ea:	f7ff feb5 	bl	8002458 <STATE3_ApplySettings>
 80026ee:	e004      	b.n	80026fa <STATE3_OnButtonEvt+0xe2>
				} else {

					activateStrobeMode();
 80026f0:	f000 fbf0 	bl	8002ed4 <activateStrobeMode>
					state3_vars.ledStatus = 1;
 80026f4:	4b10      	ldr	r3, [pc, #64]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	741a      	strb	r2, [r3, #16]
				}


		}

		if(state3_vars.emergencyMode == SOS || state3_vars.emergencyMode == CUSTOM)
 80026fa:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 80026fc:	785b      	ldrb	r3, [r3, #1]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d003      	beq.n	800270a <STATE3_OnButtonEvt+0xf2>
 8002702:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 8002704:	785b      	ldrb	r3, [r3, #1]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d111      	bne.n	800272e <STATE3_OnButtonEvt+0x116>
		{
			//if the led is currently not flashing, activate morse code mode
			if(state3_vars.ledStatus == 0){
 800270a:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 800270c:	7c1b      	ldrb	r3, [r3, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d105      	bne.n	800271e <STATE3_OnButtonEvt+0x106>
				activateMorseMode(state3_vars.emergencyMode);
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 8002714:	785b      	ldrb	r3, [r3, #1]
 8002716:	4618      	mov	r0, r3
 8002718:	f000 fb8a 	bl	8002e30 <activateMorseMode>
		}


	}

}
 800271c:	e007      	b.n	800272e <STATE3_OnButtonEvt+0x116>
				state3_vars.ledStatus = 0;
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 8002720:	2200      	movs	r2, #0
 8002722:	741a      	strb	r2, [r3, #16]
				state3_vars.ledIntensity = 0;
 8002724:	4b04      	ldr	r3, [pc, #16]	; (8002738 <STATE3_OnButtonEvt+0x120>)
 8002726:	2200      	movs	r2, #0
 8002728:	805a      	strh	r2, [r3, #2]
				STATE3_ApplySettings();
 800272a:	f7ff fe95 	bl	8002458 <STATE3_ApplySettings>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20005250 	.word	0x20005250

0800273c <STATE3_SetConfig>:


void STATE3_SetConfig(uint8_t *status){
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
	if(status[1] != ':' ||  status[4] != ':' || status[8] != ':' ||	status[12] != ':' || status[16] != ':' || status[17] != '$' ||	status[18] != '\n'){
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3301      	adds	r3, #1
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b3a      	cmp	r3, #58	; 0x3a
 800274c:	f040 80db 	bne.w	8002906 <STATE3_SetConfig+0x1ca>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3304      	adds	r3, #4
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b3a      	cmp	r3, #58	; 0x3a
 8002758:	f040 80d5 	bne.w	8002906 <STATE3_SetConfig+0x1ca>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3308      	adds	r3, #8
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b3a      	cmp	r3, #58	; 0x3a
 8002764:	f040 80cf 	bne.w	8002906 <STATE3_SetConfig+0x1ca>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	330c      	adds	r3, #12
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b3a      	cmp	r3, #58	; 0x3a
 8002770:	f040 80c9 	bne.w	8002906 <STATE3_SetConfig+0x1ca>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3310      	adds	r3, #16
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b3a      	cmp	r3, #58	; 0x3a
 800277c:	f040 80c3 	bne.w	8002906 <STATE3_SetConfig+0x1ca>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3311      	adds	r3, #17
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b24      	cmp	r3, #36	; 0x24
 8002788:	f040 80bd 	bne.w	8002906 <STATE3_SetConfig+0x1ca>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3312      	adds	r3, #18
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b0a      	cmp	r3, #10
 8002794:	f040 80b7 	bne.w	8002906 <STATE3_SetConfig+0x1ca>

			return;
		}


		uint16_t ledIntensity = (status[5]-0x30)*100 + (status[6]-0x30)*10 + (status[7]-0x30);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3305      	adds	r3, #5
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	3b30      	subs	r3, #48	; 0x30
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	0092      	lsls	r2, r2, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	461a      	mov	r2, r3
 80027aa:	0091      	lsls	r1, r2, #2
 80027ac:	461a      	mov	r2, r3
 80027ae:	460b      	mov	r3, r1
 80027b0:	4413      	add	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3306      	adds	r3, #6
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	3b30      	subs	r3, #48	; 0x30
 80027be:	b29b      	uxth	r3, r3
 80027c0:	4619      	mov	r1, r3
 80027c2:	0089      	lsls	r1, r1, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3307      	adds	r3, #7
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3b30      	subs	r3, #48	; 0x30
 80027dc:	82bb      	strh	r3, [r7, #20]
		uint16_t ledOnTime = (status[9]-0x30)*100 + (status[10]-0x30)*10 + (status[11]-0x30);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3309      	adds	r3, #9
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	3b30      	subs	r3, #48	; 0x30
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	461a      	mov	r2, r3
 80027ea:	0092      	lsls	r2, r2, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	461a      	mov	r2, r3
 80027f0:	0091      	lsls	r1, r2, #2
 80027f2:	461a      	mov	r2, r3
 80027f4:	460b      	mov	r3, r1
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	330a      	adds	r3, #10
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	3b30      	subs	r3, #48	; 0x30
 8002804:	b29b      	uxth	r3, r3
 8002806:	4619      	mov	r1, r3
 8002808:	0089      	lsls	r1, r1, #2
 800280a:	440b      	add	r3, r1
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	b29b      	uxth	r3, r3
 8002810:	4413      	add	r3, r2
 8002812:	b29a      	uxth	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	330b      	adds	r3, #11
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b29b      	uxth	r3, r3
 800281c:	4413      	add	r3, r2
 800281e:	b29b      	uxth	r3, r3
 8002820:	3b30      	subs	r3, #48	; 0x30
 8002822:	827b      	strh	r3, [r7, #18]
		uint8_t morse1 = (status[13]);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	7b5b      	ldrb	r3, [r3, #13]
 8002828:	747b      	strb	r3, [r7, #17]
		uint8_t morse2 = (status[14]);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	7b9b      	ldrb	r3, [r3, #14]
 800282e:	743b      	strb	r3, [r7, #16]
		uint8_t morse3 = (status[15]);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	7bdb      	ldrb	r3, [r3, #15]
 8002834:	73fb      	strb	r3, [r7, #15]



		uint8_t customMode = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	75fb      	strb	r3, [r7, #23]
		//if for intensity range
		if(ledIntensity < 513 && ledIntensity >= 0 && ledOnTime < 513 && ledOnTime >= 0)
 800283a:	8abb      	ldrh	r3, [r7, #20]
 800283c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002840:	d863      	bhi.n	800290a <STATE3_SetConfig+0x1ce>
 8002842:	8a7b      	ldrh	r3, [r7, #18]
 8002844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002848:	d85f      	bhi.n	800290a <STATE3_SetConfig+0x1ce>
		{
			state3_vars.configuredIntensity = ledIntensity;
 800284a:	4a32      	ldr	r2, [pc, #200]	; (8002914 <STATE3_SetConfig+0x1d8>)
 800284c:	8abb      	ldrh	r3, [r7, #20]
 800284e:	80d3      	strh	r3, [r2, #6]
			state3_vars.ledOnTime = ledOnTime;
 8002850:	4a30      	ldr	r2, [pc, #192]	; (8002914 <STATE3_SetConfig+0x1d8>)
 8002852:	8a7b      	ldrh	r3, [r7, #18]
 8002854:	8093      	strh	r3, [r2, #4]

			if(state3_vars.ledOnTime == 0){
 8002856:	4b2f      	ldr	r3, [pc, #188]	; (8002914 <STATE3_SetConfig+0x1d8>)
 8002858:	889b      	ldrh	r3, [r3, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d123      	bne.n	80028a6 <STATE3_SetConfig+0x16a>
				if (morse1 == '0' && morse2 == '0' && morse3 == '0'){
 800285e:	7c7b      	ldrb	r3, [r7, #17]
 8002860:	2b30      	cmp	r3, #48	; 0x30
 8002862:	d112      	bne.n	800288a <STATE3_SetConfig+0x14e>
 8002864:	7c3b      	ldrb	r3, [r7, #16]
 8002866:	2b30      	cmp	r3, #48	; 0x30
 8002868:	d10f      	bne.n	800288a <STATE3_SetConfig+0x14e>
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	2b30      	cmp	r3, #48	; 0x30
 800286e:	d10c      	bne.n	800288a <STATE3_SetConfig+0x14e>
					state3_vars.morseMessage[0] = 'S';
 8002870:	4b28      	ldr	r3, [pc, #160]	; (8002914 <STATE3_SetConfig+0x1d8>)
 8002872:	2253      	movs	r2, #83	; 0x53
 8002874:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
					state3_vars.morseMessage[1] = 'O';
 8002878:	4b26      	ldr	r3, [pc, #152]	; (8002914 <STATE3_SetConfig+0x1d8>)
 800287a:	224f      	movs	r2, #79	; 0x4f
 800287c:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
					state3_vars.morseMessage[2] = 'S';
 8002880:	4b24      	ldr	r3, [pc, #144]	; (8002914 <STATE3_SetConfig+0x1d8>)
 8002882:	2253      	movs	r2, #83	; 0x53
 8002884:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
			if(state3_vars.ledOnTime == 0){
 8002888:	e00d      	b.n	80028a6 <STATE3_SetConfig+0x16a>

				} else
				{
					state3_vars.morseCustomMessage[0] = morse1;
 800288a:	4a22      	ldr	r2, [pc, #136]	; (8002914 <STATE3_SetConfig+0x1d8>)
 800288c:	7c7b      	ldrb	r3, [r7, #17]
 800288e:	f882 30e4 	strb.w	r3, [r2, #228]	; 0xe4
					state3_vars.morseCustomMessage[1] = morse2;
 8002892:	4a20      	ldr	r2, [pc, #128]	; (8002914 <STATE3_SetConfig+0x1d8>)
 8002894:	7c3b      	ldrb	r3, [r7, #16]
 8002896:	f882 30e5 	strb.w	r3, [r2, #229]	; 0xe5
					state3_vars.morseCustomMessage[2] = morse3;
 800289a:	4a1e      	ldr	r2, [pc, #120]	; (8002914 <STATE3_SetConfig+0x1d8>)
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	f882 30e6 	strb.w	r3, [r2, #230]	; 0xe6
					customMode = 1;
 80028a2:	2301      	movs	r3, #1
 80028a4:	75fb      	strb	r3, [r7, #23]
			if(state3_vars.ledOnTime == 0){
 80028a6:	bf00      	nop

			return;
		}

		//strobe
		if(ledOnTime > 0){
 80028a8:	8a7b      	ldrh	r3, [r7, #18]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d010      	beq.n	80028d0 <STATE3_SetConfig+0x194>
			activateStrobeMode();
 80028ae:	f000 fb11 	bl	8002ed4 <activateStrobeMode>
			if(state3_vars.configuredIntensity > 0){
 80028b2:	4b18      	ldr	r3, [pc, #96]	; (8002914 <STATE3_SetConfig+0x1d8>)
 80028b4:	88db      	ldrh	r3, [r3, #6]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <STATE3_SetConfig+0x186>
				state3_vars.ledStatus = 1;
 80028ba:	4b16      	ldr	r3, [pc, #88]	; (8002914 <STATE3_SetConfig+0x1d8>)
 80028bc:	2201      	movs	r2, #1
 80028be:	741a      	strb	r2, [r3, #16]
 80028c0:	e002      	b.n	80028c8 <STATE3_SetConfig+0x18c>
			} else {
				state3_vars.ledStatus = 0;
 80028c2:	4b14      	ldr	r3, [pc, #80]	; (8002914 <STATE3_SetConfig+0x1d8>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	741a      	strb	r2, [r3, #16]
			}
			state3_vars.emergencyMode = STROBE;
 80028c8:	4b12      	ldr	r3, [pc, #72]	; (8002914 <STATE3_SetConfig+0x1d8>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	705a      	strb	r2, [r3, #1]
 80028ce:	e01d      	b.n	800290c <STATE3_SetConfig+0x1d0>

		} else{

			if(customMode == 0){
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d103      	bne.n	80028de <STATE3_SetConfig+0x1a2>
				state3_vars.emergencyMode = SOS;
 80028d6:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <STATE3_SetConfig+0x1d8>)
 80028d8:	2201      	movs	r2, #1
 80028da:	705a      	strb	r2, [r3, #1]
 80028dc:	e002      	b.n	80028e4 <STATE3_SetConfig+0x1a8>

			} else {
				state3_vars.emergencyMode = CUSTOM;
 80028de:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <STATE3_SetConfig+0x1d8>)
 80028e0:	2202      	movs	r2, #2
 80028e2:	705a      	strb	r2, [r3, #1]
			}
			activateMorseMode(state3_vars.emergencyMode);
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <STATE3_SetConfig+0x1d8>)
 80028e6:	785b      	ldrb	r3, [r3, #1]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 faa1 	bl	8002e30 <activateMorseMode>
			if(state3_vars.configuredIntensity > 0){
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <STATE3_SetConfig+0x1d8>)
 80028f0:	88db      	ldrh	r3, [r3, #6]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <STATE3_SetConfig+0x1c2>
				state3_vars.ledStatus = 1;
 80028f6:	4b07      	ldr	r3, [pc, #28]	; (8002914 <STATE3_SetConfig+0x1d8>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	741a      	strb	r2, [r3, #16]
 80028fc:	e006      	b.n	800290c <STATE3_SetConfig+0x1d0>
			} else {
				state3_vars.ledStatus = 0;
 80028fe:	4b05      	ldr	r3, [pc, #20]	; (8002914 <STATE3_SetConfig+0x1d8>)
 8002900:	2200      	movs	r2, #0
 8002902:	741a      	strb	r2, [r3, #16]
 8002904:	e002      	b.n	800290c <STATE3_SetConfig+0x1d0>
			return;
 8002906:	bf00      	nop
 8002908:	e000      	b.n	800290c <STATE3_SetConfig+0x1d0>
			return;
 800290a:	bf00      	nop
		}




}
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20005250 	.word	0x20005250

08002918 <STATE3_GetConfig>:

void STATE3_GetConfig(uint8_t *config){
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]

	config[0] = '#';
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2223      	movs	r2, #35	; 0x23
 8002924:	701a      	strb	r2, [r3, #0]
	config[1] = ':';
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3301      	adds	r3, #1
 800292a:	223a      	movs	r2, #58	; 0x3a
 800292c:	701a      	strb	r2, [r3, #0]
	config[2] = 'M';
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3302      	adds	r3, #2
 8002932:	224d      	movs	r2, #77	; 0x4d
 8002934:	701a      	strb	r2, [r3, #0]
	config[3] = 'E';
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3303      	adds	r3, #3
 800293a:	2245      	movs	r2, #69	; 0x45
 800293c:	701a      	strb	r2, [r3, #0]
	config[4] = ':';
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3304      	adds	r3, #4
 8002942:	223a      	movs	r2, #58	; 0x3a
 8002944:	701a      	strb	r2, [r3, #0]
	if(state3_vars.ledStatus == 1){
 8002946:	4b83      	ldr	r3, [pc, #524]	; (8002b54 <STATE3_GetConfig+0x23c>)
 8002948:	7c1b      	ldrb	r3, [r3, #16]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d13e      	bne.n	80029cc <STATE3_GetConfig+0xb4>
		config[5] = ((state3_vars.configuredIntensity)/100) + 0x30;
 800294e:	4b81      	ldr	r3, [pc, #516]	; (8002b54 <STATE3_GetConfig+0x23c>)
 8002950:	88db      	ldrh	r3, [r3, #6]
 8002952:	4a81      	ldr	r2, [pc, #516]	; (8002b58 <STATE3_GetConfig+0x240>)
 8002954:	fba2 2303 	umull	r2, r3, r2, r3
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	b29b      	uxth	r3, r3
 800295c:	b2da      	uxtb	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3305      	adds	r3, #5
 8002962:	3230      	adds	r2, #48	; 0x30
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	701a      	strb	r2, [r3, #0]
		config[6] = ((state3_vars.configuredIntensity)%100)/10 + 0x30;
 8002968:	4b7a      	ldr	r3, [pc, #488]	; (8002b54 <STATE3_GetConfig+0x23c>)
 800296a:	88db      	ldrh	r3, [r3, #6]
 800296c:	4a7a      	ldr	r2, [pc, #488]	; (8002b58 <STATE3_GetConfig+0x240>)
 800296e:	fba2 1203 	umull	r1, r2, r2, r3
 8002972:	0952      	lsrs	r2, r2, #5
 8002974:	2164      	movs	r1, #100	; 0x64
 8002976:	fb01 f202 	mul.w	r2, r1, r2
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	b29b      	uxth	r3, r3
 800297e:	4a77      	ldr	r2, [pc, #476]	; (8002b5c <STATE3_GetConfig+0x244>)
 8002980:	fba2 2303 	umull	r2, r3, r2, r3
 8002984:	08db      	lsrs	r3, r3, #3
 8002986:	b29b      	uxth	r3, r3
 8002988:	b2da      	uxtb	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3306      	adds	r3, #6
 800298e:	3230      	adds	r2, #48	; 0x30
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	701a      	strb	r2, [r3, #0]
		config[7] = ((state3_vars.configuredIntensity)%100)%10 + 0x30;
 8002994:	4b6f      	ldr	r3, [pc, #444]	; (8002b54 <STATE3_GetConfig+0x23c>)
 8002996:	88db      	ldrh	r3, [r3, #6]
 8002998:	4a6f      	ldr	r2, [pc, #444]	; (8002b58 <STATE3_GetConfig+0x240>)
 800299a:	fba2 1203 	umull	r1, r2, r2, r3
 800299e:	0952      	lsrs	r2, r2, #5
 80029a0:	2164      	movs	r1, #100	; 0x64
 80029a2:	fb01 f202 	mul.w	r2, r1, r2
 80029a6:	1a9b      	subs	r3, r3, r2
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	4b6c      	ldr	r3, [pc, #432]	; (8002b5c <STATE3_GetConfig+0x244>)
 80029ac:	fba3 1302 	umull	r1, r3, r3, r2
 80029b0:	08d9      	lsrs	r1, r3, #3
 80029b2:	460b      	mov	r3, r1
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	b29b      	uxth	r3, r3
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3307      	adds	r3, #7
 80029c4:	3230      	adds	r2, #48	; 0x30
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	e03d      	b.n	8002a48 <STATE3_GetConfig+0x130>
	} else {
		config[5] = ((state3_vars.ledIntensity)/100) + 0x30;
 80029cc:	4b61      	ldr	r3, [pc, #388]	; (8002b54 <STATE3_GetConfig+0x23c>)
 80029ce:	885b      	ldrh	r3, [r3, #2]
 80029d0:	4a61      	ldr	r2, [pc, #388]	; (8002b58 <STATE3_GetConfig+0x240>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	b29b      	uxth	r3, r3
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3305      	adds	r3, #5
 80029e0:	3230      	adds	r2, #48	; 0x30
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	701a      	strb	r2, [r3, #0]
		config[6] = ((state3_vars.ledIntensity)%100)/10 + 0x30;
 80029e6:	4b5b      	ldr	r3, [pc, #364]	; (8002b54 <STATE3_GetConfig+0x23c>)
 80029e8:	885b      	ldrh	r3, [r3, #2]
 80029ea:	4a5b      	ldr	r2, [pc, #364]	; (8002b58 <STATE3_GetConfig+0x240>)
 80029ec:	fba2 1203 	umull	r1, r2, r2, r3
 80029f0:	0952      	lsrs	r2, r2, #5
 80029f2:	2164      	movs	r1, #100	; 0x64
 80029f4:	fb01 f202 	mul.w	r2, r1, r2
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	4a57      	ldr	r2, [pc, #348]	; (8002b5c <STATE3_GetConfig+0x244>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	08db      	lsrs	r3, r3, #3
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3306      	adds	r3, #6
 8002a0c:	3230      	adds	r2, #48	; 0x30
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]
		config[7] = ((state3_vars.ledIntensity)%100)%10 + 0x30;
 8002a12:	4b50      	ldr	r3, [pc, #320]	; (8002b54 <STATE3_GetConfig+0x23c>)
 8002a14:	885b      	ldrh	r3, [r3, #2]
 8002a16:	4a50      	ldr	r2, [pc, #320]	; (8002b58 <STATE3_GetConfig+0x240>)
 8002a18:	fba2 1203 	umull	r1, r2, r2, r3
 8002a1c:	0952      	lsrs	r2, r2, #5
 8002a1e:	2164      	movs	r1, #100	; 0x64
 8002a20:	fb01 f202 	mul.w	r2, r1, r2
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	4b4c      	ldr	r3, [pc, #304]	; (8002b5c <STATE3_GetConfig+0x244>)
 8002a2a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a2e:	08d9      	lsrs	r1, r3, #3
 8002a30:	460b      	mov	r3, r1
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3307      	adds	r3, #7
 8002a42:	3230      	adds	r2, #48	; 0x30
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	701a      	strb	r2, [r3, #0]
	}

	config[8] = ':';
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3308      	adds	r3, #8
 8002a4c:	223a      	movs	r2, #58	; 0x3a
 8002a4e:	701a      	strb	r2, [r3, #0]
	config[9] = ((state3_vars.ledOnTime)/100) + 0x30;
 8002a50:	4b40      	ldr	r3, [pc, #256]	; (8002b54 <STATE3_GetConfig+0x23c>)
 8002a52:	889b      	ldrh	r3, [r3, #4]
 8002a54:	4a40      	ldr	r2, [pc, #256]	; (8002b58 <STATE3_GetConfig+0x240>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3309      	adds	r3, #9
 8002a64:	3230      	adds	r2, #48	; 0x30
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]
	config[10] = ((state3_vars.ledOnTime)%100)/10 + 0x30;
 8002a6a:	4b3a      	ldr	r3, [pc, #232]	; (8002b54 <STATE3_GetConfig+0x23c>)
 8002a6c:	889b      	ldrh	r3, [r3, #4]
 8002a6e:	4a3a      	ldr	r2, [pc, #232]	; (8002b58 <STATE3_GetConfig+0x240>)
 8002a70:	fba2 1203 	umull	r1, r2, r2, r3
 8002a74:	0952      	lsrs	r2, r2, #5
 8002a76:	2164      	movs	r1, #100	; 0x64
 8002a78:	fb01 f202 	mul.w	r2, r1, r2
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	4a36      	ldr	r2, [pc, #216]	; (8002b5c <STATE3_GetConfig+0x244>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	08db      	lsrs	r3, r3, #3
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	330a      	adds	r3, #10
 8002a90:	3230      	adds	r2, #48	; 0x30
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]
	config[11] = ((state3_vars.ledOnTime)%100)%10 + 0x30;
 8002a96:	4b2f      	ldr	r3, [pc, #188]	; (8002b54 <STATE3_GetConfig+0x23c>)
 8002a98:	889b      	ldrh	r3, [r3, #4]
 8002a9a:	4a2f      	ldr	r2, [pc, #188]	; (8002b58 <STATE3_GetConfig+0x240>)
 8002a9c:	fba2 1203 	umull	r1, r2, r2, r3
 8002aa0:	0952      	lsrs	r2, r2, #5
 8002aa2:	2164      	movs	r1, #100	; 0x64
 8002aa4:	fb01 f202 	mul.w	r2, r1, r2
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	4b2b      	ldr	r3, [pc, #172]	; (8002b5c <STATE3_GetConfig+0x244>)
 8002aae:	fba3 1302 	umull	r1, r3, r3, r2
 8002ab2:	08d9      	lsrs	r1, r3, #3
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	330b      	adds	r3, #11
 8002ac6:	3230      	adds	r2, #48	; 0x30
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	701a      	strb	r2, [r3, #0]
	config[12] = ':';
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	330c      	adds	r3, #12
 8002ad0:	223a      	movs	r2, #58	; 0x3a
 8002ad2:	701a      	strb	r2, [r3, #0]

	if(state3_vars.emergencyMode == CUSTOM || state3_vars.emergencyMode == STROBE){
 8002ad4:	4b1f      	ldr	r3, [pc, #124]	; (8002b54 <STATE3_GetConfig+0x23c>)
 8002ad6:	785b      	ldrb	r3, [r3, #1]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d003      	beq.n	8002ae4 <STATE3_GetConfig+0x1cc>
 8002adc:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <STATE3_GetConfig+0x23c>)
 8002ade:	785b      	ldrb	r3, [r3, #1]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d112      	bne.n	8002b0a <STATE3_GetConfig+0x1f2>
		config[13] = state3_vars.morseCustomMessage[0];
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	330d      	adds	r3, #13
 8002ae8:	4a1a      	ldr	r2, [pc, #104]	; (8002b54 <STATE3_GetConfig+0x23c>)
 8002aea:	f892 20e4 	ldrb.w	r2, [r2, #228]	; 0xe4
 8002aee:	701a      	strb	r2, [r3, #0]
		config[14] = state3_vars.morseCustomMessage[1];
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	330e      	adds	r3, #14
 8002af4:	4a17      	ldr	r2, [pc, #92]	; (8002b54 <STATE3_GetConfig+0x23c>)
 8002af6:	f892 20e5 	ldrb.w	r2, [r2, #229]	; 0xe5
 8002afa:	701a      	strb	r2, [r3, #0]
		config[15] = state3_vars.morseCustomMessage[2];
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	330f      	adds	r3, #15
 8002b00:	4a14      	ldr	r2, [pc, #80]	; (8002b54 <STATE3_GetConfig+0x23c>)
 8002b02:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	e011      	b.n	8002b2e <STATE3_GetConfig+0x216>
	} else {
		config[13] = state3_vars.morseMessage[0];
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	330d      	adds	r3, #13
 8002b0e:	4a11      	ldr	r2, [pc, #68]	; (8002b54 <STATE3_GetConfig+0x23c>)
 8002b10:	f892 20e0 	ldrb.w	r2, [r2, #224]	; 0xe0
 8002b14:	701a      	strb	r2, [r3, #0]
		config[14] = state3_vars.morseMessage[1];
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	330e      	adds	r3, #14
 8002b1a:	4a0e      	ldr	r2, [pc, #56]	; (8002b54 <STATE3_GetConfig+0x23c>)
 8002b1c:	f892 20e1 	ldrb.w	r2, [r2, #225]	; 0xe1
 8002b20:	701a      	strb	r2, [r3, #0]
		config[15] = state3_vars.morseMessage[2];
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	330f      	adds	r3, #15
 8002b26:	4a0b      	ldr	r2, [pc, #44]	; (8002b54 <STATE3_GetConfig+0x23c>)
 8002b28:	f892 20e2 	ldrb.w	r2, [r2, #226]	; 0xe2
 8002b2c:	701a      	strb	r2, [r3, #0]
	}
	config[16] = ':';
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3310      	adds	r3, #16
 8002b32:	223a      	movs	r2, #58	; 0x3a
 8002b34:	701a      	strb	r2, [r3, #0]
	config[17] = '$';
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3311      	adds	r3, #17
 8002b3a:	2224      	movs	r2, #36	; 0x24
 8002b3c:	701a      	strb	r2, [r3, #0]
	config[18] = '\n';
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3312      	adds	r3, #18
 8002b42:	220a      	movs	r2, #10
 8002b44:	701a      	strb	r2, [r3, #0]

}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20005250 	.word	0x20005250
 8002b58:	51eb851f 	.word	0x51eb851f
 8002b5c:	cccccccd 	.word	0xcccccccd

08002b60 <STATE3_SliderVal>:

void STATE3_SliderVal(uint32_t sliderValue){
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	STATE3_SetIntensity(sliderValue);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fc5f 	bl	8002430 <STATE3_SetIntensity>
//	state3_vars.ledIntensity = sliderValue;

}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <STATE3_OnHold>:

void STATE3_OnHold(){
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0

	if(state3_vars.emergencyMode == STROBE){
 8002b80:	4b18      	ldr	r3, [pc, #96]	; (8002be4 <STATE3_OnHold+0x68>)
 8002b82:	785b      	ldrb	r3, [r3, #1]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d111      	bne.n	8002bac <STATE3_OnHold+0x30>
				if(state3_vars.ledStatus == 1){
 8002b88:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <STATE3_OnHold+0x68>)
 8002b8a:	7c1b      	ldrb	r3, [r3, #16]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d108      	bne.n	8002ba2 <STATE3_OnHold+0x26>

							state3_vars.ledIntensity = 0;
 8002b90:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <STATE3_OnHold+0x68>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	805a      	strh	r2, [r3, #2]
							state3_vars.ledStatus = 0;
 8002b96:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <STATE3_OnHold+0x68>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	741a      	strb	r2, [r3, #16]
							STATE3_ApplySettings();
 8002b9c:	f7ff fc5c 	bl	8002458 <STATE3_ApplySettings>
 8002ba0:	e004      	b.n	8002bac <STATE3_OnHold+0x30>
					} else {

						activateStrobeMode();
 8002ba2:	f000 f997 	bl	8002ed4 <activateStrobeMode>
						state3_vars.ledStatus = 1;
 8002ba6:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <STATE3_OnHold+0x68>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	741a      	strb	r2, [r3, #16]
					}


			}

			if(state3_vars.emergencyMode == SOS || state3_vars.emergencyMode == CUSTOM)
 8002bac:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <STATE3_OnHold+0x68>)
 8002bae:	785b      	ldrb	r3, [r3, #1]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d003      	beq.n	8002bbc <STATE3_OnHold+0x40>
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <STATE3_OnHold+0x68>)
 8002bb6:	785b      	ldrb	r3, [r3, #1]
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d111      	bne.n	8002be0 <STATE3_OnHold+0x64>
			{
				//if the led is currently not flashing, activate morse code mode
				if(state3_vars.ledStatus == 0){
 8002bbc:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <STATE3_OnHold+0x68>)
 8002bbe:	7c1b      	ldrb	r3, [r3, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d105      	bne.n	8002bd0 <STATE3_OnHold+0x54>
					activateMorseMode(state3_vars.emergencyMode);
 8002bc4:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <STATE3_OnHold+0x68>)
 8002bc6:	785b      	ldrb	r3, [r3, #1]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 f931 	bl	8002e30 <activateMorseMode>
				}

			}


}
 8002bce:	e007      	b.n	8002be0 <STATE3_OnHold+0x64>
					state3_vars.ledStatus = 0;
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <STATE3_OnHold+0x68>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	741a      	strb	r2, [r3, #16]
					state3_vars.ledIntensity = 0;
 8002bd6:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <STATE3_OnHold+0x68>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	805a      	strh	r2, [r3, #2]
					STATE3_ApplySettings();
 8002bdc:	f7ff fc3c 	bl	8002458 <STATE3_ApplySettings>
}
 8002be0:	bf00      	nop
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20005250 	.word	0x20005250

08002be8 <STATE3_OnSlide>:

void STATE3_OnSlide(uint16_t currentXCoord){
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	80fb      	strh	r3, [r7, #6]

	STATE3_SetIntensity((currentXCoord*512)/1792);
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	025b      	lsls	r3, r3, #9
 8002bf6:	4a07      	ldr	r2, [pc, #28]	; (8002c14 <STATE3_OnSlide+0x2c>)
 8002bf8:	fb82 1203 	smull	r1, r2, r2, r3
 8002bfc:	441a      	add	r2, r3
 8002bfe:	1292      	asrs	r2, r2, #10
 8002c00:	17db      	asrs	r3, r3, #31
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fc12 	bl	8002430 <STATE3_SetIntensity>
}
 8002c0c:	bf00      	nop
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	92492493 	.word	0x92492493

08002c18 <STATE3_OnTap>:

void STATE3_OnTap(uint16_t tapX, uint16_t tapY){
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	460a      	mov	r2, r1
 8002c22:	80fb      	strh	r3, [r7, #6]
 8002c24:	4613      	mov	r3, r2
 8002c26:	80bb      	strh	r3, [r7, #4]
	if(state3_vars.emergencyMode == STROBE)
 8002c28:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <STATE3_OnTap+0xa8>)
 8002c2a:	785b      	ldrb	r3, [r3, #1]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d11b      	bne.n	8002c68 <STATE3_OnTap+0x50>
		{

			state3_vars.ledIntensity = 0;
 8002c30:	4b23      	ldr	r3, [pc, #140]	; (8002cc0 <STATE3_OnTap+0xa8>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	805a      	strh	r2, [r3, #2]
			state3_vars.ledStatus = 0;
 8002c36:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <STATE3_OnTap+0xa8>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	741a      	strb	r2, [r3, #16]
			state3_vars.morseMessage[0] = 'S';
 8002c3c:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <STATE3_OnTap+0xa8>)
 8002c3e:	2253      	movs	r2, #83	; 0x53
 8002c40:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
			state3_vars.morseMessage[1] = 'O';
 8002c44:	4b1e      	ldr	r3, [pc, #120]	; (8002cc0 <STATE3_OnTap+0xa8>)
 8002c46:	224f      	movs	r2, #79	; 0x4f
 8002c48:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
			state3_vars.morseMessage[2] = 'S';
 8002c4c:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <STATE3_OnTap+0xa8>)
 8002c4e:	2253      	movs	r2, #83	; 0x53
 8002c50:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
			state3_vars.configuredIntensity = 512;
 8002c54:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <STATE3_OnTap+0xa8>)
 8002c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c5a:	80da      	strh	r2, [r3, #6]
			state3_vars.emergencyMode = SOS;
 8002c5c:	4b18      	ldr	r3, [pc, #96]	; (8002cc0 <STATE3_OnTap+0xa8>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	705a      	strb	r2, [r3, #1]
			STATE3_ApplySettings();
 8002c62:	f7ff fbf9 	bl	8002458 <STATE3_ApplySettings>
			state3_vars.emergencyMode = STROBE;



		}
}
 8002c66:	e026      	b.n	8002cb6 <STATE3_OnTap+0x9e>
		} else if(state3_vars.emergencyMode == SOS)
 8002c68:	4b15      	ldr	r3, [pc, #84]	; (8002cc0 <STATE3_OnTap+0xa8>)
 8002c6a:	785b      	ldrb	r3, [r3, #1]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d10f      	bne.n	8002c90 <STATE3_OnTap+0x78>
			state3_vars.ledIntensity = 0;
 8002c70:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <STATE3_OnTap+0xa8>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	805a      	strh	r2, [r3, #2]
			state3_vars.ledStatus = 0;
 8002c76:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <STATE3_OnTap+0xa8>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	741a      	strb	r2, [r3, #16]
			state3_vars.configuredIntensity = 512;
 8002c7c:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <STATE3_OnTap+0xa8>)
 8002c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c82:	80da      	strh	r2, [r3, #6]
			STATE3_ApplySettings();
 8002c84:	f7ff fbe8 	bl	8002458 <STATE3_ApplySettings>
			state3_vars.emergencyMode = CUSTOM;
 8002c88:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <STATE3_OnTap+0xa8>)
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	705a      	strb	r2, [r3, #1]
}
 8002c8e:	e012      	b.n	8002cb6 <STATE3_OnTap+0x9e>
		} else if(state3_vars.emergencyMode == CUSTOM){
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <STATE3_OnTap+0xa8>)
 8002c92:	785b      	ldrb	r3, [r3, #1]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d10e      	bne.n	8002cb6 <STATE3_OnTap+0x9e>
			state3_vars.ledIntensity = 0;
 8002c98:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <STATE3_OnTap+0xa8>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	805a      	strh	r2, [r3, #2]
			state3_vars.ledStatus = 0;
 8002c9e:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <STATE3_OnTap+0xa8>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	741a      	strb	r2, [r3, #16]
			state3_vars.configuredIntensity = 512;
 8002ca4:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <STATE3_OnTap+0xa8>)
 8002ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002caa:	80da      	strh	r2, [r3, #6]
			STATE3_ApplySettings();
 8002cac:	f7ff fbd4 	bl	8002458 <STATE3_ApplySettings>
			state3_vars.emergencyMode = STROBE;
 8002cb0:	4b03      	ldr	r3, [pc, #12]	; (8002cc0 <STATE3_OnTap+0xa8>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	705a      	strb	r2, [r3, #1]
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20005250 	.word	0x20005250

08002cc4 <STATE3_Housekeep>:


void STATE3_Housekeep(){
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0

	if(state3_vars.ledStatus == 0){
 8002cca:	4b58      	ldr	r3, [pc, #352]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002ccc:	7c1b      	ldrb	r3, [r3, #16]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 80a5 	beq.w	8002e1e <STATE3_Housekeep+0x15a>
		return;
	}
	if(state3_vars.isActive == 0){
 8002cd4:	4b55      	ldr	r3, [pc, #340]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80a2 	beq.w	8002e22 <STATE3_Housekeep+0x15e>


	//default 512 brightness & 512 on time

	//when entering 0 brightness 0 on time
	if(state3_vars.ledOnTime > 0 && state3_vars.emergencyMode == STROBE)
 8002cde:	4b53      	ldr	r3, [pc, #332]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002ce0:	889b      	ldrh	r3, [r3, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d033      	beq.n	8002d4e <STATE3_Housekeep+0x8a>
 8002ce6:	4b51      	ldr	r3, [pc, #324]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002ce8:	785b      	ldrb	r3, [r3, #1]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d12f      	bne.n	8002d4e <STATE3_Housekeep+0x8a>
	{
		if(state3_vars.ledOnTime > 0)
 8002cee:	4b4f      	ldr	r3, [pc, #316]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002cf0:	889b      	ldrh	r3, [r3, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d02b      	beq.n	8002d4e <STATE3_Housekeep+0x8a>
		{
			if(HAL_GetTick() > state3_vars.tickOffTime && state3_vars.ledIntensity > 0)
 8002cf6:	f001 fa45 	bl	8004184 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	4b4b      	ldr	r3, [pc, #300]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d908      	bls.n	8002d16 <STATE3_Housekeep+0x52>
 8002d04:	4b49      	ldr	r3, [pc, #292]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002d06:	885b      	ldrh	r3, [r3, #2]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d004      	beq.n	8002d16 <STATE3_Housekeep+0x52>
			{
				//state3_vars.strobeLedIntensity = state3_vars.ledIntensity;
				state3_vars.ledIntensity = 0;
 8002d0c:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	805a      	strh	r2, [r3, #2]
				STATE3_ApplySettings();
 8002d12:	f7ff fba1 	bl	8002458 <STATE3_ApplySettings>
			}
			if(HAL_GetTick() > state3_vars.tickEndCycle)
 8002d16:	f001 fa35 	bl	8004184 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	4b43      	ldr	r3, [pc, #268]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d914      	bls.n	8002d4e <STATE3_Housekeep+0x8a>
			{
				state3_vars.ledIntensity = state3_vars.configuredIntensity;
 8002d24:	4b41      	ldr	r3, [pc, #260]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002d26:	88da      	ldrh	r2, [r3, #6]
 8002d28:	4b40      	ldr	r3, [pc, #256]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002d2a:	805a      	strh	r2, [r3, #2]
				STATE3_ApplySettings();
 8002d2c:	f7ff fb94 	bl	8002458 <STATE3_ApplySettings>
				state3_vars.tickOffTime = HAL_GetTick() + state3_vars.ledOnTime;
 8002d30:	f001 fa28 	bl	8004184 <HAL_GetTick>
 8002d34:	4603      	mov	r3, r0
 8002d36:	4a3d      	ldr	r2, [pc, #244]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002d38:	8892      	ldrh	r2, [r2, #4]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	4a3b      	ldr	r2, [pc, #236]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002d3e:	6093      	str	r3, [r2, #8]
				state3_vars.tickEndCycle = state3_vars.tickOffTime + state3_vars.ledOnTime;
 8002d40:	4b3a      	ldr	r3, [pc, #232]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	4a39      	ldr	r2, [pc, #228]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002d46:	8892      	ldrh	r2, [r2, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	4a38      	ldr	r2, [pc, #224]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002d4c:	60d3      	str	r3, [r2, #12]
			}
		}
	}

	if(state3_vars.emergencyMode == SOS || state3_vars.emergencyMode == CUSTOM){
 8002d4e:	4b37      	ldr	r3, [pc, #220]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002d50:	785b      	ldrb	r3, [r3, #1]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d003      	beq.n	8002d5e <STATE3_Housekeep+0x9a>
 8002d56:	4b35      	ldr	r3, [pc, #212]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002d58:	785b      	ldrb	r3, [r3, #1]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d162      	bne.n	8002e24 <STATE3_Housekeep+0x160>
		if(HAL_GetTick() > state3_vars.morseTimer + 512){
 8002d5e:	f001 fa11 	bl	8004184 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	4b31      	ldr	r3, [pc, #196]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002d66:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002d6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d958      	bls.n	8002e24 <STATE3_Housekeep+0x160>
			state3_vars.morseIdx++;
 8002d72:	4b2e      	ldr	r3, [pc, #184]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002d74:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8002d78:	3301      	adds	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002d7e:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
			if(state3_vars.morseMaskArray[state3_vars.morseIdx] == 0){
 8002d82:	4b2a      	ldr	r3, [pc, #168]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002d84:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d103      	bne.n	8002d9e <STATE3_Housekeep+0xda>
				state3_vars.morseIdx = 0;
 8002d96:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
			}
			if(state3_vars.morseMaskArray[state3_vars.morseIdx] == 1)
 8002d9e:	4b23      	ldr	r3, [pc, #140]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002da0:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b21      	ldr	r3, [pc, #132]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002da8:	4413      	add	r3, r2
 8002daa:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d138      	bne.n	8002e24 <STATE3_Housekeep+0x160>
			{
				uint8_t morsePrevValue = state3_vars.morseCurrentValue;
 8002db2:	4b1e      	ldr	r3, [pc, #120]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002db4:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 8002db8:	71fb      	strb	r3, [r7, #7]
				state3_vars.morseCurrentValue = state3_vars.morseBinaryArray[state3_vars.morseIdx];
 8002dba:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002dbc:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002dc4:	4413      	add	r3, r2
 8002dc6:	7c5a      	ldrb	r2, [r3, #17]
 8002dc8:	4b18      	ldr	r3, [pc, #96]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002dca:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				if(state3_vars.morseCurrentValue != morsePrevValue)
 8002dce:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002dd0:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 8002dd4:	79fa      	ldrb	r2, [r7, #7]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d01a      	beq.n	8002e10 <STATE3_Housekeep+0x14c>
				{

					//toggle led on
					if(state3_vars.morseCurrentValue == 1)
 8002dda:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002ddc:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d108      	bne.n	8002df6 <STATE3_Housekeep+0x132>
					{
						state3_vars.ledIntensity = state3_vars.configuredIntensity;
 8002de4:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002de6:	88da      	ldrh	r2, [r3, #6]
 8002de8:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002dea:	805a      	strh	r2, [r3, #2]
						state3_vars.morseLedStatus = 1;
 8002dec:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
 8002df4:	e00a      	b.n	8002e0c <STATE3_Housekeep+0x148>

					} else {
						state3_vars.configuredIntensity = state3_vars.ledIntensity;
 8002df6:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002df8:	885a      	ldrh	r2, [r3, #2]
 8002dfa:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002dfc:	80da      	strh	r2, [r3, #6]
						state3_vars.ledIntensity = 0;
 8002dfe:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	805a      	strh	r2, [r3, #2]
						state3_vars.morseLedStatus = 0;
 8002e04:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
					}
					STATE3_ApplySettings();
 8002e0c:	f7ff fb24 	bl	8002458 <STATE3_ApplySettings>

				}
				state3_vars.morseTimer = HAL_GetTick();
 8002e10:	f001 f9b8 	bl	8004184 <HAL_GetTick>
 8002e14:	4603      	mov	r3, r0
 8002e16:	4a05      	ldr	r2, [pc, #20]	; (8002e2c <STATE3_Housekeep+0x168>)
 8002e18:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002e1c:	e002      	b.n	8002e24 <STATE3_Housekeep+0x160>
		return;
 8002e1e:	bf00      	nop
 8002e20:	e000      	b.n	8002e24 <STATE3_Housekeep+0x160>
		return;
 8002e22:	bf00      	nop

		}

	}

}
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20005250 	.word	0x20005250

08002e30 <activateMorseMode>:

void activateMorseMode(EMERGENCY_MODES myEmergencyMode){
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	71fb      	strb	r3, [r7, #7]


	if(myEmergencyMode == SOS){
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d103      	bne.n	8002e48 <activateMorseMode+0x18>
		updateMorseBinary(state3_vars.morseMessage);
 8002e40:	4821      	ldr	r0, [pc, #132]	; (8002ec8 <activateMorseMode+0x98>)
 8002e42:	f000 f863 	bl	8002f0c <updateMorseBinary>
 8002e46:	e002      	b.n	8002e4e <activateMorseMode+0x1e>
	} else {
		updateMorseBinary(state3_vars.morseCustomMessage);
 8002e48:	4820      	ldr	r0, [pc, #128]	; (8002ecc <activateMorseMode+0x9c>)
 8002e4a:	f000 f85f 	bl	8002f0c <updateMorseBinary>
	}
	state3_vars.morseIdx = 0;
 8002e4e:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <activateMorseMode+0xa0>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
	state3_vars.ledStatus = 1;
 8002e56:	4b1e      	ldr	r3, [pc, #120]	; (8002ed0 <activateMorseMode+0xa0>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	741a      	strb	r2, [r3, #16]
	// if there is a valid value to set
	if(state3_vars.morseMaskArray[state3_vars.morseIdx] == 1)
 8002e5c:	4b1c      	ldr	r3, [pc, #112]	; (8002ed0 <activateMorseMode+0xa0>)
 8002e5e:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8002e62:	461a      	mov	r2, r3
 8002e64:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <activateMorseMode+0xa0>)
 8002e66:	4413      	add	r3, r2
 8002e68:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d126      	bne.n	8002ebe <activateMorseMode+0x8e>
	{
		state3_vars.morseCurrentValue = state3_vars.morseBinaryArray[state3_vars.morseIdx];
 8002e70:	4b17      	ldr	r3, [pc, #92]	; (8002ed0 <activateMorseMode+0xa0>)
 8002e72:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8002e76:	461a      	mov	r2, r3
 8002e78:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <activateMorseMode+0xa0>)
 8002e7a:	4413      	add	r3, r2
 8002e7c:	7c5a      	ldrb	r2, [r3, #17]
 8002e7e:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <activateMorseMode+0xa0>)
 8002e80:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
		//toggle led on
		if(state3_vars.morseCurrentValue == 1)
 8002e84:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <activateMorseMode+0xa0>)
 8002e86:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d108      	bne.n	8002ea0 <activateMorseMode+0x70>
		{
			state3_vars.ledIntensity = state3_vars.configuredIntensity;
 8002e8e:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <activateMorseMode+0xa0>)
 8002e90:	88da      	ldrh	r2, [r3, #6]
 8002e92:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <activateMorseMode+0xa0>)
 8002e94:	805a      	strh	r2, [r3, #2]
			state3_vars.morseLedStatus = 1;
 8002e96:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <activateMorseMode+0xa0>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
 8002e9e:	e006      	b.n	8002eae <activateMorseMode+0x7e>


		} else {

			state3_vars.ledIntensity = 0;
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <activateMorseMode+0xa0>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	805a      	strh	r2, [r3, #2]
			state3_vars.morseLedStatus = 0;
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <activateMorseMode+0xa0>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
		}
		STATE3_ApplySettings();
 8002eae:	f7ff fad3 	bl	8002458 <STATE3_ApplySettings>
		state3_vars.morseTimer = HAL_GetTick();
 8002eb2:	f001 f967 	bl	8004184 <HAL_GetTick>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4a05      	ldr	r2, [pc, #20]	; (8002ed0 <activateMorseMode+0xa0>)
 8002eba:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc

	}


}
 8002ebe:	bf00      	nop
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20005330 	.word	0x20005330
 8002ecc:	20005334 	.word	0x20005334
 8002ed0:	20005250 	.word	0x20005250

08002ed4 <activateStrobeMode>:

void activateStrobeMode(){
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0

	state3_vars.ledIntensity = state3_vars.configuredIntensity;
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <activateStrobeMode+0x34>)
 8002eda:	88da      	ldrh	r2, [r3, #6]
 8002edc:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <activateStrobeMode+0x34>)
 8002ede:	805a      	strh	r2, [r3, #2]
	state3_vars.tickOffTime = HAL_GetTick() + state3_vars.ledOnTime;
 8002ee0:	f001 f950 	bl	8004184 <HAL_GetTick>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	4a08      	ldr	r2, [pc, #32]	; (8002f08 <activateStrobeMode+0x34>)
 8002ee8:	8892      	ldrh	r2, [r2, #4]
 8002eea:	4413      	add	r3, r2
 8002eec:	4a06      	ldr	r2, [pc, #24]	; (8002f08 <activateStrobeMode+0x34>)
 8002eee:	6093      	str	r3, [r2, #8]
	state3_vars.tickEndCycle = state3_vars.ledOnTime + state3_vars.tickOffTime;
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <activateStrobeMode+0x34>)
 8002ef2:	889b      	ldrh	r3, [r3, #4]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <activateStrobeMode+0x34>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	4413      	add	r3, r2
 8002efc:	4a02      	ldr	r2, [pc, #8]	; (8002f08 <activateStrobeMode+0x34>)
 8002efe:	60d3      	str	r3, [r2, #12]
	STATE3_ApplySettings();
 8002f00:	f7ff faaa 	bl	8002458 <STATE3_ApplySettings>


}
 8002f04:	bf00      	nop
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20005250 	.word	0x20005250

08002f0c <updateMorseBinary>:





void updateMorseBinary(uint8_t *input) {
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
	/* reset the morse arrays */
	memset(state3_vars.morseBinaryArray, 0, sizeof(state3_vars.morseBinaryArray));
 8002f14:	2264      	movs	r2, #100	; 0x64
 8002f16:	2100      	movs	r1, #0
 8002f18:	482b      	ldr	r0, [pc, #172]	; (8002fc8 <updateMorseBinary+0xbc>)
 8002f1a:	f007 fe1f 	bl	800ab5c <memset>
	memset(state3_vars.morseMaskArray, 0, sizeof(state3_vars.morseMaskArray));
 8002f1e:	2264      	movs	r2, #100	; 0x64
 8002f20:	2100      	movs	r1, #0
 8002f22:	482a      	ldr	r0, [pc, #168]	; (8002fcc <updateMorseBinary+0xc0>)
 8002f24:	f007 fe1a 	bl	800ab5c <memset>

	uint8_t shift = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	77fb      	strb	r3, [r7, #31]

	/* iterate over input letters */
	for (int i = 0; i < 3; i++) {
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61bb      	str	r3, [r7, #24]
 8002f30:	e03d      	b.n	8002fae <updateMorseBinary+0xa2>
		/*
		ensure input letter is uppercase, then get index of char in the asciiMorseBinary array by subtracting 32
		(since "SPACE" in ASCII is 32, and the first element of the asciiMorseBinary is "SPACE")
		*/
		uint8_t index = (input[i] &CAPITAL_MASK) - 32;
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	4413      	add	r3, r2
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	3b20      	subs	r3, #32
 8002f42:	73fb      	strb	r3, [r7, #15]

		/* Get the binary representation of the morse letter */
		uint32_t charBinary = asciiMorseBinary[index][0];
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	4a22      	ldr	r2, [pc, #136]	; (8002fd0 <updateMorseBinary+0xc4>)
 8002f48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f4c:	617b      	str	r3, [r7, #20]

		/* Get the binary length of the morse letter */
		uint8_t charBinaryLength = asciiMorseBinary[index][1];
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	4a1f      	ldr	r2, [pc, #124]	; (8002fd0 <updateMorseBinary+0xc4>)
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	73bb      	strb	r3, [r7, #14]

		/* Update the morse binary array with the right-most bit, then right-shift the charBinary value and repeat until the for loop finished */
		for (int j = 0; j < charBinaryLength; j++) {
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	e011      	b.n	8002f84 <updateMorseBinary+0x78>
			state3_vars.morseBinaryArray[shift + j] = charBinary &1;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	7ff9      	ldrb	r1, [r7, #31]
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	440b      	add	r3, r1
 8002f6a:	f002 0201 	and.w	r2, r2, #1
 8002f6e:	b2d1      	uxtb	r1, r2
 8002f70:	4a18      	ldr	r2, [pc, #96]	; (8002fd4 <updateMorseBinary+0xc8>)
 8002f72:	4413      	add	r3, r2
 8002f74:	460a      	mov	r2, r1
 8002f76:	745a      	strb	r2, [r3, #17]
			charBinary >>= 1;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	085b      	lsrs	r3, r3, #1
 8002f7c:	617b      	str	r3, [r7, #20]
		for (int j = 0; j < charBinaryLength; j++) {
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	3301      	adds	r3, #1
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	7bbb      	ldrb	r3, [r7, #14]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	dbe9      	blt.n	8002f60 <updateMorseBinary+0x54>
		}

		/* Update the shift amount */
		shift += charBinaryLength;
 8002f8c:	7ffa      	ldrb	r2, [r7, #31]
 8002f8e:	7bbb      	ldrb	r3, [r7, #14]
 8002f90:	4413      	add	r3, r2
 8002f92:	77fb      	strb	r3, [r7, #31]

		/* If the character is not the last in the string, then add the three time-unit space */
		if (i < 2) {
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	dc03      	bgt.n	8002fa2 <updateMorseBinary+0x96>
			shift += MORSE_3;
 8002f9a:	7ffb      	ldrb	r3, [r7, #31]
 8002f9c:	3303      	adds	r3, #3
 8002f9e:	77fb      	strb	r3, [r7, #31]
 8002fa0:	e002      	b.n	8002fa8 <updateMorseBinary+0x9c>
		}

		/* Otherwise make the space seven time-units */
		else {
			shift += MORSE_7;
 8002fa2:	7ffb      	ldrb	r3, [r7, #31]
 8002fa4:	3307      	adds	r3, #7
 8002fa6:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < 3; i++) {
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	3301      	adds	r3, #1
 8002fac:	61bb      	str	r3, [r7, #24]
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	ddbe      	ble.n	8002f32 <updateMorseBinary+0x26>
		}
	}

	/* Create the binary mask */
	memset(state3_vars.morseMaskArray, 1, shift);
 8002fb4:	7ffb      	ldrb	r3, [r7, #31]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	2101      	movs	r1, #1
 8002fba:	4804      	ldr	r0, [pc, #16]	; (8002fcc <updateMorseBinary+0xc0>)
 8002fbc:	f007 fdce 	bl	800ab5c <memset>
}
 8002fc0:	bf00      	nop
 8002fc2:	3720      	adds	r7, #32
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20005261 	.word	0x20005261
 8002fcc:	200052c5 	.word	0x200052c5
 8002fd0:	0800abd4 	.word	0x0800abd4
 8002fd4:	20005250 	.word	0x20005250

08002fd8 <STATE1_ApplySettings>:

} STATE1_VARS;

static STATE1_VARS state1_vars;

void STATE1_ApplySettings(){
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0

	uint32_t val =   ((state1_vars.ledIntensity)*INPUT_MAX)/512;
 8002fde:	4b20      	ldr	r3, [pc, #128]	; (8003060 <STATE1_ApplySettings+0x88>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fd fa3a 	bl	800045c <__aeabi_ui2d>
 8002fe8:	a31b      	add	r3, pc, #108	; (adr r3, 8003058 <STATE1_ApplySettings+0x80>)
 8002fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fee:	f7fd faaf 	bl	8000550 <__aeabi_dmul>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8003002:	f7fd fbcf 	bl	80007a4 <__aeabi_ddiv>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4610      	mov	r0, r2
 800300c:	4619      	mov	r1, r3
 800300e:	f7fd fcb1 	bl	8000974 <__aeabi_d2uiz>
 8003012:	4603      	mov	r3, r0
 8003014:	607b      	str	r3, [r7, #4]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, val);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	2100      	movs	r1, #0
 800301c:	4811      	ldr	r0, [pc, #68]	; (8003064 <STATE1_ApplySettings+0x8c>)
 800301e:	f002 fb4e 	bl	80056be <HAL_DAC_SetValue>
	TIM2->CCR3 = (state1_vars.ledIntensity*1999)/512;
 8003022:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <STATE1_ApplySettings+0x88>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800302a:	fb02 f303 	mul.w	r3, r2, r3
 800302e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003032:	0a5b      	lsrs	r3, r3, #9
 8003034:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM2->CCR2 = (state1_vars.ledIntensity*1999)/512;
 8003036:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <STATE1_ApplySettings+0x88>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800303e:	fb02 f303 	mul.w	r3, r2, r3
 8003042:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003046:	0a5b      	lsrs	r3, r3, #9
 8003048:	6393      	str	r3, [r2, #56]	; 0x38
}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	f3af 8000 	nop.w
 8003058:	00000000 	.word	0x00000000
 800305c:	40affe00 	.word	0x40affe00
 8003060:	2000533c 	.word	0x2000533c
 8003064:	20004f58 	.word	0x20004f58

08003068 <STATE1_OnEnter>:





void STATE1_OnEnter(){
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
	state1_vars.ledIntensity = 0;
 800306c:	4b0d      	ldr	r3, [pc, #52]	; (80030a4 <STATE1_OnEnter+0x3c>)
 800306e:	2200      	movs	r2, #0
 8003070:	605a      	str	r2, [r3, #4]
	state1_vars.storedLedIntensity = 512;
 8003072:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <STATE1_OnEnter+0x3c>)
 8003074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003078:	60da      	str	r2, [r3, #12]
	state1_vars.isActive = 1;
 800307a:	4b0a      	ldr	r3, [pc, #40]	; (80030a4 <STATE1_OnEnter+0x3c>)
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
	//turn on gpio light 1 (pin PA6)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8003080:	2201      	movs	r2, #1
 8003082:	2140      	movs	r1, #64	; 0x40
 8003084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003088:	f002 fdf0 	bl	8005c6c <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800308c:	2108      	movs	r1, #8
 800308e:	4806      	ldr	r0, [pc, #24]	; (80030a8 <STATE1_OnEnter+0x40>)
 8003090:	f005 f980 	bl	8008394 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8003094:	2104      	movs	r1, #4
 8003096:	4804      	ldr	r0, [pc, #16]	; (80030a8 <STATE1_OnEnter+0x40>)
 8003098:	f005 f97c 	bl	8008394 <HAL_TIM_PWM_Start>
	STATE1_ApplySettings();
 800309c:	f7ff ff9c 	bl	8002fd8 <STATE1_ApplySettings>



}
 80030a0:	bf00      	nop
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	2000533c 	.word	0x2000533c
 80030a8:	2000500c 	.word	0x2000500c

080030ac <STATE1_OnExit>:


void STATE1_OnExit(){
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80030b0:	2200      	movs	r2, #0
 80030b2:	2140      	movs	r1, #64	; 0x40
 80030b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030b8:	f002 fdd8 	bl	8005c6c <HAL_GPIO_WritePin>
	//turn on gpio light 1 (pin PA6)
	state1_vars.isActive = 0;
 80030bc:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <STATE1_OnExit+0x38>)
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80030c2:	2300      	movs	r3, #0
 80030c4:	2200      	movs	r2, #0
 80030c6:	2100      	movs	r1, #0
 80030c8:	4807      	ldr	r0, [pc, #28]	; (80030e8 <STATE1_OnExit+0x3c>)
 80030ca:	f002 faf8 	bl	80056be <HAL_DAC_SetValue>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80030ce:	2108      	movs	r1, #8
 80030d0:	4806      	ldr	r0, [pc, #24]	; (80030ec <STATE1_OnExit+0x40>)
 80030d2:	f005 fa6b 	bl	80085ac <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80030d6:	2104      	movs	r1, #4
 80030d8:	4804      	ldr	r0, [pc, #16]	; (80030ec <STATE1_OnExit+0x40>)
 80030da:	f005 fa67 	bl	80085ac <HAL_TIM_PWM_Stop>

}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	2000533c 	.word	0x2000533c
 80030e8:	20004f58 	.word	0x20004f58
 80030ec:	2000500c 	.word	0x2000500c

080030f0 <STATE1_SetConfig>:
 * config[16] :,
 * config[17-18] $\n,
*/


void STATE1_SetConfig(uint8_t *status){
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
	if(status[1] != ':' ||  status[4] != ':' || status[8] != ':' || status[9] != '0' || status[10] != '0' || status[11] != '0' ||
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3301      	adds	r3, #1
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b3a      	cmp	r3, #58	; 0x3a
 8003100:	d16c      	bne.n	80031dc <STATE1_SetConfig+0xec>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3304      	adds	r3, #4
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b3a      	cmp	r3, #58	; 0x3a
 800310a:	d167      	bne.n	80031dc <STATE1_SetConfig+0xec>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3308      	adds	r3, #8
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b3a      	cmp	r3, #58	; 0x3a
 8003114:	d162      	bne.n	80031dc <STATE1_SetConfig+0xec>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3309      	adds	r3, #9
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b30      	cmp	r3, #48	; 0x30
 800311e:	d15d      	bne.n	80031dc <STATE1_SetConfig+0xec>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	330a      	adds	r3, #10
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b30      	cmp	r3, #48	; 0x30
 8003128:	d158      	bne.n	80031dc <STATE1_SetConfig+0xec>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	330b      	adds	r3, #11
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b30      	cmp	r3, #48	; 0x30
 8003132:	d153      	bne.n	80031dc <STATE1_SetConfig+0xec>
			status[12] != ':' || status[13] != '0' || status[14] != '0' || status[15] != '0' || status[16] != ':' || status[17] != '$' ||
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	330c      	adds	r3, #12
 8003138:	781b      	ldrb	r3, [r3, #0]
	if(status[1] != ':' ||  status[4] != ':' || status[8] != ':' || status[9] != '0' || status[10] != '0' || status[11] != '0' ||
 800313a:	2b3a      	cmp	r3, #58	; 0x3a
 800313c:	d14e      	bne.n	80031dc <STATE1_SetConfig+0xec>
			status[12] != ':' || status[13] != '0' || status[14] != '0' || status[15] != '0' || status[16] != ':' || status[17] != '$' ||
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	330d      	adds	r3, #13
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b30      	cmp	r3, #48	; 0x30
 8003146:	d149      	bne.n	80031dc <STATE1_SetConfig+0xec>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	330e      	adds	r3, #14
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b30      	cmp	r3, #48	; 0x30
 8003150:	d144      	bne.n	80031dc <STATE1_SetConfig+0xec>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	330f      	adds	r3, #15
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b30      	cmp	r3, #48	; 0x30
 800315a:	d13f      	bne.n	80031dc <STATE1_SetConfig+0xec>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3310      	adds	r3, #16
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b3a      	cmp	r3, #58	; 0x3a
 8003164:	d13a      	bne.n	80031dc <STATE1_SetConfig+0xec>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3311      	adds	r3, #17
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b24      	cmp	r3, #36	; 0x24
 800316e:	d135      	bne.n	80031dc <STATE1_SetConfig+0xec>
			status[18] != '\n'){
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3312      	adds	r3, #18
 8003174:	781b      	ldrb	r3, [r3, #0]
			status[12] != ':' || status[13] != '0' || status[14] != '0' || status[15] != '0' || status[16] != ':' || status[17] != '$' ||
 8003176:	2b0a      	cmp	r3, #10
 8003178:	d130      	bne.n	80031dc <STATE1_SetConfig+0xec>





	uint16_t intensity = (status[5]-0x30)*100 + (status[6]-0x30)*10 + (status[7]-0x30);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3305      	adds	r3, #5
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	3b30      	subs	r3, #48	; 0x30
 8003182:	b29b      	uxth	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	0092      	lsls	r2, r2, #2
 8003188:	4413      	add	r3, r2
 800318a:	461a      	mov	r2, r3
 800318c:	0091      	lsls	r1, r2, #2
 800318e:	461a      	mov	r2, r3
 8003190:	460b      	mov	r3, r1
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	b29a      	uxth	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3306      	adds	r3, #6
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	3b30      	subs	r3, #48	; 0x30
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	4619      	mov	r1, r3
 80031a4:	0089      	lsls	r1, r1, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	4413      	add	r3, r2
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3307      	adds	r3, #7
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b30      	subs	r3, #48	; 0x30
 80031be:	81fb      	strh	r3, [r7, #14]


	//if for intensity range
	if(intensity < 513 && intensity >= 0)
 80031c0:	89fb      	ldrh	r3, [r7, #14]
 80031c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031c6:	d802      	bhi.n	80031ce <STATE1_SetConfig+0xde>
	{
	state1_vars.ledIntensity = intensity;
 80031c8:	89fb      	ldrh	r3, [r7, #14]
 80031ca:	4a06      	ldr	r2, [pc, #24]	; (80031e4 <STATE1_SetConfig+0xf4>)
 80031cc:	6053      	str	r3, [r2, #4]
	}

	if(state1_vars.isActive == 1){
 80031ce:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <STATE1_SetConfig+0xf4>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d103      	bne.n	80031de <STATE1_SetConfig+0xee>

		STATE1_ApplySettings();
 80031d6:	f7ff feff 	bl	8002fd8 <STATE1_ApplySettings>
 80031da:	e000      	b.n	80031de <STATE1_SetConfig+0xee>
		return;
 80031dc:	bf00      	nop

	}
}
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	2000533c 	.word	0x2000533c

080031e8 <STATE1_GetConfig>:

void STATE1_GetConfig(uint8_t *config){
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
	config[0] = '#';
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2223      	movs	r2, #35	; 0x23
 80031f4:	701a      	strb	r2, [r3, #0]
	config[1] = ':';
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3301      	adds	r3, #1
 80031fa:	223a      	movs	r2, #58	; 0x3a
 80031fc:	701a      	strb	r2, [r3, #0]
	config[2] = 'M';
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3302      	adds	r3, #2
 8003202:	224d      	movs	r2, #77	; 0x4d
 8003204:	701a      	strb	r2, [r3, #0]
	config[3] = 'F';
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3303      	adds	r3, #3
 800320a:	2246      	movs	r2, #70	; 0x46
 800320c:	701a      	strb	r2, [r3, #0]
	config[4] = ':';
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3304      	adds	r3, #4
 8003212:	223a      	movs	r2, #58	; 0x3a
 8003214:	701a      	strb	r2, [r3, #0]
	config[5] = ((state1_vars.ledIntensity)/100) + 0x30;
 8003216:	4b35      	ldr	r3, [pc, #212]	; (80032ec <STATE1_GetConfig+0x104>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	4a35      	ldr	r2, [pc, #212]	; (80032f0 <STATE1_GetConfig+0x108>)
 800321c:	fba2 2303 	umull	r2, r3, r2, r3
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	b2da      	uxtb	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3305      	adds	r3, #5
 8003228:	3230      	adds	r2, #48	; 0x30
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	701a      	strb	r2, [r3, #0]
	config[6] = (((state1_vars.ledIntensity) - (((state1_vars.ledIntensity)/100)*100)))/10 + 0x30;
 800322e:	4b2f      	ldr	r3, [pc, #188]	; (80032ec <STATE1_GetConfig+0x104>)
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	4b2f      	ldr	r3, [pc, #188]	; (80032f0 <STATE1_GetConfig+0x108>)
 8003234:	fba3 1302 	umull	r1, r3, r3, r2
 8003238:	095b      	lsrs	r3, r3, #5
 800323a:	2164      	movs	r1, #100	; 0x64
 800323c:	fb01 f303 	mul.w	r3, r1, r3
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	4a2c      	ldr	r2, [pc, #176]	; (80032f4 <STATE1_GetConfig+0x10c>)
 8003244:	fba2 2303 	umull	r2, r3, r2, r3
 8003248:	08db      	lsrs	r3, r3, #3
 800324a:	b2da      	uxtb	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3306      	adds	r3, #6
 8003250:	3230      	adds	r2, #48	; 0x30
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]
	config[7] = ((state1_vars.ledIntensity) - (((state1_vars.ledIntensity)/100)*100)) - (((((state1_vars.ledIntensity)-(((state1_vars.ledIntensity)/100)*100))/10)*10)) + 0x30;
 8003256:	4b25      	ldr	r3, [pc, #148]	; (80032ec <STATE1_GetConfig+0x104>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4a25      	ldr	r2, [pc, #148]	; (80032f0 <STATE1_GetConfig+0x108>)
 800325c:	fba2 1203 	umull	r1, r2, r2, r3
 8003260:	0952      	lsrs	r2, r2, #5
 8003262:	2164      	movs	r1, #100	; 0x64
 8003264:	fb01 f202 	mul.w	r2, r1, r2
 8003268:	1a9a      	subs	r2, r3, r2
 800326a:	4b22      	ldr	r3, [pc, #136]	; (80032f4 <STATE1_GetConfig+0x10c>)
 800326c:	fba3 1302 	umull	r1, r3, r3, r2
 8003270:	08d9      	lsrs	r1, r3, #3
 8003272:	460b      	mov	r3, r1
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	1ad1      	subs	r1, r2, r3
 800327c:	b2ca      	uxtb	r2, r1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3307      	adds	r3, #7
 8003282:	3230      	adds	r2, #48	; 0x30
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]
	config[8] = ':';
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3308      	adds	r3, #8
 800328c:	223a      	movs	r2, #58	; 0x3a
 800328e:	701a      	strb	r2, [r3, #0]
	config[9] = '0';
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3309      	adds	r3, #9
 8003294:	2230      	movs	r2, #48	; 0x30
 8003296:	701a      	strb	r2, [r3, #0]
	config[10] = '0';
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	330a      	adds	r3, #10
 800329c:	2230      	movs	r2, #48	; 0x30
 800329e:	701a      	strb	r2, [r3, #0]
	config[11] = '0';
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	330b      	adds	r3, #11
 80032a4:	2230      	movs	r2, #48	; 0x30
 80032a6:	701a      	strb	r2, [r3, #0]
	config[12] = ':';
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	330c      	adds	r3, #12
 80032ac:	223a      	movs	r2, #58	; 0x3a
 80032ae:	701a      	strb	r2, [r3, #0]
	config[13] = '0';
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	330d      	adds	r3, #13
 80032b4:	2230      	movs	r2, #48	; 0x30
 80032b6:	701a      	strb	r2, [r3, #0]
	config[14] = '0';
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	330e      	adds	r3, #14
 80032bc:	2230      	movs	r2, #48	; 0x30
 80032be:	701a      	strb	r2, [r3, #0]
	config[15] = '0';
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	330f      	adds	r3, #15
 80032c4:	2230      	movs	r2, #48	; 0x30
 80032c6:	701a      	strb	r2, [r3, #0]
	config[16] = ':';
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3310      	adds	r3, #16
 80032cc:	223a      	movs	r2, #58	; 0x3a
 80032ce:	701a      	strb	r2, [r3, #0]
	config[17] = '$';
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3311      	adds	r3, #17
 80032d4:	2224      	movs	r2, #36	; 0x24
 80032d6:	701a      	strb	r2, [r3, #0]
	config[18] = '\n';
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3312      	adds	r3, #18
 80032dc:	220a      	movs	r2, #10
 80032de:	701a      	strb	r2, [r3, #0]

}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	2000533c 	.word	0x2000533c
 80032f0:	51eb851f 	.word	0x51eb851f
 80032f4:	cccccccd 	.word	0xcccccccd

080032f8 <STATE1_OnInit>:

void STATE1_OnInit(){
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0

	state1_vars.isActive = 0;
 80032fc:	4b06      	ldr	r3, [pc, #24]	; (8003318 <STATE1_OnInit+0x20>)
 80032fe:	2200      	movs	r2, #0
 8003300:	701a      	strb	r2, [r3, #0]
	state1_vars.ledState = 0;
 8003302:	4b05      	ldr	r3, [pc, #20]	; (8003318 <STATE1_OnInit+0x20>)
 8003304:	2200      	movs	r2, #0
 8003306:	721a      	strb	r2, [r3, #8]
	state1_vars.ledIntensity = 0;
 8003308:	4b03      	ldr	r3, [pc, #12]	; (8003318 <STATE1_OnInit+0x20>)
 800330a:	2200      	movs	r2, #0
 800330c:	605a      	str	r2, [r3, #4]



}
 800330e:	bf00      	nop
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	2000533c 	.word	0x2000533c

0800331c <STATE1_OnButtonEvt>:


void STATE1_OnButtonEvt(uint8_t button, uint8_t buttonState){
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	460a      	mov	r2, r1
 8003326:	71fb      	strb	r3, [r7, #7]
 8003328:	4613      	mov	r3, r2
 800332a:	71bb      	strb	r3, [r7, #6]

	if(button == BTN_MIDDLE && buttonState == BTN_STATE_PRESSED)
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d114      	bne.n	800335c <STATE1_OnButtonEvt+0x40>
 8003332:	79bb      	ldrb	r3, [r7, #6]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d111      	bne.n	800335c <STATE1_OnButtonEvt+0x40>
	{
		if(state1_vars.ledIntensity>0){
 8003338:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <STATE1_OnButtonEvt+0x48>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d007      	beq.n	8003350 <STATE1_OnButtonEvt+0x34>
			state1_vars.storedLedIntensity = state1_vars.ledIntensity;
 8003340:	4b08      	ldr	r3, [pc, #32]	; (8003364 <STATE1_OnButtonEvt+0x48>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4a07      	ldr	r2, [pc, #28]	; (8003364 <STATE1_OnButtonEvt+0x48>)
 8003346:	60d3      	str	r3, [r2, #12]
			state1_vars.ledIntensity = 0;
 8003348:	4b06      	ldr	r3, [pc, #24]	; (8003364 <STATE1_OnButtonEvt+0x48>)
 800334a:	2200      	movs	r2, #0
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	e003      	b.n	8003358 <STATE1_OnButtonEvt+0x3c>

		} else {
			state1_vars.ledIntensity = state1_vars.storedLedIntensity;
 8003350:	4b04      	ldr	r3, [pc, #16]	; (8003364 <STATE1_OnButtonEvt+0x48>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4a03      	ldr	r2, [pc, #12]	; (8003364 <STATE1_OnButtonEvt+0x48>)
 8003356:	6053      	str	r3, [r2, #4]
		}
		STATE1_ApplySettings();
 8003358:	f7ff fe3e 	bl	8002fd8 <STATE1_ApplySettings>
	}


}
 800335c:	bf00      	nop
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	2000533c 	.word	0x2000533c

08003368 <STATE1_OnHold>:

void STATE1_OnHold(){
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0

	if(state1_vars.ledIntensity>0){
 800336c:	4b09      	ldr	r3, [pc, #36]	; (8003394 <STATE1_OnHold+0x2c>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d007      	beq.n	8003384 <STATE1_OnHold+0x1c>
		state1_vars.storedLedIntensity = state1_vars.ledIntensity;
 8003374:	4b07      	ldr	r3, [pc, #28]	; (8003394 <STATE1_OnHold+0x2c>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	4a06      	ldr	r2, [pc, #24]	; (8003394 <STATE1_OnHold+0x2c>)
 800337a:	60d3      	str	r3, [r2, #12]
		state1_vars.ledIntensity = 0;
 800337c:	4b05      	ldr	r3, [pc, #20]	; (8003394 <STATE1_OnHold+0x2c>)
 800337e:	2200      	movs	r2, #0
 8003380:	605a      	str	r2, [r3, #4]
 8003382:	e003      	b.n	800338c <STATE1_OnHold+0x24>
	} else {
		state1_vars.ledIntensity = state1_vars.storedLedIntensity;
 8003384:	4b03      	ldr	r3, [pc, #12]	; (8003394 <STATE1_OnHold+0x2c>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4a02      	ldr	r2, [pc, #8]	; (8003394 <STATE1_OnHold+0x2c>)
 800338a:	6053      	str	r3, [r2, #4]
	}
	STATE1_ApplySettings();
 800338c:	f7ff fe24 	bl	8002fd8 <STATE1_ApplySettings>

}
 8003390:	bf00      	nop
 8003392:	bd80      	pop	{r7, pc}
 8003394:	2000533c 	.word	0x2000533c

08003398 <STATE1_SliderVal>:

void STATE1_SliderVal(uint32_t sliderValue){
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]

	state1_vars.ledIntensity = sliderValue;
 80033a0:	4a04      	ldr	r2, [pc, #16]	; (80033b4 <STATE1_SliderVal+0x1c>)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6053      	str	r3, [r2, #4]
	STATE1_ApplySettings();
 80033a6:	f7ff fe17 	bl	8002fd8 <STATE1_ApplySettings>
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	2000533c 	.word	0x2000533c

080033b8 <STATE1_Housekeep>:

void STATE1_Housekeep(){
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0



}
 80033bc:	bf00      	nop
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <STATE1_OnTap>:

void STATE1_OnTap(uint16_t tapX, uint16_t tapY){
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	4603      	mov	r3, r0
 80033ce:	460a      	mov	r2, r1
 80033d0:	80fb      	strh	r3, [r7, #6]
 80033d2:	4613      	mov	r3, r2
 80033d4:	80bb      	strh	r3, [r7, #4]




}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
	...

080033e4 <STATE1_OnSlide>:

void STATE1_OnSlide(uint16_t currentXCoord){
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	80fb      	strh	r3, [r7, #6]

	STATE1_SetIntensity((currentXCoord*512)/1792);
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	025b      	lsls	r3, r3, #9
 80033f2:	4a07      	ldr	r2, [pc, #28]	; (8003410 <STATE1_OnSlide+0x2c>)
 80033f4:	fb82 1203 	smull	r1, r2, r2, r3
 80033f8:	441a      	add	r2, r3
 80033fa:	1292      	asrs	r2, r2, #10
 80033fc:	17db      	asrs	r3, r3, #31
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	b29b      	uxth	r3, r3
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f80e 	bl	8003424 <STATE1_SetIntensity>

}
 8003408:	bf00      	nop
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	92492493 	.word	0x92492493

08003414 <STATE1_OnEnterUart>:
void STATE1_OnEnterUart(){
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0


}
 8003418:	bf00      	nop
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <STATE1_SetIntensity>:


void STATE1_SetIntensity(uint16_t newIntensity){
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	80fb      	strh	r3, [r7, #6]

	state1_vars.ledIntensity = newIntensity;
 800342e:	88fb      	ldrh	r3, [r7, #6]
 8003430:	4a03      	ldr	r2, [pc, #12]	; (8003440 <STATE1_SetIntensity+0x1c>)
 8003432:	6053      	str	r3, [r2, #4]
	STATE1_ApplySettings();
 8003434:	f7ff fdd0 	bl	8002fd8 <STATE1_ApplySettings>
}
 8003438:	bf00      	nop
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	2000533c 	.word	0x2000533c

08003444 <STATE2_OnEnter>:

} STATE2_VARS;

STATE2_VARS state2_vars;

void STATE2_OnEnter(){
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0


	//turn on gpio light 1 (pin PA6)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8003448:	2201      	movs	r2, #1
 800344a:	2180      	movs	r1, #128	; 0x80
 800344c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003450:	f002 fc0c 	bl	8005c6c <HAL_GPIO_WritePin>
	state2_vars.isActive = 1;
 8003454:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <STATE2_OnEnter+0x44>)
 8003456:	2201      	movs	r2, #1
 8003458:	701a      	strb	r2, [r3, #0]
	state2_vars.rgbState = 0;
 800345a:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <STATE2_OnEnter+0x44>)
 800345c:	2200      	movs	r2, #0
 800345e:	705a      	strb	r2, [r3, #1]
	state2_vars.prevRedVal = 128;
 8003460:	4b09      	ldr	r3, [pc, #36]	; (8003488 <STATE2_OnEnter+0x44>)
 8003462:	2280      	movs	r2, #128	; 0x80
 8003464:	811a      	strh	r2, [r3, #8]
	state2_vars.prevGreenVal = 128;
 8003466:	4b08      	ldr	r3, [pc, #32]	; (8003488 <STATE2_OnEnter+0x44>)
 8003468:	2280      	movs	r2, #128	; 0x80
 800346a:	815a      	strh	r2, [r3, #10]
	state2_vars.prevBlueVal = 128;
 800346c:	4b06      	ldr	r3, [pc, #24]	; (8003488 <STATE2_OnEnter+0x44>)
 800346e:	2280      	movs	r2, #128	; 0x80
 8003470:	819a      	strh	r2, [r3, #12]
	state2_vars.redVal = 0;
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <STATE2_OnEnter+0x44>)
 8003474:	2200      	movs	r2, #0
 8003476:	805a      	strh	r2, [r3, #2]
	state2_vars.greenVal = 0;
 8003478:	4b03      	ldr	r3, [pc, #12]	; (8003488 <STATE2_OnEnter+0x44>)
 800347a:	2200      	movs	r2, #0
 800347c:	809a      	strh	r2, [r3, #4]
	state2_vars.blueVal = 0;
 800347e:	4b02      	ldr	r3, [pc, #8]	; (8003488 <STATE2_OnEnter+0x44>)
 8003480:	2200      	movs	r2, #0
 8003482:	80da      	strh	r2, [r3, #6]

}
 8003484:	bf00      	nop
 8003486:	bd80      	pop	{r7, pc}
 8003488:	2000534c 	.word	0x2000534c

0800348c <STATE2_OnEnterUart>:

void STATE2_OnEnterUart(){
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0


}
 8003490:	bf00      	nop
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
	...

0800349c <STATE2_OnExit>:

void STATE2_OnExit(){
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80034a0:	2200      	movs	r2, #0
 80034a2:	2180      	movs	r1, #128	; 0x80
 80034a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034a8:	f002 fbe0 	bl	8005c6c <HAL_GPIO_WritePin>
	//turn on gpio light 1 (pin PA6)
	state2_vars.isActive = 0;
 80034ac:	4b07      	ldr	r3, [pc, #28]	; (80034cc <STATE2_OnExit+0x30>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	701a      	strb	r2, [r3, #0]
	state2_vars.redVal = 0;
 80034b2:	4b06      	ldr	r3, [pc, #24]	; (80034cc <STATE2_OnExit+0x30>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	805a      	strh	r2, [r3, #2]
	state2_vars.greenVal = 0;
 80034b8:	4b04      	ldr	r3, [pc, #16]	; (80034cc <STATE2_OnExit+0x30>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	809a      	strh	r2, [r3, #4]
	state2_vars.blueVal = 0;
 80034be:	4b03      	ldr	r3, [pc, #12]	; (80034cc <STATE2_OnExit+0x30>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	80da      	strh	r2, [r3, #6]
	STATE2_ApplySettings();
 80034c4:	f000 fa24 	bl	8003910 <STATE2_ApplySettings>


}
 80034c8:	bf00      	nop
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	2000534c 	.word	0x2000534c

080034d0 <STATE2_OnButtonEvt>:

void STATE2_OnButtonEvt(uint8_t button, uint8_t buttonState){
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	460a      	mov	r2, r1
 80034da:	71fb      	strb	r3, [r7, #7]
 80034dc:	4613      	mov	r3, r2
 80034de:	71bb      	strb	r3, [r7, #6]

	if(button == BTN_MIDDLE && buttonState == BTN_STATE_PRESSED)
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d132      	bne.n	800354c <STATE2_OnButtonEvt+0x7c>
 80034e6:	79bb      	ldrb	r3, [r7, #6]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d12f      	bne.n	800354c <STATE2_OnButtonEvt+0x7c>
		{

			if(state2_vars.isActive == 1 && state2_vars.rgbState == 1){
 80034ec:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <STATE2_OnButtonEvt+0x88>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d11c      	bne.n	800352e <STATE2_OnButtonEvt+0x5e>
 80034f4:	4b18      	ldr	r3, [pc, #96]	; (8003558 <STATE2_OnButtonEvt+0x88>)
 80034f6:	785b      	ldrb	r3, [r3, #1]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d118      	bne.n	800352e <STATE2_OnButtonEvt+0x5e>

				state2_vars.prevRedVal = state2_vars.redVal;
 80034fc:	4b16      	ldr	r3, [pc, #88]	; (8003558 <STATE2_OnButtonEvt+0x88>)
 80034fe:	885a      	ldrh	r2, [r3, #2]
 8003500:	4b15      	ldr	r3, [pc, #84]	; (8003558 <STATE2_OnButtonEvt+0x88>)
 8003502:	811a      	strh	r2, [r3, #8]
				state2_vars.prevGreenVal = state2_vars.greenVal;
 8003504:	4b14      	ldr	r3, [pc, #80]	; (8003558 <STATE2_OnButtonEvt+0x88>)
 8003506:	889a      	ldrh	r2, [r3, #4]
 8003508:	4b13      	ldr	r3, [pc, #76]	; (8003558 <STATE2_OnButtonEvt+0x88>)
 800350a:	815a      	strh	r2, [r3, #10]
				state2_vars.prevBlueVal = state2_vars.blueVal;
 800350c:	4b12      	ldr	r3, [pc, #72]	; (8003558 <STATE2_OnButtonEvt+0x88>)
 800350e:	88da      	ldrh	r2, [r3, #6]
 8003510:	4b11      	ldr	r3, [pc, #68]	; (8003558 <STATE2_OnButtonEvt+0x88>)
 8003512:	819a      	strh	r2, [r3, #12]

				state2_vars.blueVal = 0;
 8003514:	4b10      	ldr	r3, [pc, #64]	; (8003558 <STATE2_OnButtonEvt+0x88>)
 8003516:	2200      	movs	r2, #0
 8003518:	80da      	strh	r2, [r3, #6]
				state2_vars.greenVal = 0;
 800351a:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <STATE2_OnButtonEvt+0x88>)
 800351c:	2200      	movs	r2, #0
 800351e:	809a      	strh	r2, [r3, #4]
				state2_vars.redVal = 0;
 8003520:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <STATE2_OnButtonEvt+0x88>)
 8003522:	2200      	movs	r2, #0
 8003524:	805a      	strh	r2, [r3, #2]
				state2_vars.rgbState = 0;
 8003526:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <STATE2_OnButtonEvt+0x88>)
 8003528:	2200      	movs	r2, #0
 800352a:	705a      	strb	r2, [r3, #1]
 800352c:	e00e      	b.n	800354c <STATE2_OnButtonEvt+0x7c>

			} else {
				state2_vars.redVal = state2_vars.prevRedVal;
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <STATE2_OnButtonEvt+0x88>)
 8003530:	891a      	ldrh	r2, [r3, #8]
 8003532:	4b09      	ldr	r3, [pc, #36]	; (8003558 <STATE2_OnButtonEvt+0x88>)
 8003534:	805a      	strh	r2, [r3, #2]
				state2_vars.greenVal = state2_vars.prevGreenVal;
 8003536:	4b08      	ldr	r3, [pc, #32]	; (8003558 <STATE2_OnButtonEvt+0x88>)
 8003538:	895a      	ldrh	r2, [r3, #10]
 800353a:	4b07      	ldr	r3, [pc, #28]	; (8003558 <STATE2_OnButtonEvt+0x88>)
 800353c:	809a      	strh	r2, [r3, #4]
				state2_vars.blueVal = state2_vars.prevBlueVal;
 800353e:	4b06      	ldr	r3, [pc, #24]	; (8003558 <STATE2_OnButtonEvt+0x88>)
 8003540:	899a      	ldrh	r2, [r3, #12]
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <STATE2_OnButtonEvt+0x88>)
 8003544:	80da      	strh	r2, [r3, #6]
				state2_vars.rgbState = 1;
 8003546:	4b04      	ldr	r3, [pc, #16]	; (8003558 <STATE2_OnButtonEvt+0x88>)
 8003548:	2201      	movs	r2, #1
 800354a:	705a      	strb	r2, [r3, #1]
			}

		}
	STATE2_ApplySettings();
 800354c:	f000 f9e0 	bl	8003910 <STATE2_ApplySettings>

}
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	2000534c 	.word	0x2000534c

0800355c <STATE2_OnInit>:

void STATE2_OnInit(){
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
	state2_vars.isActive = 0;
 8003560:	4b0e      	ldr	r3, [pc, #56]	; (800359c <STATE2_OnInit+0x40>)
 8003562:	2200      	movs	r2, #0
 8003564:	701a      	strb	r2, [r3, #0]
	state2_vars.rgbState = 0;
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <STATE2_OnInit+0x40>)
 8003568:	2200      	movs	r2, #0
 800356a:	705a      	strb	r2, [r3, #1]
	state2_vars.prevRedVal = 128;
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <STATE2_OnInit+0x40>)
 800356e:	2280      	movs	r2, #128	; 0x80
 8003570:	811a      	strh	r2, [r3, #8]
	state2_vars.prevGreenVal = 128;
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <STATE2_OnInit+0x40>)
 8003574:	2280      	movs	r2, #128	; 0x80
 8003576:	815a      	strh	r2, [r3, #10]
	state2_vars.prevBlueVal = 128;
 8003578:	4b08      	ldr	r3, [pc, #32]	; (800359c <STATE2_OnInit+0x40>)
 800357a:	2280      	movs	r2, #128	; 0x80
 800357c:	819a      	strh	r2, [r3, #12]
	state2_vars.redVal = 0;
 800357e:	4b07      	ldr	r3, [pc, #28]	; (800359c <STATE2_OnInit+0x40>)
 8003580:	2200      	movs	r2, #0
 8003582:	805a      	strh	r2, [r3, #2]
	state2_vars.greenVal = 0;
 8003584:	4b05      	ldr	r3, [pc, #20]	; (800359c <STATE2_OnInit+0x40>)
 8003586:	2200      	movs	r2, #0
 8003588:	809a      	strh	r2, [r3, #4]
	state2_vars.blueVal = 0;
 800358a:	4b04      	ldr	r3, [pc, #16]	; (800359c <STATE2_OnInit+0x40>)
 800358c:	2200      	movs	r2, #0
 800358e:	80da      	strh	r2, [r3, #6]

}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	2000534c 	.word	0x2000534c

080035a0 <STATE2_SetConfig>:

void STATE2_SetConfig(uint8_t *status){
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	if(status[1] != ':' ||  status[4] != ':' || status[8] != ':' ||	status[12] != ':' || status[16] != ':' || status[17] != '$' || status[18] != '\n'){
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3301      	adds	r3, #1
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b3a      	cmp	r3, #58	; 0x3a
 80035b0:	f040 80ab 	bne.w	800370a <STATE2_SetConfig+0x16a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3304      	adds	r3, #4
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b3a      	cmp	r3, #58	; 0x3a
 80035bc:	f040 80a5 	bne.w	800370a <STATE2_SetConfig+0x16a>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3308      	adds	r3, #8
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b3a      	cmp	r3, #58	; 0x3a
 80035c8:	f040 809f 	bne.w	800370a <STATE2_SetConfig+0x16a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	330c      	adds	r3, #12
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b3a      	cmp	r3, #58	; 0x3a
 80035d4:	f040 8099 	bne.w	800370a <STATE2_SetConfig+0x16a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3310      	adds	r3, #16
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b3a      	cmp	r3, #58	; 0x3a
 80035e0:	f040 8093 	bne.w	800370a <STATE2_SetConfig+0x16a>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3311      	adds	r3, #17
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b24      	cmp	r3, #36	; 0x24
 80035ec:	f040 808d 	bne.w	800370a <STATE2_SetConfig+0x16a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3312      	adds	r3, #18
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b0a      	cmp	r3, #10
 80035f8:	f040 8087 	bne.w	800370a <STATE2_SetConfig+0x16a>





		uint16_t red = (status[5]-0x30)*100 + (status[6]-0x30)*10 + (status[7]-0x30);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3305      	adds	r3, #5
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	3b30      	subs	r3, #48	; 0x30
 8003604:	b29b      	uxth	r3, r3
 8003606:	461a      	mov	r2, r3
 8003608:	0092      	lsls	r2, r2, #2
 800360a:	4413      	add	r3, r2
 800360c:	461a      	mov	r2, r3
 800360e:	0091      	lsls	r1, r2, #2
 8003610:	461a      	mov	r2, r3
 8003612:	460b      	mov	r3, r1
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	b29a      	uxth	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3306      	adds	r3, #6
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	3b30      	subs	r3, #48	; 0x30
 8003622:	b29b      	uxth	r3, r3
 8003624:	4619      	mov	r1, r3
 8003626:	0089      	lsls	r1, r1, #2
 8003628:	440b      	add	r3, r1
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	b29b      	uxth	r3, r3
 800362e:	4413      	add	r3, r2
 8003630:	b29a      	uxth	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3307      	adds	r3, #7
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	b29b      	uxth	r3, r3
 800363a:	4413      	add	r3, r2
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b30      	subs	r3, #48	; 0x30
 8003640:	81fb      	strh	r3, [r7, #14]
		uint16_t green = (status[9]-0x30)*100 + (status[10]-0x30)*10 + (status[11]-0x30);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3309      	adds	r3, #9
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	3b30      	subs	r3, #48	; 0x30
 800364a:	b29b      	uxth	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	0092      	lsls	r2, r2, #2
 8003650:	4413      	add	r3, r2
 8003652:	461a      	mov	r2, r3
 8003654:	0091      	lsls	r1, r2, #2
 8003656:	461a      	mov	r2, r3
 8003658:	460b      	mov	r3, r1
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	b29a      	uxth	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	330a      	adds	r3, #10
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	3b30      	subs	r3, #48	; 0x30
 8003668:	b29b      	uxth	r3, r3
 800366a:	4619      	mov	r1, r3
 800366c:	0089      	lsls	r1, r1, #2
 800366e:	440b      	add	r3, r1
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	b29b      	uxth	r3, r3
 8003674:	4413      	add	r3, r2
 8003676:	b29a      	uxth	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	330b      	adds	r3, #11
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	b29b      	uxth	r3, r3
 8003680:	4413      	add	r3, r2
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b30      	subs	r3, #48	; 0x30
 8003686:	81bb      	strh	r3, [r7, #12]
		uint16_t blue = (status[13]-0x30)*100 + (status[14]-0x30)*10 + (status[15]-0x30);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	330d      	adds	r3, #13
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	3b30      	subs	r3, #48	; 0x30
 8003690:	b29b      	uxth	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	0092      	lsls	r2, r2, #2
 8003696:	4413      	add	r3, r2
 8003698:	461a      	mov	r2, r3
 800369a:	0091      	lsls	r1, r2, #2
 800369c:	461a      	mov	r2, r3
 800369e:	460b      	mov	r3, r1
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	330e      	adds	r3, #14
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	3b30      	subs	r3, #48	; 0x30
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	4619      	mov	r1, r3
 80036b2:	0089      	lsls	r1, r1, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	4413      	add	r3, r2
 80036bc:	b29a      	uxth	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	330f      	adds	r3, #15
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b30      	subs	r3, #48	; 0x30
 80036cc:	817b      	strh	r3, [r7, #10]

		//if for intensity range
		if(red < 513 && red >= 0 && green < 513 && green >= 0 && blue < 513 && blue >= 0)
 80036ce:	89fb      	ldrh	r3, [r7, #14]
 80036d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d4:	d816      	bhi.n	8003704 <STATE2_SetConfig+0x164>
 80036d6:	89bb      	ldrh	r3, [r7, #12]
 80036d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036dc:	d812      	bhi.n	8003704 <STATE2_SetConfig+0x164>
 80036de:	897b      	ldrh	r3, [r7, #10]
 80036e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e4:	d80e      	bhi.n	8003704 <STATE2_SetConfig+0x164>
		{
			state2_vars.redVal = red;
 80036e6:	4a0b      	ldr	r2, [pc, #44]	; (8003714 <STATE2_SetConfig+0x174>)
 80036e8:	89fb      	ldrh	r3, [r7, #14]
 80036ea:	8053      	strh	r3, [r2, #2]
			state2_vars.greenVal = green;
 80036ec:	4a09      	ldr	r2, [pc, #36]	; (8003714 <STATE2_SetConfig+0x174>)
 80036ee:	89bb      	ldrh	r3, [r7, #12]
 80036f0:	8093      	strh	r3, [r2, #4]
			state2_vars.blueVal = blue;
 80036f2:	4a08      	ldr	r2, [pc, #32]	; (8003714 <STATE2_SetConfig+0x174>)
 80036f4:	897b      	ldrh	r3, [r7, #10]
 80036f6:	80d3      	strh	r3, [r2, #6]
			state2_vars.isActive = 1;
 80036f8:	4b06      	ldr	r3, [pc, #24]	; (8003714 <STATE2_SetConfig+0x174>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	701a      	strb	r2, [r3, #0]
			state2_vars.rgbState = 1;
 80036fe:	4b05      	ldr	r3, [pc, #20]	; (8003714 <STATE2_SetConfig+0x174>)
 8003700:	2201      	movs	r2, #1
 8003702:	705a      	strb	r2, [r3, #1]



//		if(state2_vars.isActive == 1){

			STATE2_ApplySettings();
 8003704:	f000 f904 	bl	8003910 <STATE2_ApplySettings>
 8003708:	e000      	b.n	800370c <STATE2_SetConfig+0x16c>
			return;
 800370a:	bf00      	nop

//		}

}
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	2000534c 	.word	0x2000534c

08003718 <STATE2_GetConfig>:

void STATE2_GetConfig(uint8_t *config){
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
	config[0] = '#';
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2223      	movs	r2, #35	; 0x23
 8003724:	701a      	strb	r2, [r3, #0]
	config[1] = ':';
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3301      	adds	r3, #1
 800372a:	223a      	movs	r2, #58	; 0x3a
 800372c:	701a      	strb	r2, [r3, #0]
	config[2] = 'M';
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3302      	adds	r3, #2
 8003732:	224d      	movs	r2, #77	; 0x4d
 8003734:	701a      	strb	r2, [r3, #0]
	config[3] = 'M';
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3303      	adds	r3, #3
 800373a:	224d      	movs	r2, #77	; 0x4d
 800373c:	701a      	strb	r2, [r3, #0]
	config[4] = ':';
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3304      	adds	r3, #4
 8003742:	223a      	movs	r2, #58	; 0x3a
 8003744:	701a      	strb	r2, [r3, #0]
	config[5] = ((state2_vars.redVal)/100) + 0x30;
 8003746:	4b6a      	ldr	r3, [pc, #424]	; (80038f0 <STATE2_GetConfig+0x1d8>)
 8003748:	885b      	ldrh	r3, [r3, #2]
 800374a:	4a6a      	ldr	r2, [pc, #424]	; (80038f4 <STATE2_GetConfig+0x1dc>)
 800374c:	fba2 2303 	umull	r2, r3, r2, r3
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	b29b      	uxth	r3, r3
 8003754:	b2da      	uxtb	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3305      	adds	r3, #5
 800375a:	3230      	adds	r2, #48	; 0x30
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	701a      	strb	r2, [r3, #0]
	config[6] = ((state2_vars.redVal)%100)/10 + 0x30;
 8003760:	4b63      	ldr	r3, [pc, #396]	; (80038f0 <STATE2_GetConfig+0x1d8>)
 8003762:	885b      	ldrh	r3, [r3, #2]
 8003764:	4a63      	ldr	r2, [pc, #396]	; (80038f4 <STATE2_GetConfig+0x1dc>)
 8003766:	fba2 1203 	umull	r1, r2, r2, r3
 800376a:	0952      	lsrs	r2, r2, #5
 800376c:	2164      	movs	r1, #100	; 0x64
 800376e:	fb01 f202 	mul.w	r2, r1, r2
 8003772:	1a9b      	subs	r3, r3, r2
 8003774:	b29b      	uxth	r3, r3
 8003776:	4a60      	ldr	r2, [pc, #384]	; (80038f8 <STATE2_GetConfig+0x1e0>)
 8003778:	fba2 2303 	umull	r2, r3, r2, r3
 800377c:	08db      	lsrs	r3, r3, #3
 800377e:	b29b      	uxth	r3, r3
 8003780:	b2da      	uxtb	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3306      	adds	r3, #6
 8003786:	3230      	adds	r2, #48	; 0x30
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	701a      	strb	r2, [r3, #0]
	config[7] = ((state2_vars.redVal)%100)%10 + 0x30;;
 800378c:	4b58      	ldr	r3, [pc, #352]	; (80038f0 <STATE2_GetConfig+0x1d8>)
 800378e:	885b      	ldrh	r3, [r3, #2]
 8003790:	4a58      	ldr	r2, [pc, #352]	; (80038f4 <STATE2_GetConfig+0x1dc>)
 8003792:	fba2 1203 	umull	r1, r2, r2, r3
 8003796:	0952      	lsrs	r2, r2, #5
 8003798:	2164      	movs	r1, #100	; 0x64
 800379a:	fb01 f202 	mul.w	r2, r1, r2
 800379e:	1a9b      	subs	r3, r3, r2
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	4b55      	ldr	r3, [pc, #340]	; (80038f8 <STATE2_GetConfig+0x1e0>)
 80037a4:	fba3 1302 	umull	r1, r3, r3, r2
 80037a8:	08d9      	lsrs	r1, r3, #3
 80037aa:	460b      	mov	r3, r1
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3307      	adds	r3, #7
 80037bc:	3230      	adds	r2, #48	; 0x30
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]
	config[8] = ':';
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3308      	adds	r3, #8
 80037c6:	223a      	movs	r2, #58	; 0x3a
 80037c8:	701a      	strb	r2, [r3, #0]
	config[9] = ((state2_vars.greenVal)/100) + 0x30;
 80037ca:	4b49      	ldr	r3, [pc, #292]	; (80038f0 <STATE2_GetConfig+0x1d8>)
 80037cc:	889b      	ldrh	r3, [r3, #4]
 80037ce:	4a49      	ldr	r2, [pc, #292]	; (80038f4 <STATE2_GetConfig+0x1dc>)
 80037d0:	fba2 2303 	umull	r2, r3, r2, r3
 80037d4:	095b      	lsrs	r3, r3, #5
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3309      	adds	r3, #9
 80037de:	3230      	adds	r2, #48	; 0x30
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	701a      	strb	r2, [r3, #0]
	config[10] = ((state2_vars.greenVal)%100)/10 + 0x30;
 80037e4:	4b42      	ldr	r3, [pc, #264]	; (80038f0 <STATE2_GetConfig+0x1d8>)
 80037e6:	889b      	ldrh	r3, [r3, #4]
 80037e8:	4a42      	ldr	r2, [pc, #264]	; (80038f4 <STATE2_GetConfig+0x1dc>)
 80037ea:	fba2 1203 	umull	r1, r2, r2, r3
 80037ee:	0952      	lsrs	r2, r2, #5
 80037f0:	2164      	movs	r1, #100	; 0x64
 80037f2:	fb01 f202 	mul.w	r2, r1, r2
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	4a3f      	ldr	r2, [pc, #252]	; (80038f8 <STATE2_GetConfig+0x1e0>)
 80037fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003800:	08db      	lsrs	r3, r3, #3
 8003802:	b29b      	uxth	r3, r3
 8003804:	b2da      	uxtb	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	330a      	adds	r3, #10
 800380a:	3230      	adds	r2, #48	; 0x30
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	701a      	strb	r2, [r3, #0]
	config[11] = ((state2_vars.greenVal)%100)%10 + 0x30;
 8003810:	4b37      	ldr	r3, [pc, #220]	; (80038f0 <STATE2_GetConfig+0x1d8>)
 8003812:	889b      	ldrh	r3, [r3, #4]
 8003814:	4a37      	ldr	r2, [pc, #220]	; (80038f4 <STATE2_GetConfig+0x1dc>)
 8003816:	fba2 1203 	umull	r1, r2, r2, r3
 800381a:	0952      	lsrs	r2, r2, #5
 800381c:	2164      	movs	r1, #100	; 0x64
 800381e:	fb01 f202 	mul.w	r2, r1, r2
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	b29a      	uxth	r2, r3
 8003826:	4b34      	ldr	r3, [pc, #208]	; (80038f8 <STATE2_GetConfig+0x1e0>)
 8003828:	fba3 1302 	umull	r1, r3, r3, r2
 800382c:	08d9      	lsrs	r1, r3, #3
 800382e:	460b      	mov	r3, r1
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	b29b      	uxth	r3, r3
 800383a:	b2da      	uxtb	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	330b      	adds	r3, #11
 8003840:	3230      	adds	r2, #48	; 0x30
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	701a      	strb	r2, [r3, #0]
	config[12] = ':';
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	330c      	adds	r3, #12
 800384a:	223a      	movs	r2, #58	; 0x3a
 800384c:	701a      	strb	r2, [r3, #0]
	config[13] = ((state2_vars.blueVal)/100) + 0x30;
 800384e:	4b28      	ldr	r3, [pc, #160]	; (80038f0 <STATE2_GetConfig+0x1d8>)
 8003850:	88db      	ldrh	r3, [r3, #6]
 8003852:	4a28      	ldr	r2, [pc, #160]	; (80038f4 <STATE2_GetConfig+0x1dc>)
 8003854:	fba2 2303 	umull	r2, r3, r2, r3
 8003858:	095b      	lsrs	r3, r3, #5
 800385a:	b29b      	uxth	r3, r3
 800385c:	b2da      	uxtb	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	330d      	adds	r3, #13
 8003862:	3230      	adds	r2, #48	; 0x30
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	701a      	strb	r2, [r3, #0]
	config[14] = ((state2_vars.blueVal)%100)/10 + 0x30;
 8003868:	4b21      	ldr	r3, [pc, #132]	; (80038f0 <STATE2_GetConfig+0x1d8>)
 800386a:	88db      	ldrh	r3, [r3, #6]
 800386c:	4a21      	ldr	r2, [pc, #132]	; (80038f4 <STATE2_GetConfig+0x1dc>)
 800386e:	fba2 1203 	umull	r1, r2, r2, r3
 8003872:	0952      	lsrs	r2, r2, #5
 8003874:	2164      	movs	r1, #100	; 0x64
 8003876:	fb01 f202 	mul.w	r2, r1, r2
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	b29b      	uxth	r3, r3
 800387e:	4a1e      	ldr	r2, [pc, #120]	; (80038f8 <STATE2_GetConfig+0x1e0>)
 8003880:	fba2 2303 	umull	r2, r3, r2, r3
 8003884:	08db      	lsrs	r3, r3, #3
 8003886:	b29b      	uxth	r3, r3
 8003888:	b2da      	uxtb	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	330e      	adds	r3, #14
 800388e:	3230      	adds	r2, #48	; 0x30
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	701a      	strb	r2, [r3, #0]
	config[15] = ((state2_vars.blueVal)%100)%10 + 0x30;
 8003894:	4b16      	ldr	r3, [pc, #88]	; (80038f0 <STATE2_GetConfig+0x1d8>)
 8003896:	88db      	ldrh	r3, [r3, #6]
 8003898:	4a16      	ldr	r2, [pc, #88]	; (80038f4 <STATE2_GetConfig+0x1dc>)
 800389a:	fba2 1203 	umull	r1, r2, r2, r3
 800389e:	0952      	lsrs	r2, r2, #5
 80038a0:	2164      	movs	r1, #100	; 0x64
 80038a2:	fb01 f202 	mul.w	r2, r1, r2
 80038a6:	1a9b      	subs	r3, r3, r2
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	4b13      	ldr	r3, [pc, #76]	; (80038f8 <STATE2_GetConfig+0x1e0>)
 80038ac:	fba3 1302 	umull	r1, r3, r3, r2
 80038b0:	08d9      	lsrs	r1, r3, #3
 80038b2:	460b      	mov	r3, r1
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	b29b      	uxth	r3, r3
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	330f      	adds	r3, #15
 80038c4:	3230      	adds	r2, #48	; 0x30
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]
	config[16] = ':';
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3310      	adds	r3, #16
 80038ce:	223a      	movs	r2, #58	; 0x3a
 80038d0:	701a      	strb	r2, [r3, #0]
	config[17] = '$';
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3311      	adds	r3, #17
 80038d6:	2224      	movs	r2, #36	; 0x24
 80038d8:	701a      	strb	r2, [r3, #0]
	config[18] = '\n';
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3312      	adds	r3, #18
 80038de:	220a      	movs	r2, #10
 80038e0:	701a      	strb	r2, [r3, #0]

}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	2000534c 	.word	0x2000534c
 80038f4:	51eb851f 	.word	0x51eb851f
 80038f8:	cccccccd 	.word	0xcccccccd

080038fc <STATE2_SliderVal>:

void STATE2_SliderVal(uint32_t sliderValue){
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]



}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <STATE2_ApplySettings>:

void STATE2_ApplySettings(){
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
	TIM15->CCR1 = state2_vars.greenVal;
 8003914:	4b08      	ldr	r3, [pc, #32]	; (8003938 <STATE2_ApplySettings+0x28>)
 8003916:	889a      	ldrh	r2, [r3, #4]
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <STATE2_ApplySettings+0x2c>)
 800391a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR4 = state2_vars.blueVal;
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <STATE2_ApplySettings+0x28>)
 800391e:	88da      	ldrh	r2, [r3, #6]
 8003920:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
	TIM16->CCR1 = state2_vars.redVal;
 8003926:	4b04      	ldr	r3, [pc, #16]	; (8003938 <STATE2_ApplySettings+0x28>)
 8003928:	885a      	ldrh	r2, [r3, #2]
 800392a:	4b05      	ldr	r3, [pc, #20]	; (8003940 <STATE2_ApplySettings+0x30>)
 800392c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800392e:	bf00      	nop
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	2000534c 	.word	0x2000534c
 800393c:	40014000 	.word	0x40014000
 8003940:	40014400 	.word	0x40014400

08003944 <STATE2_OnHold>:

void STATE2_OnHold(){
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0


				if(state2_vars.isActive == 1 && state2_vars.rgbState == 1){
 8003948:	4b19      	ldr	r3, [pc, #100]	; (80039b0 <STATE2_OnHold+0x6c>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d11c      	bne.n	800398a <STATE2_OnHold+0x46>
 8003950:	4b17      	ldr	r3, [pc, #92]	; (80039b0 <STATE2_OnHold+0x6c>)
 8003952:	785b      	ldrb	r3, [r3, #1]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d118      	bne.n	800398a <STATE2_OnHold+0x46>

					state2_vars.prevRedVal = state2_vars.redVal;
 8003958:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <STATE2_OnHold+0x6c>)
 800395a:	885a      	ldrh	r2, [r3, #2]
 800395c:	4b14      	ldr	r3, [pc, #80]	; (80039b0 <STATE2_OnHold+0x6c>)
 800395e:	811a      	strh	r2, [r3, #8]
					state2_vars.prevGreenVal = state2_vars.greenVal;
 8003960:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <STATE2_OnHold+0x6c>)
 8003962:	889a      	ldrh	r2, [r3, #4]
 8003964:	4b12      	ldr	r3, [pc, #72]	; (80039b0 <STATE2_OnHold+0x6c>)
 8003966:	815a      	strh	r2, [r3, #10]
					state2_vars.prevBlueVal = state2_vars.blueVal;
 8003968:	4b11      	ldr	r3, [pc, #68]	; (80039b0 <STATE2_OnHold+0x6c>)
 800396a:	88da      	ldrh	r2, [r3, #6]
 800396c:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <STATE2_OnHold+0x6c>)
 800396e:	819a      	strh	r2, [r3, #12]

					state2_vars.blueVal = 0;
 8003970:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <STATE2_OnHold+0x6c>)
 8003972:	2200      	movs	r2, #0
 8003974:	80da      	strh	r2, [r3, #6]
					state2_vars.greenVal = 0;
 8003976:	4b0e      	ldr	r3, [pc, #56]	; (80039b0 <STATE2_OnHold+0x6c>)
 8003978:	2200      	movs	r2, #0
 800397a:	809a      	strh	r2, [r3, #4]
					state2_vars.redVal = 0;
 800397c:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <STATE2_OnHold+0x6c>)
 800397e:	2200      	movs	r2, #0
 8003980:	805a      	strh	r2, [r3, #2]
					state2_vars.rgbState = 0;
 8003982:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <STATE2_OnHold+0x6c>)
 8003984:	2200      	movs	r2, #0
 8003986:	705a      	strb	r2, [r3, #1]
 8003988:	e00e      	b.n	80039a8 <STATE2_OnHold+0x64>

				} else {
					state2_vars.redVal = state2_vars.prevRedVal;
 800398a:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <STATE2_OnHold+0x6c>)
 800398c:	891a      	ldrh	r2, [r3, #8]
 800398e:	4b08      	ldr	r3, [pc, #32]	; (80039b0 <STATE2_OnHold+0x6c>)
 8003990:	805a      	strh	r2, [r3, #2]
					state2_vars.greenVal = state2_vars.prevGreenVal;
 8003992:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <STATE2_OnHold+0x6c>)
 8003994:	895a      	ldrh	r2, [r3, #10]
 8003996:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <STATE2_OnHold+0x6c>)
 8003998:	809a      	strh	r2, [r3, #4]
					state2_vars.blueVal = state2_vars.prevBlueVal;
 800399a:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <STATE2_OnHold+0x6c>)
 800399c:	899a      	ldrh	r2, [r3, #12]
 800399e:	4b04      	ldr	r3, [pc, #16]	; (80039b0 <STATE2_OnHold+0x6c>)
 80039a0:	80da      	strh	r2, [r3, #6]
					state2_vars.rgbState = 1;
 80039a2:	4b03      	ldr	r3, [pc, #12]	; (80039b0 <STATE2_OnHold+0x6c>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	705a      	strb	r2, [r3, #1]
				}
				STATE2_ApplySettings();
 80039a8:	f7ff ffb2 	bl	8003910 <STATE2_ApplySettings>
}
 80039ac:	bf00      	nop
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	2000534c 	.word	0x2000534c

080039b4 <STATE2_OnTap>:

void STATE2_OnTap(uint16_t tapX, uint16_t tapY){
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	460a      	mov	r2, r1
 80039be:	80fb      	strh	r3, [r7, #6]
 80039c0:	4613      	mov	r3, r2
 80039c2:	80bb      	strh	r3, [r7, #4]

	uint16_t redXLimit = 598;
 80039c4:	f240 2356 	movw	r3, #598	; 0x256
 80039c8:	81fb      	strh	r3, [r7, #14]
	uint16_t greenXLimit = 1196;
 80039ca:	f240 43ac 	movw	r3, #1196	; 0x4ac
 80039ce:	81bb      	strh	r3, [r7, #12]
	uint16_t blueXLimit = 1792;
 80039d0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80039d4:	817b      	strh	r3, [r7, #10]



	state2_vars.isActive = 1;
 80039d6:	4b27      	ldr	r3, [pc, #156]	; (8003a74 <STATE2_OnTap+0xc0>)
 80039d8:	2201      	movs	r2, #1
 80039da:	701a      	strb	r2, [r3, #0]
	state2_vars.rgbState = 1;
 80039dc:	4b25      	ldr	r3, [pc, #148]	; (8003a74 <STATE2_OnTap+0xc0>)
 80039de:	2201      	movs	r2, #1
 80039e0:	705a      	strb	r2, [r3, #1]
	if(tapX < redXLimit){
 80039e2:	88fa      	ldrh	r2, [r7, #6]
 80039e4:	89fb      	ldrh	r3, [r7, #14]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d20c      	bcs.n	8003a04 <STATE2_OnTap+0x50>
	//red
		state2_vars.redVal = ((768 - tapY)*512)/768;
 80039ea:	88bb      	ldrh	r3, [r7, #4]
 80039ec:	f5c3 7340 	rsb	r3, r3, #768	; 0x300
 80039f0:	025b      	lsls	r3, r3, #9
 80039f2:	4a21      	ldr	r2, [pc, #132]	; (8003a78 <STATE2_OnTap+0xc4>)
 80039f4:	fb82 1203 	smull	r1, r2, r2, r3
 80039f8:	11d2      	asrs	r2, r2, #7
 80039fa:	17db      	asrs	r3, r3, #31
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	4b1c      	ldr	r3, [pc, #112]	; (8003a74 <STATE2_OnTap+0xc0>)
 8003a02:	805a      	strh	r2, [r3, #2]
	}

	if(tapX >= redXLimit && tapX <= greenXLimit){
 8003a04:	88fa      	ldrh	r2, [r7, #6]
 8003a06:	89fb      	ldrh	r3, [r7, #14]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d314      	bcc.n	8003a36 <STATE2_OnTap+0x82>
 8003a0c:	88fa      	ldrh	r2, [r7, #6]
 8003a0e:	89bb      	ldrh	r3, [r7, #12]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d810      	bhi.n	8003a36 <STATE2_OnTap+0x82>

		state2_vars.greenVal = state2_vars.greenVal = ((768 - tapY)*512)/768;
 8003a14:	88bb      	ldrh	r3, [r7, #4]
 8003a16:	f5c3 7340 	rsb	r3, r3, #768	; 0x300
 8003a1a:	025b      	lsls	r3, r3, #9
 8003a1c:	4a16      	ldr	r2, [pc, #88]	; (8003a78 <STATE2_OnTap+0xc4>)
 8003a1e:	fb82 1203 	smull	r1, r2, r2, r3
 8003a22:	11d2      	asrs	r2, r2, #7
 8003a24:	17db      	asrs	r3, r3, #31
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <STATE2_OnTap+0xc0>)
 8003a2c:	809a      	strh	r2, [r3, #4]
 8003a2e:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <STATE2_OnTap+0xc0>)
 8003a30:	889a      	ldrh	r2, [r3, #4]
 8003a32:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <STATE2_OnTap+0xc0>)
 8003a34:	809a      	strh	r2, [r3, #4]
	}

	if(tapX >= greenXLimit && tapX <= blueXLimit){
 8003a36:	88fa      	ldrh	r2, [r7, #6]
 8003a38:	89bb      	ldrh	r3, [r7, #12]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d314      	bcc.n	8003a68 <STATE2_OnTap+0xb4>
 8003a3e:	88fa      	ldrh	r2, [r7, #6]
 8003a40:	897b      	ldrh	r3, [r7, #10]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d810      	bhi.n	8003a68 <STATE2_OnTap+0xb4>

		state2_vars.blueVal = state2_vars.blueVal = ((768 - tapY)*512)/768;
 8003a46:	88bb      	ldrh	r3, [r7, #4]
 8003a48:	f5c3 7340 	rsb	r3, r3, #768	; 0x300
 8003a4c:	025b      	lsls	r3, r3, #9
 8003a4e:	4a0a      	ldr	r2, [pc, #40]	; (8003a78 <STATE2_OnTap+0xc4>)
 8003a50:	fb82 1203 	smull	r1, r2, r2, r3
 8003a54:	11d2      	asrs	r2, r2, #7
 8003a56:	17db      	asrs	r3, r3, #31
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <STATE2_OnTap+0xc0>)
 8003a5e:	80da      	strh	r2, [r3, #6]
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <STATE2_OnTap+0xc0>)
 8003a62:	88da      	ldrh	r2, [r3, #6]
 8003a64:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <STATE2_OnTap+0xc0>)
 8003a66:	80da      	strh	r2, [r3, #6]

	}
	STATE2_ApplySettings();
 8003a68:	f7ff ff52 	bl	8003910 <STATE2_ApplySettings>


}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	2000534c 	.word	0x2000534c
 8003a78:	2aaaaaab 	.word	0x2aaaaaab

08003a7c <STATE2_OnSlide>:

void STATE2_OnSlide(uint16_t currentXCoord){
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	80fb      	strh	r3, [r7, #6]


}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <STATE2_SetIntensity>:

void STATE2_SetIntensity(uint16_t newIntensity){
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	4603      	mov	r3, r0
 8003a9a:	80fb      	strh	r3, [r7, #6]


}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <STATE2_Housekeep>:

void STATE2_Housekeep(){
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0



}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
	...

08003ab8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003abe:	4b0f      	ldr	r3, [pc, #60]	; (8003afc <HAL_MspInit+0x44>)
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	4a0e      	ldr	r2, [pc, #56]	; (8003afc <HAL_MspInit+0x44>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	6193      	str	r3, [r2, #24]
 8003aca:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <HAL_MspInit+0x44>)
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	607b      	str	r3, [r7, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ad6:	4b09      	ldr	r3, [pc, #36]	; (8003afc <HAL_MspInit+0x44>)
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	4a08      	ldr	r2, [pc, #32]	; (8003afc <HAL_MspInit+0x44>)
 8003adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae0:	61d3      	str	r3, [r2, #28]
 8003ae2:	4b06      	ldr	r3, [pc, #24]	; (8003afc <HAL_MspInit+0x44>)
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003aee:	2007      	movs	r0, #7
 8003af0:	f001 fd82 	bl	80055f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40021000 	.word	0x40021000

08003b00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08a      	sub	sp, #40	; 0x28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b08:	f107 0314 	add.w	r3, r7, #20
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	605a      	str	r2, [r3, #4]
 8003b12:	609a      	str	r2, [r3, #8]
 8003b14:	60da      	str	r2, [r3, #12]
 8003b16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b20:	d124      	bne.n	8003b6c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003b22:	4b14      	ldr	r3, [pc, #80]	; (8003b74 <HAL_ADC_MspInit+0x74>)
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	4a13      	ldr	r2, [pc, #76]	; (8003b74 <HAL_ADC_MspInit+0x74>)
 8003b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	6153      	str	r3, [r2, #20]
 8003b2e:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <HAL_ADC_MspInit+0x74>)
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b36:	613b      	str	r3, [r7, #16]
 8003b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b3a:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <HAL_ADC_MspInit+0x74>)
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	4a0d      	ldr	r2, [pc, #52]	; (8003b74 <HAL_ADC_MspInit+0x74>)
 8003b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b44:	6153      	str	r3, [r2, #20]
 8003b46:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <HAL_ADC_MspInit+0x74>)
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003b52:	2301      	movs	r3, #1
 8003b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b56:	2303      	movs	r3, #3
 8003b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b5e:	f107 0314 	add.w	r3, r7, #20
 8003b62:	4619      	mov	r1, r3
 8003b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b68:	f001 fede 	bl	8005928 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003b6c:	bf00      	nop
 8003b6e:	3728      	adds	r7, #40	; 0x28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40021000 	.word	0x40021000

08003b78 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08a      	sub	sp, #40	; 0x28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b80:	f107 0314 	add.w	r3, r7, #20
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	605a      	str	r2, [r3, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	60da      	str	r2, [r3, #12]
 8003b8e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a15      	ldr	r2, [pc, #84]	; (8003bec <HAL_DAC_MspInit+0x74>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d124      	bne.n	8003be4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003b9a:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <HAL_DAC_MspInit+0x78>)
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	4a14      	ldr	r2, [pc, #80]	; (8003bf0 <HAL_DAC_MspInit+0x78>)
 8003ba0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ba4:	61d3      	str	r3, [r2, #28]
 8003ba6:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <HAL_DAC_MspInit+0x78>)
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb2:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <HAL_DAC_MspInit+0x78>)
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	4a0e      	ldr	r2, [pc, #56]	; (8003bf0 <HAL_DAC_MspInit+0x78>)
 8003bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bbc:	6153      	str	r3, [r2, #20]
 8003bbe:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <HAL_DAC_MspInit+0x78>)
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003bca:	2310      	movs	r3, #16
 8003bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd6:	f107 0314 	add.w	r3, r7, #20
 8003bda:	4619      	mov	r1, r3
 8003bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003be0:	f001 fea2 	bl	8005928 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003be4:	bf00      	nop
 8003be6:	3728      	adds	r7, #40	; 0x28
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40007400 	.word	0x40007400
 8003bf0:	40021000 	.word	0x40021000

08003bf4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08a      	sub	sp, #40	; 0x28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfc:	f107 0314 	add.w	r3, r7, #20
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	605a      	str	r2, [r3, #4]
 8003c06:	609a      	str	r2, [r3, #8]
 8003c08:	60da      	str	r2, [r3, #12]
 8003c0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a17      	ldr	r2, [pc, #92]	; (8003c70 <HAL_I2C_MspInit+0x7c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d127      	bne.n	8003c66 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c16:	4b17      	ldr	r3, [pc, #92]	; (8003c74 <HAL_I2C_MspInit+0x80>)
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	4a16      	ldr	r2, [pc, #88]	; (8003c74 <HAL_I2C_MspInit+0x80>)
 8003c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c20:	6153      	str	r3, [r2, #20]
 8003c22:	4b14      	ldr	r3, [pc, #80]	; (8003c74 <HAL_I2C_MspInit+0x80>)
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c2e:	23c0      	movs	r3, #192	; 0xc0
 8003c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c32:	2312      	movs	r3, #18
 8003c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c3e:	2304      	movs	r3, #4
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c42:	f107 0314 	add.w	r3, r7, #20
 8003c46:	4619      	mov	r1, r3
 8003c48:	480b      	ldr	r0, [pc, #44]	; (8003c78 <HAL_I2C_MspInit+0x84>)
 8003c4a:	f001 fe6d 	bl	8005928 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c4e:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <HAL_I2C_MspInit+0x80>)
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	4a08      	ldr	r2, [pc, #32]	; (8003c74 <HAL_I2C_MspInit+0x80>)
 8003c54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c58:	61d3      	str	r3, [r2, #28]
 8003c5a:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <HAL_I2C_MspInit+0x80>)
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003c66:	bf00      	nop
 8003c68:	3728      	adds	r7, #40	; 0x28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40005400 	.word	0x40005400
 8003c74:	40021000 	.word	0x40021000
 8003c78:	48000400 	.word	0x48000400

08003c7c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <HAL_TIM_PWM_MspInit+0x38>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d10b      	bne.n	8003ca6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c8e:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8003c94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c98:	6193      	str	r3, [r2, #24]
 8003c9a:	4b07      	ldr	r3, [pc, #28]	; (8003cb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003ca6:	bf00      	nop
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	40012c00 	.word	0x40012c00
 8003cb8:	40021000 	.word	0x40021000

08003cbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ccc:	d10c      	bne.n	8003ce8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003cce:	4b24      	ldr	r3, [pc, #144]	; (8003d60 <HAL_TIM_Base_MspInit+0xa4>)
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	4a23      	ldr	r2, [pc, #140]	; (8003d60 <HAL_TIM_Base_MspInit+0xa4>)
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	61d3      	str	r3, [r2, #28]
 8003cda:	4b21      	ldr	r3, [pc, #132]	; (8003d60 <HAL_TIM_Base_MspInit+0xa4>)
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003ce6:	e034      	b.n	8003d52 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <HAL_TIM_Base_MspInit+0xa8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d10c      	bne.n	8003d0c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003cf2:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <HAL_TIM_Base_MspInit+0xa4>)
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	4a1a      	ldr	r2, [pc, #104]	; (8003d60 <HAL_TIM_Base_MspInit+0xa4>)
 8003cf8:	f043 0304 	orr.w	r3, r3, #4
 8003cfc:	61d3      	str	r3, [r2, #28]
 8003cfe:	4b18      	ldr	r3, [pc, #96]	; (8003d60 <HAL_TIM_Base_MspInit+0xa4>)
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	693b      	ldr	r3, [r7, #16]
}
 8003d0a:	e022      	b.n	8003d52 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM15)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a15      	ldr	r2, [pc, #84]	; (8003d68 <HAL_TIM_Base_MspInit+0xac>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d10c      	bne.n	8003d30 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003d16:	4b12      	ldr	r3, [pc, #72]	; (8003d60 <HAL_TIM_Base_MspInit+0xa4>)
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	4a11      	ldr	r2, [pc, #68]	; (8003d60 <HAL_TIM_Base_MspInit+0xa4>)
 8003d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d20:	6193      	str	r3, [r2, #24]
 8003d22:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <HAL_TIM_Base_MspInit+0xa4>)
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
}
 8003d2e:	e010      	b.n	8003d52 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM16)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a0d      	ldr	r2, [pc, #52]	; (8003d6c <HAL_TIM_Base_MspInit+0xb0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d10b      	bne.n	8003d52 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003d3a:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <HAL_TIM_Base_MspInit+0xa4>)
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	4a08      	ldr	r2, [pc, #32]	; (8003d60 <HAL_TIM_Base_MspInit+0xa4>)
 8003d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d44:	6193      	str	r3, [r2, #24]
 8003d46:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <HAL_TIM_Base_MspInit+0xa4>)
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4e:	60bb      	str	r3, [r7, #8]
 8003d50:	68bb      	ldr	r3, [r7, #8]
}
 8003d52:	bf00      	nop
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40021000 	.word	0x40021000
 8003d64:	40000800 	.word	0x40000800
 8003d68:	40014000 	.word	0x40014000
 8003d6c:	40014400 	.word	0x40014400

08003d70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08c      	sub	sp, #48	; 0x30
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d78:	f107 031c 	add.w	r3, r7, #28
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	605a      	str	r2, [r3, #4]
 8003d82:	609a      	str	r2, [r3, #8]
 8003d84:	60da      	str	r2, [r3, #12]
 8003d86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a5d      	ldr	r2, [pc, #372]	; (8003f04 <HAL_TIM_MspPostInit+0x194>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d11c      	bne.n	8003dcc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d92:	4b5d      	ldr	r3, [pc, #372]	; (8003f08 <HAL_TIM_MspPostInit+0x198>)
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	4a5c      	ldr	r2, [pc, #368]	; (8003f08 <HAL_TIM_MspPostInit+0x198>)
 8003d98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d9c:	6153      	str	r3, [r2, #20]
 8003d9e:	4b5a      	ldr	r3, [pc, #360]	; (8003f08 <HAL_TIM_MspPostInit+0x198>)
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003da6:	61bb      	str	r3, [r7, #24]
 8003da8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003daa:	2301      	movs	r3, #1
 8003dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dae:	2302      	movs	r3, #2
 8003db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db2:	2300      	movs	r3, #0
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db6:	2300      	movs	r3, #0
 8003db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003dba:	2302      	movs	r3, #2
 8003dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dbe:	f107 031c 	add.w	r3, r7, #28
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4851      	ldr	r0, [pc, #324]	; (8003f0c <HAL_TIM_MspPostInit+0x19c>)
 8003dc6:	f001 fdaf 	bl	8005928 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8003dca:	e097      	b.n	8003efc <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM2)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd4:	d14c      	bne.n	8003e70 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dd6:	4b4c      	ldr	r3, [pc, #304]	; (8003f08 <HAL_TIM_MspPostInit+0x198>)
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	4a4b      	ldr	r2, [pc, #300]	; (8003f08 <HAL_TIM_MspPostInit+0x198>)
 8003ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de0:	6153      	str	r3, [r2, #20]
 8003de2:	4b49      	ldr	r3, [pc, #292]	; (8003f08 <HAL_TIM_MspPostInit+0x198>)
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dee:	4b46      	ldr	r3, [pc, #280]	; (8003f08 <HAL_TIM_MspPostInit+0x198>)
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	4a45      	ldr	r2, [pc, #276]	; (8003f08 <HAL_TIM_MspPostInit+0x198>)
 8003df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003df8:	6153      	str	r3, [r2, #20]
 8003dfa:	4b43      	ldr	r3, [pc, #268]	; (8003f08 <HAL_TIM_MspPostInit+0x198>)
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e06:	2302      	movs	r3, #2
 8003e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e12:	2300      	movs	r3, #0
 8003e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e16:	2301      	movs	r3, #1
 8003e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e1a:	f107 031c 	add.w	r3, r7, #28
 8003e1e:	4619      	mov	r1, r3
 8003e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e24:	f001 fd80 	bl	8005928 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003e28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2e:	2302      	movs	r3, #2
 8003e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e36:	2300      	movs	r3, #0
 8003e38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e3e:	f107 031c 	add.w	r3, r7, #28
 8003e42:	4619      	mov	r1, r3
 8003e44:	4832      	ldr	r0, [pc, #200]	; (8003f10 <HAL_TIM_MspPostInit+0x1a0>)
 8003e46:	f001 fd6f 	bl	8005928 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e50:	2302      	movs	r3, #2
 8003e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e54:	2300      	movs	r3, #0
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8003e5c:	230a      	movs	r3, #10
 8003e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e60:	f107 031c 	add.w	r3, r7, #28
 8003e64:	4619      	mov	r1, r3
 8003e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e6a:	f001 fd5d 	bl	8005928 <HAL_GPIO_Init>
}
 8003e6e:	e045      	b.n	8003efc <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM15)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a27      	ldr	r2, [pc, #156]	; (8003f14 <HAL_TIM_MspPostInit+0x1a4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d11d      	bne.n	8003eb6 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e7a:	4b23      	ldr	r3, [pc, #140]	; (8003f08 <HAL_TIM_MspPostInit+0x198>)
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	4a22      	ldr	r2, [pc, #136]	; (8003f08 <HAL_TIM_MspPostInit+0x198>)
 8003e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e84:	6153      	str	r3, [r2, #20]
 8003e86:	4b20      	ldr	r3, [pc, #128]	; (8003f08 <HAL_TIM_MspPostInit+0x198>)
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GreenRGB_Pin;
 8003e92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e98:	2302      	movs	r3, #2
 8003e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GreenRGB_GPIO_Port, &GPIO_InitStruct);
 8003ea8:	f107 031c 	add.w	r3, r7, #28
 8003eac:	4619      	mov	r1, r3
 8003eae:	4818      	ldr	r0, [pc, #96]	; (8003f10 <HAL_TIM_MspPostInit+0x1a0>)
 8003eb0:	f001 fd3a 	bl	8005928 <HAL_GPIO_Init>
}
 8003eb4:	e022      	b.n	8003efc <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM16)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a17      	ldr	r2, [pc, #92]	; (8003f18 <HAL_TIM_MspPostInit+0x1a8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d11d      	bne.n	8003efc <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ec0:	4b11      	ldr	r3, [pc, #68]	; (8003f08 <HAL_TIM_MspPostInit+0x198>)
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	4a10      	ldr	r2, [pc, #64]	; (8003f08 <HAL_TIM_MspPostInit+0x198>)
 8003ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eca:	6153      	str	r3, [r2, #20]
 8003ecc:	4b0e      	ldr	r3, [pc, #56]	; (8003f08 <HAL_TIM_MspPostInit+0x198>)
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RedRGB_Pin;
 8003ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ede:	2302      	movs	r3, #2
 8003ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8003eea:	2301      	movs	r3, #1
 8003eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RedRGB_GPIO_Port, &GPIO_InitStruct);
 8003eee:	f107 031c 	add.w	r3, r7, #28
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ef8:	f001 fd16 	bl	8005928 <HAL_GPIO_Init>
}
 8003efc:	bf00      	nop
 8003efe:	3730      	adds	r7, #48	; 0x30
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40012c00 	.word	0x40012c00
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	48000800 	.word	0x48000800
 8003f10:	48000400 	.word	0x48000400
 8003f14:	40014000 	.word	0x40014000
 8003f18:	40014400 	.word	0x40014400

08003f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08a      	sub	sp, #40	; 0x28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f24:	f107 0314 	add.w	r3, r7, #20
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	605a      	str	r2, [r3, #4]
 8003f2e:	609a      	str	r2, [r3, #8]
 8003f30:	60da      	str	r2, [r3, #12]
 8003f32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a1b      	ldr	r2, [pc, #108]	; (8003fa8 <HAL_UART_MspInit+0x8c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d130      	bne.n	8003fa0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f3e:	4b1b      	ldr	r3, [pc, #108]	; (8003fac <HAL_UART_MspInit+0x90>)
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	4a1a      	ldr	r2, [pc, #104]	; (8003fac <HAL_UART_MspInit+0x90>)
 8003f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f48:	61d3      	str	r3, [r2, #28]
 8003f4a:	4b18      	ldr	r3, [pc, #96]	; (8003fac <HAL_UART_MspInit+0x90>)
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f56:	4b15      	ldr	r3, [pc, #84]	; (8003fac <HAL_UART_MspInit+0x90>)
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	4a14      	ldr	r2, [pc, #80]	; (8003fac <HAL_UART_MspInit+0x90>)
 8003f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f60:	6153      	str	r3, [r2, #20]
 8003f62:	4b12      	ldr	r3, [pc, #72]	; (8003fac <HAL_UART_MspInit+0x90>)
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003f6e:	230c      	movs	r3, #12
 8003f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f72:	2302      	movs	r3, #2
 8003f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f7e:	2307      	movs	r3, #7
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f82:	f107 0314 	add.w	r3, r7, #20
 8003f86:	4619      	mov	r1, r3
 8003f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f8c:	f001 fccc 	bl	8005928 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003f90:	2200      	movs	r2, #0
 8003f92:	2100      	movs	r1, #0
 8003f94:	2026      	movs	r0, #38	; 0x26
 8003f96:	f001 fb3a 	bl	800560e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f9a:	2026      	movs	r0, #38	; 0x26
 8003f9c:	f001 fb53 	bl	8005646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003fa0:	bf00      	nop
 8003fa2:	3728      	adds	r7, #40	; 0x28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40004400 	.word	0x40004400
 8003fac:	40021000 	.word	0x40021000

08003fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003fb4:	bf00      	nop
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fc2:	e7fe      	b.n	8003fc2 <HardFault_Handler+0x4>

08003fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fc8:	e7fe      	b.n	8003fc8 <MemManage_Handler+0x4>

08003fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fce:	e7fe      	b.n	8003fce <BusFault_Handler+0x4>

08003fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fd4:	e7fe      	b.n	8003fd4 <UsageFault_Handler+0x4>

08003fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003fda:	bf00      	nop
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ff6:	bf00      	nop
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004004:	f000 f8aa 	bl	800415c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004008:	bf00      	nop
 800400a:	bd80      	pop	{r7, pc}

0800400c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Right_Button_Pin);
 8004010:	2080      	movs	r0, #128	; 0x80
 8004012:	f001 fe43 	bl	8005c9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Middle_Button_Pin);
 8004016:	f44f 7080 	mov.w	r0, #256	; 0x100
 800401a:	f001 fe3f 	bl	8005c9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Left_Button_Pin);
 800401e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004022:	f001 fe3b 	bl	8005c9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004026:	bf00      	nop
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004030:	4802      	ldr	r0, [pc, #8]	; (800403c <USART2_IRQHandler+0x10>)
 8004032:	f005 fbc7 	bl	80097c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004036:	bf00      	nop
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	2000513c 	.word	0x2000513c

08004040 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004044:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004048:	f001 fe28 	bl	8005c9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RDY_Pin);
 800404c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004050:	f001 fe24 	bl	8005c9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004054:	bf00      	nop
 8004056:	bd80      	pop	{r7, pc}

08004058 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <SystemInit+0x20>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004062:	4a05      	ldr	r2, [pc, #20]	; (8004078 <SystemInit+0x20>)
 8004064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800406c:	bf00      	nop
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	e000ed00 	.word	0xe000ed00

0800407c <Reset_Handler>:
 800407c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040b4 <LoopForever+0x2>
 8004080:	480d      	ldr	r0, [pc, #52]	; (80040b8 <LoopForever+0x6>)
 8004082:	490e      	ldr	r1, [pc, #56]	; (80040bc <LoopForever+0xa>)
 8004084:	4a0e      	ldr	r2, [pc, #56]	; (80040c0 <LoopForever+0xe>)
 8004086:	2300      	movs	r3, #0
 8004088:	e002      	b.n	8004090 <LoopCopyDataInit>

0800408a <CopyDataInit>:
 800408a:	58d4      	ldr	r4, [r2, r3]
 800408c:	50c4      	str	r4, [r0, r3]
 800408e:	3304      	adds	r3, #4

08004090 <LoopCopyDataInit>:
 8004090:	18c4      	adds	r4, r0, r3
 8004092:	428c      	cmp	r4, r1
 8004094:	d3f9      	bcc.n	800408a <CopyDataInit>
 8004096:	4a0b      	ldr	r2, [pc, #44]	; (80040c4 <LoopForever+0x12>)
 8004098:	4c0b      	ldr	r4, [pc, #44]	; (80040c8 <LoopForever+0x16>)
 800409a:	2300      	movs	r3, #0
 800409c:	e001      	b.n	80040a2 <LoopFillZerobss>

0800409e <FillZerobss>:
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	3204      	adds	r2, #4

080040a2 <LoopFillZerobss>:
 80040a2:	42a2      	cmp	r2, r4
 80040a4:	d3fb      	bcc.n	800409e <FillZerobss>
 80040a6:	f7ff ffd7 	bl	8004058 <SystemInit>
 80040aa:	f006 fd33 	bl	800ab14 <__libc_init_array>
 80040ae:	f7fd f893 	bl	80011d8 <main>

080040b2 <LoopForever>:
 80040b2:	e7fe      	b.n	80040b2 <LoopForever>
 80040b4:	20010000 	.word	0x20010000
 80040b8:	20000000 	.word	0x20000000
 80040bc:	200000bc 	.word	0x200000bc
 80040c0:	0800adec 	.word	0x0800adec
 80040c4:	200000bc 	.word	0x200000bc
 80040c8:	20005360 	.word	0x20005360

080040cc <ADC1_2_IRQHandler>:
 80040cc:	e7fe      	b.n	80040cc <ADC1_2_IRQHandler>
	...

080040d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040d4:	4b08      	ldr	r3, [pc, #32]	; (80040f8 <HAL_Init+0x28>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a07      	ldr	r2, [pc, #28]	; (80040f8 <HAL_Init+0x28>)
 80040da:	f043 0310 	orr.w	r3, r3, #16
 80040de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040e0:	2003      	movs	r0, #3
 80040e2:	f001 fa89 	bl	80055f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040e6:	2000      	movs	r0, #0
 80040e8:	f000 f808 	bl	80040fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040ec:	f7ff fce4 	bl	8003ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40022000 	.word	0x40022000

080040fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004104:	4b12      	ldr	r3, [pc, #72]	; (8004150 <HAL_InitTick+0x54>)
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	4b12      	ldr	r3, [pc, #72]	; (8004154 <HAL_InitTick+0x58>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	4619      	mov	r1, r3
 800410e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004112:	fbb3 f3f1 	udiv	r3, r3, r1
 8004116:	fbb2 f3f3 	udiv	r3, r2, r3
 800411a:	4618      	mov	r0, r3
 800411c:	f001 faa1 	bl	8005662 <HAL_SYSTICK_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e00e      	b.n	8004148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b0f      	cmp	r3, #15
 800412e:	d80a      	bhi.n	8004146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004130:	2200      	movs	r2, #0
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	f04f 30ff 	mov.w	r0, #4294967295
 8004138:	f001 fa69 	bl	800560e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800413c:	4a06      	ldr	r2, [pc, #24]	; (8004158 <HAL_InitTick+0x5c>)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	e000      	b.n	8004148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
}
 8004148:	4618      	mov	r0, r3
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	200000b0 	.word	0x200000b0
 8004154:	200000b8 	.word	0x200000b8
 8004158:	200000b4 	.word	0x200000b4

0800415c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004160:	4b06      	ldr	r3, [pc, #24]	; (800417c <HAL_IncTick+0x20>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	461a      	mov	r2, r3
 8004166:	4b06      	ldr	r3, [pc, #24]	; (8004180 <HAL_IncTick+0x24>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4413      	add	r3, r2
 800416c:	4a04      	ldr	r2, [pc, #16]	; (8004180 <HAL_IncTick+0x24>)
 800416e:	6013      	str	r3, [r2, #0]
}
 8004170:	bf00      	nop
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	200000b8 	.word	0x200000b8
 8004180:	2000535c 	.word	0x2000535c

08004184 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  return uwTick;  
 8004188:	4b03      	ldr	r3, [pc, #12]	; (8004198 <HAL_GetTick+0x14>)
 800418a:	681b      	ldr	r3, [r3, #0]
}
 800418c:	4618      	mov	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	2000535c 	.word	0x2000535c

0800419c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041a4:	f7ff ffee 	bl	8004184 <HAL_GetTick>
 80041a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b4:	d005      	beq.n	80041c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041b6:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <HAL_Delay+0x44>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	461a      	mov	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4413      	add	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80041c2:	bf00      	nop
 80041c4:	f7ff ffde 	bl	8004184 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d8f7      	bhi.n	80041c4 <HAL_Delay+0x28>
  {
  }
}
 80041d4:	bf00      	nop
 80041d6:	bf00      	nop
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	200000b8 	.word	0x200000b8

080041e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b09a      	sub	sp, #104	; 0x68
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e1e3      	b.n	80045cc <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	f003 0310 	and.w	r3, r3, #16
 8004212:	2b00      	cmp	r3, #0
 8004214:	d176      	bne.n	8004304 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	d152      	bne.n	80042c4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff fc61 	bl	8003b00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d13b      	bne.n	80042c4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f001 f89d 	bl	800538c <ADC_Disable>
 8004252:	4603      	mov	r3, r0
 8004254:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b00      	cmp	r3, #0
 8004262:	d12f      	bne.n	80042c4 <HAL_ADC_Init+0xe0>
 8004264:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004268:	2b00      	cmp	r3, #0
 800426a:	d12b      	bne.n	80042c4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004274:	f023 0302 	bic.w	r3, r3, #2
 8004278:	f043 0202 	orr.w	r2, r3, #2
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800428e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800429e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80042a0:	4b92      	ldr	r3, [pc, #584]	; (80044ec <HAL_ADC_Init+0x308>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a92      	ldr	r2, [pc, #584]	; (80044f0 <HAL_ADC_Init+0x30c>)
 80042a6:	fba2 2303 	umull	r2, r3, r2, r3
 80042aa:	0c9a      	lsrs	r2, r3, #18
 80042ac:	4613      	mov	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80042b6:	e002      	b.n	80042be <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1f9      	bne.n	80042b8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d007      	beq.n	80042e2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80042dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042e0:	d110      	bne.n	8004304 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f023 0312 	bic.w	r3, r3, #18
 80042ea:	f043 0210 	orr.w	r2, r3, #16
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	f043 0201 	orr.w	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b00      	cmp	r3, #0
 800430e:	f040 8150 	bne.w	80045b2 <HAL_ADC_Init+0x3ce>
 8004312:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004316:	2b00      	cmp	r3, #0
 8004318:	f040 814b 	bne.w	80045b2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8004326:	2b00      	cmp	r3, #0
 8004328:	f040 8143 	bne.w	80045b2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004330:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004334:	f043 0202 	orr.w	r2, r3, #2
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004344:	d004      	beq.n	8004350 <HAL_ADC_Init+0x16c>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a6a      	ldr	r2, [pc, #424]	; (80044f4 <HAL_ADC_Init+0x310>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d101      	bne.n	8004354 <HAL_ADC_Init+0x170>
 8004350:	4b69      	ldr	r3, [pc, #420]	; (80044f8 <HAL_ADC_Init+0x314>)
 8004352:	e000      	b.n	8004356 <HAL_ADC_Init+0x172>
 8004354:	4b69      	ldr	r3, [pc, #420]	; (80044fc <HAL_ADC_Init+0x318>)
 8004356:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004360:	d102      	bne.n	8004368 <HAL_ADC_Init+0x184>
 8004362:	4b64      	ldr	r3, [pc, #400]	; (80044f4 <HAL_ADC_Init+0x310>)
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	e01a      	b.n	800439e <HAL_ADC_Init+0x1ba>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a61      	ldr	r2, [pc, #388]	; (80044f4 <HAL_ADC_Init+0x310>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d103      	bne.n	800437a <HAL_ADC_Init+0x196>
 8004372:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	e011      	b.n	800439e <HAL_ADC_Init+0x1ba>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a60      	ldr	r2, [pc, #384]	; (8004500 <HAL_ADC_Init+0x31c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d102      	bne.n	800438a <HAL_ADC_Init+0x1a6>
 8004384:	4b5f      	ldr	r3, [pc, #380]	; (8004504 <HAL_ADC_Init+0x320>)
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	e009      	b.n	800439e <HAL_ADC_Init+0x1ba>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a5d      	ldr	r2, [pc, #372]	; (8004504 <HAL_ADC_Init+0x320>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d102      	bne.n	800439a <HAL_ADC_Init+0x1b6>
 8004394:	4b5a      	ldr	r3, [pc, #360]	; (8004500 <HAL_ADC_Init+0x31c>)
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	e001      	b.n	800439e <HAL_ADC_Init+0x1ba>
 800439a:	2300      	movs	r3, #0
 800439c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 0303 	and.w	r3, r3, #3
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d108      	bne.n	80043be <HAL_ADC_Init+0x1da>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <HAL_ADC_Init+0x1da>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <HAL_ADC_Init+0x1dc>
 80043be:	2300      	movs	r3, #0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d11c      	bne.n	80043fe <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80043c4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d010      	beq.n	80043ec <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d107      	bne.n	80043e6 <HAL_ADC_Init+0x202>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_ADC_Init+0x202>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <HAL_ADC_Init+0x204>
 80043e6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d108      	bne.n	80043fe <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80043ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	431a      	orrs	r2, r3
 80043fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043fc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	7e5b      	ldrb	r3, [r3, #25]
 8004402:	035b      	lsls	r3, r3, #13
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004408:	2a01      	cmp	r2, #1
 800440a:	d002      	beq.n	8004412 <HAL_ADC_Init+0x22e>
 800440c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004410:	e000      	b.n	8004414 <HAL_ADC_Init+0x230>
 8004412:	2200      	movs	r2, #0
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	4313      	orrs	r3, r2
 8004422:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004424:	4313      	orrs	r3, r2
 8004426:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d11b      	bne.n	800446a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	7e5b      	ldrb	r3, [r3, #25]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d109      	bne.n	800444e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	3b01      	subs	r3, #1
 8004440:	045a      	lsls	r2, r3, #17
 8004442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004444:	4313      	orrs	r3, r2
 8004446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444a:	663b      	str	r3, [r7, #96]	; 0x60
 800444c:	e00d      	b.n	800446a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004456:	f043 0220 	orr.w	r2, r3, #32
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004462:	f043 0201 	orr.w	r2, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	2b01      	cmp	r3, #1
 8004470:	d054      	beq.n	800451c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a22      	ldr	r2, [pc, #136]	; (8004500 <HAL_ADC_Init+0x31c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d004      	beq.n	8004486 <HAL_ADC_Init+0x2a2>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a20      	ldr	r2, [pc, #128]	; (8004504 <HAL_ADC_Init+0x320>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d140      	bne.n	8004508 <HAL_ADC_Init+0x324>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800448e:	d02a      	beq.n	80044e6 <HAL_ADC_Init+0x302>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004498:	d022      	beq.n	80044e0 <HAL_ADC_Init+0x2fc>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80044a2:	d01a      	beq.n	80044da <HAL_ADC_Init+0x2f6>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80044ac:	d012      	beq.n	80044d4 <HAL_ADC_Init+0x2f0>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80044b6:	d00a      	beq.n	80044ce <HAL_ADC_Init+0x2ea>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80044c0:	d002      	beq.n	80044c8 <HAL_ADC_Init+0x2e4>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	e023      	b.n	8004510 <HAL_ADC_Init+0x32c>
 80044c8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80044cc:	e020      	b.n	8004510 <HAL_ADC_Init+0x32c>
 80044ce:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80044d2:	e01d      	b.n	8004510 <HAL_ADC_Init+0x32c>
 80044d4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80044d8:	e01a      	b.n	8004510 <HAL_ADC_Init+0x32c>
 80044da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044de:	e017      	b.n	8004510 <HAL_ADC_Init+0x32c>
 80044e0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80044e4:	e014      	b.n	8004510 <HAL_ADC_Init+0x32c>
 80044e6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80044ea:	e011      	b.n	8004510 <HAL_ADC_Init+0x32c>
 80044ec:	200000b0 	.word	0x200000b0
 80044f0:	431bde83 	.word	0x431bde83
 80044f4:	50000100 	.word	0x50000100
 80044f8:	50000300 	.word	0x50000300
 80044fc:	50000700 	.word	0x50000700
 8004500:	50000400 	.word	0x50000400
 8004504:	50000500 	.word	0x50000500
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004514:	4313      	orrs	r3, r2
 8004516:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004518:	4313      	orrs	r3, r2
 800451a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	2b00      	cmp	r3, #0
 8004528:	d114      	bne.n	8004554 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004538:	f023 0302 	bic.w	r3, r3, #2
 800453c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	7e1b      	ldrb	r3, [r3, #24]
 8004542:	039a      	lsls	r2, r3, #14
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	4313      	orrs	r3, r2
 800454e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004550:	4313      	orrs	r3, r2
 8004552:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	4b1e      	ldr	r3, [pc, #120]	; (80045d4 <HAL_ADC_Init+0x3f0>)
 800455c:	4013      	ands	r3, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004564:	430b      	orrs	r3, r1
 8004566:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d10c      	bne.n	800458a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	f023 010f 	bic.w	r1, r3, #15
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	1e5a      	subs	r2, r3, #1
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	631a      	str	r2, [r3, #48]	; 0x30
 8004588:	e007      	b.n	800459a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 020f 	bic.w	r2, r2, #15
 8004598:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	f023 0303 	bic.w	r3, r3, #3
 80045a8:	f043 0201 	orr.w	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	641a      	str	r2, [r3, #64]	; 0x40
 80045b0:	e00a      	b.n	80045c8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f023 0312 	bic.w	r3, r3, #18
 80045ba:	f043 0210 	orr.w	r2, r3, #16
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80045c2:	2301      	movs	r3, #1
 80045c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80045c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3768      	adds	r7, #104	; 0x68
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	fff0c007 	.word	0xfff0c007

080045d8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f040 80f9 	bne.w	80047e6 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d101      	bne.n	8004602 <HAL_ADC_Start+0x2a>
 80045fe:	2302      	movs	r3, #2
 8004600:	e0f4      	b.n	80047ec <HAL_ADC_Start+0x214>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fe5a 	bl	80052c4 <ADC_Enable>
 8004610:	4603      	mov	r3, r0
 8004612:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004614:	7bfb      	ldrb	r3, [r7, #15]
 8004616:	2b00      	cmp	r3, #0
 8004618:	f040 80e0 	bne.w	80047dc <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004624:	f023 0301 	bic.w	r3, r3, #1
 8004628:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004638:	d004      	beq.n	8004644 <HAL_ADC_Start+0x6c>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a6d      	ldr	r2, [pc, #436]	; (80047f4 <HAL_ADC_Start+0x21c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d106      	bne.n	8004652 <HAL_ADC_Start+0x7a>
 8004644:	4b6c      	ldr	r3, [pc, #432]	; (80047f8 <HAL_ADC_Start+0x220>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 031f 	and.w	r3, r3, #31
 800464c:	2b00      	cmp	r3, #0
 800464e:	d010      	beq.n	8004672 <HAL_ADC_Start+0x9a>
 8004650:	e005      	b.n	800465e <HAL_ADC_Start+0x86>
 8004652:	4b6a      	ldr	r3, [pc, #424]	; (80047fc <HAL_ADC_Start+0x224>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 031f 	and.w	r3, r3, #31
 800465a:	2b00      	cmp	r3, #0
 800465c:	d009      	beq.n	8004672 <HAL_ADC_Start+0x9a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004666:	d004      	beq.n	8004672 <HAL_ADC_Start+0x9a>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a64      	ldr	r2, [pc, #400]	; (8004800 <HAL_ADC_Start+0x228>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d115      	bne.n	800469e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d036      	beq.n	80046fa <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004694:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800469c:	e02d      	b.n	80046fa <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046b2:	d004      	beq.n	80046be <HAL_ADC_Start+0xe6>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a4e      	ldr	r2, [pc, #312]	; (80047f4 <HAL_ADC_Start+0x21c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d10a      	bne.n	80046d4 <HAL_ADC_Start+0xfc>
 80046be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	bf14      	ite	ne
 80046cc:	2301      	movne	r3, #1
 80046ce:	2300      	moveq	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	e008      	b.n	80046e6 <HAL_ADC_Start+0x10e>
 80046d4:	4b4a      	ldr	r3, [pc, #296]	; (8004800 <HAL_ADC_Start+0x228>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	bf14      	ite	ne
 80046e0:	2301      	movne	r3, #1
 80046e2:	2300      	moveq	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d007      	beq.n	80046fa <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80046f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004706:	d106      	bne.n	8004716 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470c:	f023 0206 	bic.w	r2, r3, #6
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	645a      	str	r2, [r3, #68]	; 0x44
 8004714:	e002      	b.n	800471c <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	221c      	movs	r2, #28
 800472a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004734:	d004      	beq.n	8004740 <HAL_ADC_Start+0x168>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a2e      	ldr	r2, [pc, #184]	; (80047f4 <HAL_ADC_Start+0x21c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d106      	bne.n	800474e <HAL_ADC_Start+0x176>
 8004740:	4b2d      	ldr	r3, [pc, #180]	; (80047f8 <HAL_ADC_Start+0x220>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 031f 	and.w	r3, r3, #31
 8004748:	2b00      	cmp	r3, #0
 800474a:	d03e      	beq.n	80047ca <HAL_ADC_Start+0x1f2>
 800474c:	e005      	b.n	800475a <HAL_ADC_Start+0x182>
 800474e:	4b2b      	ldr	r3, [pc, #172]	; (80047fc <HAL_ADC_Start+0x224>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 031f 	and.w	r3, r3, #31
 8004756:	2b00      	cmp	r3, #0
 8004758:	d037      	beq.n	80047ca <HAL_ADC_Start+0x1f2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004762:	d004      	beq.n	800476e <HAL_ADC_Start+0x196>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a22      	ldr	r2, [pc, #136]	; (80047f4 <HAL_ADC_Start+0x21c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d106      	bne.n	800477c <HAL_ADC_Start+0x1a4>
 800476e:	4b22      	ldr	r3, [pc, #136]	; (80047f8 <HAL_ADC_Start+0x220>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 031f 	and.w	r3, r3, #31
 8004776:	2b05      	cmp	r3, #5
 8004778:	d027      	beq.n	80047ca <HAL_ADC_Start+0x1f2>
 800477a:	e005      	b.n	8004788 <HAL_ADC_Start+0x1b0>
 800477c:	4b1f      	ldr	r3, [pc, #124]	; (80047fc <HAL_ADC_Start+0x224>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 031f 	and.w	r3, r3, #31
 8004784:	2b05      	cmp	r3, #5
 8004786:	d020      	beq.n	80047ca <HAL_ADC_Start+0x1f2>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004790:	d004      	beq.n	800479c <HAL_ADC_Start+0x1c4>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a17      	ldr	r2, [pc, #92]	; (80047f4 <HAL_ADC_Start+0x21c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d106      	bne.n	80047aa <HAL_ADC_Start+0x1d2>
 800479c:	4b16      	ldr	r3, [pc, #88]	; (80047f8 <HAL_ADC_Start+0x220>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 031f 	and.w	r3, r3, #31
 80047a4:	2b09      	cmp	r3, #9
 80047a6:	d010      	beq.n	80047ca <HAL_ADC_Start+0x1f2>
 80047a8:	e005      	b.n	80047b6 <HAL_ADC_Start+0x1de>
 80047aa:	4b14      	ldr	r3, [pc, #80]	; (80047fc <HAL_ADC_Start+0x224>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 031f 	and.w	r3, r3, #31
 80047b2:	2b09      	cmp	r3, #9
 80047b4:	d009      	beq.n	80047ca <HAL_ADC_Start+0x1f2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047be:	d004      	beq.n	80047ca <HAL_ADC_Start+0x1f2>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a0e      	ldr	r2, [pc, #56]	; (8004800 <HAL_ADC_Start+0x228>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d10f      	bne.n	80047ea <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f042 0204 	orr.w	r2, r2, #4
 80047d8:	609a      	str	r2, [r3, #8]
 80047da:	e006      	b.n	80047ea <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80047e4:	e001      	b.n	80047ea <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80047e6:	2302      	movs	r3, #2
 80047e8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80047ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	50000100 	.word	0x50000100
 80047f8:	50000300 	.word	0x50000300
 80047fc:	50000700 	.word	0x50000700
 8004800:	50000400 	.word	0x50000400

08004804 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800480e:	2300      	movs	r3, #0
 8004810:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	2b08      	cmp	r3, #8
 8004818:	d102      	bne.n	8004820 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800481a:	2308      	movs	r3, #8
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	e03a      	b.n	8004896 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004828:	d004      	beq.n	8004834 <HAL_ADC_PollForConversion+0x30>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a72      	ldr	r2, [pc, #456]	; (80049f8 <HAL_ADC_PollForConversion+0x1f4>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d101      	bne.n	8004838 <HAL_ADC_PollForConversion+0x34>
 8004834:	4b71      	ldr	r3, [pc, #452]	; (80049fc <HAL_ADC_PollForConversion+0x1f8>)
 8004836:	e000      	b.n	800483a <HAL_ADC_PollForConversion+0x36>
 8004838:	4b71      	ldr	r3, [pc, #452]	; (8004a00 <HAL_ADC_PollForConversion+0x1fc>)
 800483a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 031f 	and.w	r3, r3, #31
 8004844:	2b00      	cmp	r3, #0
 8004846:	d112      	bne.n	800486e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b01      	cmp	r3, #1
 8004854:	d11d      	bne.n	8004892 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	f043 0220 	orr.w	r2, r3, #32
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e0bf      	b.n	80049ee <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00b      	beq.n	8004892 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	f043 0220 	orr.w	r2, r3, #32
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e0ad      	b.n	80049ee <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8004892:	230c      	movs	r3, #12
 8004894:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800489e:	d004      	beq.n	80048aa <HAL_ADC_PollForConversion+0xa6>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a54      	ldr	r2, [pc, #336]	; (80049f8 <HAL_ADC_PollForConversion+0x1f4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d106      	bne.n	80048b8 <HAL_ADC_PollForConversion+0xb4>
 80048aa:	4b54      	ldr	r3, [pc, #336]	; (80049fc <HAL_ADC_PollForConversion+0x1f8>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 031f 	and.w	r3, r3, #31
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d010      	beq.n	80048d8 <HAL_ADC_PollForConversion+0xd4>
 80048b6:	e005      	b.n	80048c4 <HAL_ADC_PollForConversion+0xc0>
 80048b8:	4b51      	ldr	r3, [pc, #324]	; (8004a00 <HAL_ADC_PollForConversion+0x1fc>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d009      	beq.n	80048d8 <HAL_ADC_PollForConversion+0xd4>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048cc:	d004      	beq.n	80048d8 <HAL_ADC_PollForConversion+0xd4>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a4c      	ldr	r2, [pc, #304]	; (8004a04 <HAL_ADC_PollForConversion+0x200>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d104      	bne.n	80048e2 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	613b      	str	r3, [r7, #16]
 80048e0:	e00f      	b.n	8004902 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048ea:	d004      	beq.n	80048f6 <HAL_ADC_PollForConversion+0xf2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a41      	ldr	r2, [pc, #260]	; (80049f8 <HAL_ADC_PollForConversion+0x1f4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d102      	bne.n	80048fc <HAL_ADC_PollForConversion+0xf8>
 80048f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80048fa:	e000      	b.n	80048fe <HAL_ADC_PollForConversion+0xfa>
 80048fc:	4b41      	ldr	r3, [pc, #260]	; (8004a04 <HAL_ADC_PollForConversion+0x200>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8004902:	f7ff fc3f 	bl	8004184 <HAL_GetTick>
 8004906:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004908:	e021      	b.n	800494e <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004910:	d01d      	beq.n	800494e <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d007      	beq.n	8004928 <HAL_ADC_PollForConversion+0x124>
 8004918:	f7ff fc34 	bl	8004184 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d212      	bcs.n	800494e <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	4013      	ands	r3, r2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10b      	bne.n	800494e <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f043 0204 	orr.w	r2, r3, #4
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e04f      	b.n	80049ee <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	4013      	ands	r3, r2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0d6      	beq.n	800490a <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004972:	2b00      	cmp	r3, #0
 8004974:	d131      	bne.n	80049da <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800497c:	2b00      	cmp	r3, #0
 800497e:	d12c      	bne.n	80049da <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b08      	cmp	r3, #8
 800498c:	d125      	bne.n	80049da <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d112      	bne.n	80049c2 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d112      	bne.n	80049da <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b8:	f043 0201 	orr.w	r2, r3, #1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	641a      	str	r2, [r3, #64]	; 0x40
 80049c0:	e00b      	b.n	80049da <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f043 0220 	orr.w	r2, r3, #32
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d2:	f043 0201 	orr.w	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d103      	bne.n	80049ec <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	50000100 	.word	0x50000100
 80049fc:	50000300 	.word	0x50000300
 8004a00:	50000700 	.word	0x50000700
 8004a04:	50000400 	.word	0x50000400

08004a08 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_ADCEx_Calibration_Start+0x1c>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e05f      	b.n	8004afe <HAL_ADCEx_Calibration_Start+0xdc>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fca0 	bl	800538c <ADC_Disable>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d14e      	bne.n	8004af4 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8004a6a:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d107      	bne.n	8004a82 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a80:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004a90:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8004a92:	f7ff fb77 	bl	8004184 <HAL_GetTick>
 8004a96:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004a98:	e01c      	b.n	8004ad4 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004a9a:	f7ff fb73 	bl	8004184 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b0a      	cmp	r3, #10
 8004aa6:	d915      	bls.n	8004ad4 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ab6:	d10d      	bne.n	8004ad4 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	f023 0312 	bic.w	r3, r3, #18
 8004ac0:	f043 0210 	orr.w	r2, r3, #16
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e014      	b.n	8004afe <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ae2:	d0da      	beq.n	8004a9a <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae8:	f023 0303 	bic.w	r3, r3, #3
 8004aec:	f043 0201 	orr.w	r2, r3, #1
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b09b      	sub	sp, #108	; 0x6c
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_ADC_ConfigChannel+0x22>
 8004b26:	2302      	movs	r3, #2
 8004b28:	e2ca      	b.n	80050c0 <HAL_ADC_ConfigChannel+0x5b8>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f040 82ae 	bne.w	800509e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d81c      	bhi.n	8004b84 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	4613      	mov	r3, r2
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	4413      	add	r3, r2
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	231f      	movs	r3, #31
 8004b60:	4093      	lsls	r3, r2
 8004b62:	43db      	mvns	r3, r3
 8004b64:	4019      	ands	r1, r3
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	6818      	ldr	r0, [r3, #0]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	4413      	add	r3, r2
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	fa00 f203 	lsl.w	r2, r0, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	631a      	str	r2, [r3, #48]	; 0x30
 8004b82:	e063      	b.n	8004c4c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b09      	cmp	r3, #9
 8004b8a:	d81e      	bhi.n	8004bca <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	4613      	mov	r3, r2
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	4413      	add	r3, r2
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	3b1e      	subs	r3, #30
 8004ba0:	221f      	movs	r2, #31
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	43db      	mvns	r3, r3
 8004ba8:	4019      	ands	r1, r3
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	6818      	ldr	r0, [r3, #0]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	4413      	add	r3, r2
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	3b1e      	subs	r3, #30
 8004bbc:	fa00 f203 	lsl.w	r2, r0, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	635a      	str	r2, [r3, #52]	; 0x34
 8004bc8:	e040      	b.n	8004c4c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b0e      	cmp	r3, #14
 8004bd0:	d81e      	bhi.n	8004c10 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	4413      	add	r3, r2
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	3b3c      	subs	r3, #60	; 0x3c
 8004be6:	221f      	movs	r2, #31
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	43db      	mvns	r3, r3
 8004bee:	4019      	ands	r1, r3
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	6818      	ldr	r0, [r3, #0]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	4413      	add	r3, r2
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	3b3c      	subs	r3, #60	; 0x3c
 8004c02:	fa00 f203 	lsl.w	r2, r0, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	639a      	str	r2, [r3, #56]	; 0x38
 8004c0e:	e01d      	b.n	8004c4c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	4413      	add	r3, r2
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	3b5a      	subs	r3, #90	; 0x5a
 8004c24:	221f      	movs	r2, #31
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	4019      	ands	r1, r3
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	4613      	mov	r3, r2
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	4413      	add	r3, r2
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	3b5a      	subs	r3, #90	; 0x5a
 8004c40:	fa00 f203 	lsl.w	r2, r0, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 030c 	and.w	r3, r3, #12
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f040 80e5 	bne.w	8004e26 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b09      	cmp	r3, #9
 8004c62:	d91c      	bls.n	8004c9e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6999      	ldr	r1, [r3, #24]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	4413      	add	r3, r2
 8004c74:	3b1e      	subs	r3, #30
 8004c76:	2207      	movs	r2, #7
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	4019      	ands	r1, r3
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	6898      	ldr	r0, [r3, #8]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	4413      	add	r3, r2
 8004c8e:	3b1e      	subs	r3, #30
 8004c90:	fa00 f203 	lsl.w	r2, r0, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	619a      	str	r2, [r3, #24]
 8004c9c:	e019      	b.n	8004cd2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6959      	ldr	r1, [r3, #20]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	4413      	add	r3, r2
 8004cae:	2207      	movs	r2, #7
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	4019      	ands	r1, r3
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	6898      	ldr	r0, [r3, #8]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	4413      	add	r3, r2
 8004cc6:	fa00 f203 	lsl.w	r2, r0, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	695a      	ldr	r2, [r3, #20]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	08db      	lsrs	r3, r3, #3
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d84f      	bhi.n	8004d94 <HAL_ADC_ConfigChannel+0x28c>
 8004cf4:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <HAL_ADC_ConfigChannel+0x1f4>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d0d 	.word	0x08004d0d
 8004d00:	08004d2f 	.word	0x08004d2f
 8004d04:	08004d51 	.word	0x08004d51
 8004d08:	08004d73 	.word	0x08004d73
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d12:	4b9a      	ldr	r3, [pc, #616]	; (8004f7c <HAL_ADC_ConfigChannel+0x474>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	6812      	ldr	r2, [r2, #0]
 8004d1a:	0691      	lsls	r1, r2, #26
 8004d1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	431a      	orrs	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004d2a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004d2c:	e07e      	b.n	8004e2c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004d34:	4b91      	ldr	r3, [pc, #580]	; (8004f7c <HAL_ADC_ConfigChannel+0x474>)
 8004d36:	4013      	ands	r3, r2
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	6812      	ldr	r2, [r2, #0]
 8004d3c:	0691      	lsls	r1, r2, #26
 8004d3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d40:	430a      	orrs	r2, r1
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004d4c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004d4e:	e06d      	b.n	8004e2c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004d56:	4b89      	ldr	r3, [pc, #548]	; (8004f7c <HAL_ADC_ConfigChannel+0x474>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	6812      	ldr	r2, [r2, #0]
 8004d5e:	0691      	lsls	r1, r2, #26
 8004d60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d62:	430a      	orrs	r2, r1
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004d6e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004d70:	e05c      	b.n	8004e2c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004d78:	4b80      	ldr	r3, [pc, #512]	; (8004f7c <HAL_ADC_ConfigChannel+0x474>)
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	0691      	lsls	r1, r2, #26
 8004d82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d84:	430a      	orrs	r2, r1
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004d90:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004d92:	e04b      	b.n	8004e2c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	069b      	lsls	r3, r3, #26
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d107      	bne.n	8004db8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004db6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	069b      	lsls	r3, r3, #26
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d107      	bne.n	8004ddc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004dda:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004de2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	069b      	lsls	r3, r3, #26
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d107      	bne.n	8004e00 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004dfe:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	069b      	lsls	r3, r3, #26
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d10a      	bne.n	8004e2a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004e22:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004e24:	e001      	b.n	8004e2a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8004e26:	bf00      	nop
 8004e28:	e000      	b.n	8004e2c <HAL_ADC_ConfigChannel+0x324>
      break;
 8004e2a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d108      	bne.n	8004e4c <HAL_ADC_ConfigChannel+0x344>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <HAL_ADC_ConfigChannel+0x344>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e000      	b.n	8004e4e <HAL_ADC_ConfigChannel+0x346>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f040 8130 	bne.w	80050b4 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d00f      	beq.n	8004e7c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6e:	43da      	mvns	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	400a      	ands	r2, r1
 8004e76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004e7a:	e049      	b.n	8004f10 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	409a      	lsls	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b09      	cmp	r3, #9
 8004e9c:	d91c      	bls.n	8004ed8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6999      	ldr	r1, [r3, #24]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	4413      	add	r3, r2
 8004eae:	3b1b      	subs	r3, #27
 8004eb0:	2207      	movs	r2, #7
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	43db      	mvns	r3, r3
 8004eb8:	4019      	ands	r1, r3
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6898      	ldr	r0, [r3, #8]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	4413      	add	r3, r2
 8004ec8:	3b1b      	subs	r3, #27
 8004eca:	fa00 f203 	lsl.w	r2, r0, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	619a      	str	r2, [r3, #24]
 8004ed6:	e01b      	b.n	8004f10 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6959      	ldr	r1, [r3, #20]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	4413      	add	r3, r2
 8004eea:	2207      	movs	r2, #7
 8004eec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef0:	43db      	mvns	r3, r3
 8004ef2:	4019      	ands	r1, r3
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	6898      	ldr	r0, [r3, #8]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	4613      	mov	r3, r2
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	4413      	add	r3, r2
 8004f04:	fa00 f203 	lsl.w	r2, r0, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f18:	d004      	beq.n	8004f24 <HAL_ADC_ConfigChannel+0x41c>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a18      	ldr	r2, [pc, #96]	; (8004f80 <HAL_ADC_ConfigChannel+0x478>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d101      	bne.n	8004f28 <HAL_ADC_ConfigChannel+0x420>
 8004f24:	4b17      	ldr	r3, [pc, #92]	; (8004f84 <HAL_ADC_ConfigChannel+0x47c>)
 8004f26:	e000      	b.n	8004f2a <HAL_ADC_ConfigChannel+0x422>
 8004f28:	4b17      	ldr	r3, [pc, #92]	; (8004f88 <HAL_ADC_ConfigChannel+0x480>)
 8004f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b10      	cmp	r3, #16
 8004f32:	d105      	bne.n	8004f40 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d015      	beq.n	8004f6c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004f44:	2b11      	cmp	r3, #17
 8004f46:	d105      	bne.n	8004f54 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00b      	beq.n	8004f6c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004f58:	2b12      	cmp	r3, #18
 8004f5a:	f040 80ab 	bne.w	80050b4 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f040 80a4 	bne.w	80050b4 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f74:	d10a      	bne.n	8004f8c <HAL_ADC_ConfigChannel+0x484>
 8004f76:	4b02      	ldr	r3, [pc, #8]	; (8004f80 <HAL_ADC_ConfigChannel+0x478>)
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	e022      	b.n	8004fc2 <HAL_ADC_ConfigChannel+0x4ba>
 8004f7c:	83fff000 	.word	0x83fff000
 8004f80:	50000100 	.word	0x50000100
 8004f84:	50000300 	.word	0x50000300
 8004f88:	50000700 	.word	0x50000700
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a4e      	ldr	r2, [pc, #312]	; (80050cc <HAL_ADC_ConfigChannel+0x5c4>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d103      	bne.n	8004f9e <HAL_ADC_ConfigChannel+0x496>
 8004f96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	e011      	b.n	8004fc2 <HAL_ADC_ConfigChannel+0x4ba>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a4b      	ldr	r2, [pc, #300]	; (80050d0 <HAL_ADC_ConfigChannel+0x5c8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d102      	bne.n	8004fae <HAL_ADC_ConfigChannel+0x4a6>
 8004fa8:	4b4a      	ldr	r3, [pc, #296]	; (80050d4 <HAL_ADC_ConfigChannel+0x5cc>)
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	e009      	b.n	8004fc2 <HAL_ADC_ConfigChannel+0x4ba>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a48      	ldr	r2, [pc, #288]	; (80050d4 <HAL_ADC_ConfigChannel+0x5cc>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d102      	bne.n	8004fbe <HAL_ADC_ConfigChannel+0x4b6>
 8004fb8:	4b45      	ldr	r3, [pc, #276]	; (80050d0 <HAL_ADC_ConfigChannel+0x5c8>)
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	e001      	b.n	8004fc2 <HAL_ADC_ConfigChannel+0x4ba>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f003 0303 	and.w	r3, r3, #3
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d108      	bne.n	8004fe2 <HAL_ADC_ConfigChannel+0x4da>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_ADC_ConfigChannel+0x4da>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e000      	b.n	8004fe4 <HAL_ADC_ConfigChannel+0x4dc>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d150      	bne.n	800508a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004fe8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d010      	beq.n	8005010 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d107      	bne.n	800500a <HAL_ADC_ConfigChannel+0x502>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b01      	cmp	r3, #1
 8005004:	d101      	bne.n	800500a <HAL_ADC_ConfigChannel+0x502>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <HAL_ADC_ConfigChannel+0x504>
 800500a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800500c:	2b00      	cmp	r3, #0
 800500e:	d13c      	bne.n	800508a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b10      	cmp	r3, #16
 8005016:	d11d      	bne.n	8005054 <HAL_ADC_ConfigChannel+0x54c>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005020:	d118      	bne.n	8005054 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800502a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800502c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800502e:	4b2a      	ldr	r3, [pc, #168]	; (80050d8 <HAL_ADC_ConfigChannel+0x5d0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a2a      	ldr	r2, [pc, #168]	; (80050dc <HAL_ADC_ConfigChannel+0x5d4>)
 8005034:	fba2 2303 	umull	r2, r3, r2, r3
 8005038:	0c9a      	lsrs	r2, r3, #18
 800503a:	4613      	mov	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005044:	e002      	b.n	800504c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	3b01      	subs	r3, #1
 800504a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f9      	bne.n	8005046 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005052:	e02e      	b.n	80050b2 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b11      	cmp	r3, #17
 800505a:	d10b      	bne.n	8005074 <HAL_ADC_ConfigChannel+0x56c>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005064:	d106      	bne.n	8005074 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800506e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005070:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005072:	e01e      	b.n	80050b2 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b12      	cmp	r3, #18
 800507a:	d11a      	bne.n	80050b2 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800507c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005084:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005086:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005088:	e013      	b.n	80050b2 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f043 0220 	orr.w	r2, r3, #32
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800509c:	e00a      	b.n	80050b4 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	f043 0220 	orr.w	r2, r3, #32
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80050b0:	e000      	b.n	80050b4 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80050b2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80050bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	376c      	adds	r7, #108	; 0x6c
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	50000100 	.word	0x50000100
 80050d0:	50000400 	.word	0x50000400
 80050d4:	50000500 	.word	0x50000500
 80050d8:	200000b0 	.word	0x200000b0
 80050dc:	431bde83 	.word	0x431bde83

080050e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b099      	sub	sp, #100	; 0x64
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050f8:	d102      	bne.n	8005100 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80050fa:	4b6d      	ldr	r3, [pc, #436]	; (80052b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80050fc:	60bb      	str	r3, [r7, #8]
 80050fe:	e01a      	b.n	8005136 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a6a      	ldr	r2, [pc, #424]	; (80052b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d103      	bne.n	8005112 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800510a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800510e:	60bb      	str	r3, [r7, #8]
 8005110:	e011      	b.n	8005136 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a67      	ldr	r2, [pc, #412]	; (80052b4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d102      	bne.n	8005122 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800511c:	4b66      	ldr	r3, [pc, #408]	; (80052b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800511e:	60bb      	str	r3, [r7, #8]
 8005120:	e009      	b.n	8005136 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a64      	ldr	r2, [pc, #400]	; (80052b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d102      	bne.n	8005132 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800512c:	4b61      	ldr	r3, [pc, #388]	; (80052b4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800512e:	60bb      	str	r3, [r7, #8]
 8005130:	e001      	b.n	8005136 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005132:	2300      	movs	r3, #0
 8005134:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e0b0      	b.n	80052a2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005146:	2b01      	cmp	r3, #1
 8005148:	d101      	bne.n	800514e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800514a:	2302      	movs	r3, #2
 800514c:	e0a9      	b.n	80052a2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	f040 808d 	bne.w	8005280 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 0304 	and.w	r3, r3, #4
 800516e:	2b00      	cmp	r3, #0
 8005170:	f040 8086 	bne.w	8005280 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800517c:	d004      	beq.n	8005188 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a4b      	ldr	r2, [pc, #300]	; (80052b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d101      	bne.n	800518c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005188:	4b4c      	ldr	r3, [pc, #304]	; (80052bc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800518a:	e000      	b.n	800518e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800518c:	4b4c      	ldr	r3, [pc, #304]	; (80052c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800518e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d040      	beq.n	800521a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005198:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	6859      	ldr	r1, [r3, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051aa:	035b      	lsls	r3, r3, #13
 80051ac:	430b      	orrs	r3, r1
 80051ae:	431a      	orrs	r2, r3
 80051b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051b2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 0303 	and.w	r3, r3, #3
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d108      	bne.n	80051d4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80051d0:	2301      	movs	r3, #1
 80051d2:	e000      	b.n	80051d6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80051d4:	2300      	movs	r3, #0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d15c      	bne.n	8005294 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d107      	bne.n	80051f6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d101      	bne.n	80051f6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e000      	b.n	80051f8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80051f6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d14b      	bne.n	8005294 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80051fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005204:	f023 030f 	bic.w	r3, r3, #15
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	6811      	ldr	r1, [r2, #0]
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	6892      	ldr	r2, [r2, #8]
 8005210:	430a      	orrs	r2, r1
 8005212:	431a      	orrs	r2, r3
 8005214:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005216:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005218:	e03c      	b.n	8005294 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800521a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005224:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 0303 	and.w	r3, r3, #3
 8005230:	2b01      	cmp	r3, #1
 8005232:	d108      	bne.n	8005246 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005242:	2301      	movs	r3, #1
 8005244:	e000      	b.n	8005248 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005246:	2300      	movs	r3, #0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d123      	bne.n	8005294 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	2b01      	cmp	r3, #1
 8005256:	d107      	bne.n	8005268 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b01      	cmp	r3, #1
 8005262:	d101      	bne.n	8005268 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8005268:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800526a:	2b00      	cmp	r3, #0
 800526c:	d112      	bne.n	8005294 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800526e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005276:	f023 030f 	bic.w	r3, r3, #15
 800527a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800527c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800527e:	e009      	b.n	8005294 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	f043 0220 	orr.w	r2, r3, #32
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005292:	e000      	b.n	8005296 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005294:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800529e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80052a2:	4618      	mov	r0, r3
 80052a4:	3764      	adds	r7, #100	; 0x64
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	50000100 	.word	0x50000100
 80052b4:	50000400 	.word	0x50000400
 80052b8:	50000500 	.word	0x50000500
 80052bc:	50000300 	.word	0x50000300
 80052c0:	50000700 	.word	0x50000700

080052c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d108      	bne.n	80052f0 <ADC_Enable+0x2c>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d101      	bne.n	80052f0 <ADC_Enable+0x2c>
 80052ec:	2301      	movs	r3, #1
 80052ee:	e000      	b.n	80052f2 <ADC_Enable+0x2e>
 80052f0:	2300      	movs	r3, #0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d143      	bne.n	800537e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	4b22      	ldr	r3, [pc, #136]	; (8005388 <ADC_Enable+0xc4>)
 80052fe:	4013      	ands	r3, r2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00d      	beq.n	8005320 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005308:	f043 0210 	orr.w	r2, r3, #16
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005314:	f043 0201 	orr.w	r2, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e02f      	b.n	8005380 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689a      	ldr	r2, [r3, #8]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0201 	orr.w	r2, r2, #1
 800532e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8005330:	f7fe ff28 	bl	8004184 <HAL_GetTick>
 8005334:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005336:	e01b      	b.n	8005370 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005338:	f7fe ff24 	bl	8004184 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d914      	bls.n	8005370 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b01      	cmp	r3, #1
 8005352:	d00d      	beq.n	8005370 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005358:	f043 0210 	orr.w	r2, r3, #16
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005364:	f043 0201 	orr.w	r2, r3, #1
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e007      	b.n	8005380 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b01      	cmp	r3, #1
 800537c:	d1dc      	bne.n	8005338 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	8000003f 	.word	0x8000003f

0800538c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d108      	bne.n	80053b8 <ADC_Disable+0x2c>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <ADC_Disable+0x2c>
 80053b4:	2301      	movs	r3, #1
 80053b6:	e000      	b.n	80053ba <ADC_Disable+0x2e>
 80053b8:	2300      	movs	r3, #0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d047      	beq.n	800544e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 030d 	and.w	r3, r3, #13
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d10f      	bne.n	80053ec <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0202 	orr.w	r2, r2, #2
 80053da:	609a      	str	r2, [r3, #8]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2203      	movs	r2, #3
 80053e2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80053e4:	f7fe fece 	bl	8004184 <HAL_GetTick>
 80053e8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80053ea:	e029      	b.n	8005440 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	f043 0210 	orr.w	r2, r3, #16
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fc:	f043 0201 	orr.w	r2, r3, #1
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e023      	b.n	8005450 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005408:	f7fe febc 	bl	8004184 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d914      	bls.n	8005440 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b01      	cmp	r3, #1
 8005422:	d10d      	bne.n	8005440 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	f043 0210 	orr.w	r2, r3, #16
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005434:	f043 0201 	orr.w	r2, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e007      	b.n	8005450 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b01      	cmp	r3, #1
 800544c:	d0dc      	beq.n	8005408 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005468:	4b0c      	ldr	r3, [pc, #48]	; (800549c <__NVIC_SetPriorityGrouping+0x44>)
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005474:	4013      	ands	r3, r2
 8005476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800548a:	4a04      	ldr	r2, [pc, #16]	; (800549c <__NVIC_SetPriorityGrouping+0x44>)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	60d3      	str	r3, [r2, #12]
}
 8005490:	bf00      	nop
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	e000ed00 	.word	0xe000ed00

080054a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054a4:	4b04      	ldr	r3, [pc, #16]	; (80054b8 <__NVIC_GetPriorityGrouping+0x18>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	0a1b      	lsrs	r3, r3, #8
 80054aa:	f003 0307 	and.w	r3, r3, #7
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	e000ed00 	.word	0xe000ed00

080054bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	4603      	mov	r3, r0
 80054c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	db0b      	blt.n	80054e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054ce:	79fb      	ldrb	r3, [r7, #7]
 80054d0:	f003 021f 	and.w	r2, r3, #31
 80054d4:	4907      	ldr	r1, [pc, #28]	; (80054f4 <__NVIC_EnableIRQ+0x38>)
 80054d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	2001      	movs	r0, #1
 80054de:	fa00 f202 	lsl.w	r2, r0, r2
 80054e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	e000e100 	.word	0xe000e100

080054f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	4603      	mov	r3, r0
 8005500:	6039      	str	r1, [r7, #0]
 8005502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005508:	2b00      	cmp	r3, #0
 800550a:	db0a      	blt.n	8005522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	b2da      	uxtb	r2, r3
 8005510:	490c      	ldr	r1, [pc, #48]	; (8005544 <__NVIC_SetPriority+0x4c>)
 8005512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005516:	0112      	lsls	r2, r2, #4
 8005518:	b2d2      	uxtb	r2, r2
 800551a:	440b      	add	r3, r1
 800551c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005520:	e00a      	b.n	8005538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	b2da      	uxtb	r2, r3
 8005526:	4908      	ldr	r1, [pc, #32]	; (8005548 <__NVIC_SetPriority+0x50>)
 8005528:	79fb      	ldrb	r3, [r7, #7]
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	3b04      	subs	r3, #4
 8005530:	0112      	lsls	r2, r2, #4
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	440b      	add	r3, r1
 8005536:	761a      	strb	r2, [r3, #24]
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	e000e100 	.word	0xe000e100
 8005548:	e000ed00 	.word	0xe000ed00

0800554c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800554c:	b480      	push	{r7}
 800554e:	b089      	sub	sp, #36	; 0x24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f1c3 0307 	rsb	r3, r3, #7
 8005566:	2b04      	cmp	r3, #4
 8005568:	bf28      	it	cs
 800556a:	2304      	movcs	r3, #4
 800556c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	3304      	adds	r3, #4
 8005572:	2b06      	cmp	r3, #6
 8005574:	d902      	bls.n	800557c <NVIC_EncodePriority+0x30>
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	3b03      	subs	r3, #3
 800557a:	e000      	b.n	800557e <NVIC_EncodePriority+0x32>
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005580:	f04f 32ff 	mov.w	r2, #4294967295
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	fa02 f303 	lsl.w	r3, r2, r3
 800558a:	43da      	mvns	r2, r3
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	401a      	ands	r2, r3
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005594:	f04f 31ff 	mov.w	r1, #4294967295
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	fa01 f303 	lsl.w	r3, r1, r3
 800559e:	43d9      	mvns	r1, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055a4:	4313      	orrs	r3, r2
         );
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3724      	adds	r7, #36	; 0x24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
	...

080055b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3b01      	subs	r3, #1
 80055c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055c4:	d301      	bcc.n	80055ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055c6:	2301      	movs	r3, #1
 80055c8:	e00f      	b.n	80055ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055ca:	4a0a      	ldr	r2, [pc, #40]	; (80055f4 <SysTick_Config+0x40>)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3b01      	subs	r3, #1
 80055d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055d2:	210f      	movs	r1, #15
 80055d4:	f04f 30ff 	mov.w	r0, #4294967295
 80055d8:	f7ff ff8e 	bl	80054f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055dc:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <SysTick_Config+0x40>)
 80055de:	2200      	movs	r2, #0
 80055e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055e2:	4b04      	ldr	r3, [pc, #16]	; (80055f4 <SysTick_Config+0x40>)
 80055e4:	2207      	movs	r2, #7
 80055e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	e000e010 	.word	0xe000e010

080055f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7ff ff29 	bl	8005458 <__NVIC_SetPriorityGrouping>
}
 8005606:	bf00      	nop
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b086      	sub	sp, #24
 8005612:	af00      	add	r7, sp, #0
 8005614:	4603      	mov	r3, r0
 8005616:	60b9      	str	r1, [r7, #8]
 8005618:	607a      	str	r2, [r7, #4]
 800561a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800561c:	2300      	movs	r3, #0
 800561e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005620:	f7ff ff3e 	bl	80054a0 <__NVIC_GetPriorityGrouping>
 8005624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	68b9      	ldr	r1, [r7, #8]
 800562a:	6978      	ldr	r0, [r7, #20]
 800562c:	f7ff ff8e 	bl	800554c <NVIC_EncodePriority>
 8005630:	4602      	mov	r2, r0
 8005632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005636:	4611      	mov	r1, r2
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff ff5d 	bl	80054f8 <__NVIC_SetPriority>
}
 800563e:	bf00      	nop
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b082      	sub	sp, #8
 800564a:	af00      	add	r7, sp, #0
 800564c:	4603      	mov	r3, r0
 800564e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005654:	4618      	mov	r0, r3
 8005656:	f7ff ff31 	bl	80054bc <__NVIC_EnableIRQ>
}
 800565a:	bf00      	nop
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b082      	sub	sp, #8
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7ff ffa2 	bl	80055b4 <SysTick_Config>
 8005670:	4603      	mov	r3, r0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b082      	sub	sp, #8
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e014      	b.n	80056b6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	791b      	ldrb	r3, [r3, #4]
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d105      	bne.n	80056a2 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7fe fa6b 	bl	8003b78 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2202      	movs	r2, #2
 80056a6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80056be:	b480      	push	{r7}
 80056c0:	b087      	sub	sp, #28
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	607a      	str	r2, [r7, #4]
 80056ca:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d105      	bne.n	80056e8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4413      	add	r3, r2
 80056e2:	3308      	adds	r3, #8
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	e004      	b.n	80056f2 <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4413      	add	r3, r2
 80056ee:	3314      	adds	r3, #20
 80056f0:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	461a      	mov	r2, r3
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	371c      	adds	r7, #28
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	795b      	ldrb	r3, [r3, #5]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d101      	bne.n	800571e <HAL_DAC_Start+0x16>
 800571a:	2302      	movs	r3, #2
 800571c:	e039      	b.n	8005792 <HAL_DAC_Start+0x8a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6819      	ldr	r1, [r3, #0]
 8005730:	2201      	movs	r2, #1
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	409a      	lsls	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10f      	bne.n	8005764 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800574e:	2b3c      	cmp	r3, #60	; 0x3c
 8005750:	d118      	bne.n	8005784 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0201 	orr.w	r2, r2, #1
 8005760:	605a      	str	r2, [r3, #4]
 8005762:	e00f      	b.n	8005784 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800576e:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8005772:	d107      	bne.n	8005784 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0202 	orr.w	r2, r2, #2
 8005782:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800579e:	b480      	push	{r7}
 80057a0:	b087      	sub	sp, #28
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	617b      	str	r3, [r7, #20]
 80057ae:	2300      	movs	r3, #0
 80057b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	795b      	ldrb	r3, [r3, #5]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <HAL_DAC_ConfigChannel+0x20>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e036      	b.n	800582c <HAL_DAC_ConfigChannel+0x8e>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2202      	movs	r2, #2
 80057c8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80057d2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	fa02 f303 	lsl.w	r3, r2, r3
 80057dc:	43db      	mvns	r3, r3
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	4013      	ands	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	fa02 f303 	lsl.w	r3, r2, r3
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6819      	ldr	r1, [r3, #0]
 800580c:	22c0      	movs	r2, #192	; 0xc0
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	fa02 f303 	lsl.w	r3, r2, r3
 8005814:	43da      	mvns	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	400a      	ands	r2, r1
 800581c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2201      	movs	r2, #1
 8005822:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005846:	2b02      	cmp	r3, #2
 8005848:	d008      	beq.n	800585c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2204      	movs	r2, #4
 800584e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e020      	b.n	800589e <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 020e 	bic.w	r2, r2, #14
 800586a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 0201 	bic.w	r2, r2, #1
 800587a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005884:	2101      	movs	r1, #1
 8005886:	fa01 f202 	lsl.w	r2, r1, r2
 800588a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b084      	sub	sp, #16
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d005      	beq.n	80058cc <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2204      	movs	r2, #4
 80058c4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	73fb      	strb	r3, [r7, #15]
 80058ca:	e027      	b.n	800591c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 020e 	bic.w	r2, r2, #14
 80058da:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 0201 	bic.w	r2, r2, #1
 80058ea:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f4:	2101      	movs	r1, #1
 80058f6:	fa01 f202 	lsl.w	r2, r1, r2
 80058fa:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	4798      	blx	r3
    } 
  }
  return status;
 800591c:	7bfb      	ldrb	r3, [r7, #15]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
	...

08005928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005932:	2300      	movs	r3, #0
 8005934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005936:	e160      	b.n	8005bfa <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	2101      	movs	r1, #1
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	fa01 f303 	lsl.w	r3, r1, r3
 8005944:	4013      	ands	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 8152 	beq.w	8005bf4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f003 0303 	and.w	r3, r3, #3
 8005958:	2b01      	cmp	r3, #1
 800595a:	d005      	beq.n	8005968 <HAL_GPIO_Init+0x40>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f003 0303 	and.w	r3, r3, #3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d130      	bne.n	80059ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	2203      	movs	r2, #3
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	43db      	mvns	r3, r3
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	4013      	ands	r3, r2
 800597e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	68da      	ldr	r2, [r3, #12]
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	fa02 f303 	lsl.w	r3, r2, r3
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	4313      	orrs	r3, r2
 8005990:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800599e:	2201      	movs	r2, #1
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	fa02 f303 	lsl.w	r3, r2, r3
 80059a6:	43db      	mvns	r3, r3
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	4013      	ands	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	091b      	lsrs	r3, r3, #4
 80059b4:	f003 0201 	and.w	r2, r3, #1
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	fa02 f303 	lsl.w	r3, r2, r3
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f003 0303 	and.w	r3, r3, #3
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d017      	beq.n	8005a06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	2203      	movs	r2, #3
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	43db      	mvns	r3, r3
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	4013      	ands	r3, r2
 80059ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	fa02 f303 	lsl.w	r3, r2, r3
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d123      	bne.n	8005a5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	08da      	lsrs	r2, r3, #3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	3208      	adds	r2, #8
 8005a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	220f      	movs	r2, #15
 8005a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2e:	43db      	mvns	r3, r3
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4013      	ands	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	691a      	ldr	r2, [r3, #16]
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f003 0307 	and.w	r3, r3, #7
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	fa02 f303 	lsl.w	r3, r2, r3
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	08da      	lsrs	r2, r3, #3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3208      	adds	r2, #8
 8005a54:	6939      	ldr	r1, [r7, #16]
 8005a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	2203      	movs	r2, #3
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	43db      	mvns	r3, r3
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f003 0203 	and.w	r2, r3, #3
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 80ac 	beq.w	8005bf4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a9c:	4b5e      	ldr	r3, [pc, #376]	; (8005c18 <HAL_GPIO_Init+0x2f0>)
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	4a5d      	ldr	r2, [pc, #372]	; (8005c18 <HAL_GPIO_Init+0x2f0>)
 8005aa2:	f043 0301 	orr.w	r3, r3, #1
 8005aa6:	6193      	str	r3, [r2, #24]
 8005aa8:	4b5b      	ldr	r3, [pc, #364]	; (8005c18 <HAL_GPIO_Init+0x2f0>)
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	60bb      	str	r3, [r7, #8]
 8005ab2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005ab4:	4a59      	ldr	r2, [pc, #356]	; (8005c1c <HAL_GPIO_Init+0x2f4>)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	089b      	lsrs	r3, r3, #2
 8005aba:	3302      	adds	r3, #2
 8005abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f003 0303 	and.w	r3, r3, #3
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	220f      	movs	r2, #15
 8005acc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad0:	43db      	mvns	r3, r3
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005ade:	d025      	beq.n	8005b2c <HAL_GPIO_Init+0x204>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a4f      	ldr	r2, [pc, #316]	; (8005c20 <HAL_GPIO_Init+0x2f8>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d01f      	beq.n	8005b28 <HAL_GPIO_Init+0x200>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a4e      	ldr	r2, [pc, #312]	; (8005c24 <HAL_GPIO_Init+0x2fc>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d019      	beq.n	8005b24 <HAL_GPIO_Init+0x1fc>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a4d      	ldr	r2, [pc, #308]	; (8005c28 <HAL_GPIO_Init+0x300>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d013      	beq.n	8005b20 <HAL_GPIO_Init+0x1f8>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a4c      	ldr	r2, [pc, #304]	; (8005c2c <HAL_GPIO_Init+0x304>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00d      	beq.n	8005b1c <HAL_GPIO_Init+0x1f4>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a4b      	ldr	r2, [pc, #300]	; (8005c30 <HAL_GPIO_Init+0x308>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d007      	beq.n	8005b18 <HAL_GPIO_Init+0x1f0>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a4a      	ldr	r2, [pc, #296]	; (8005c34 <HAL_GPIO_Init+0x30c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d101      	bne.n	8005b14 <HAL_GPIO_Init+0x1ec>
 8005b10:	2306      	movs	r3, #6
 8005b12:	e00c      	b.n	8005b2e <HAL_GPIO_Init+0x206>
 8005b14:	2307      	movs	r3, #7
 8005b16:	e00a      	b.n	8005b2e <HAL_GPIO_Init+0x206>
 8005b18:	2305      	movs	r3, #5
 8005b1a:	e008      	b.n	8005b2e <HAL_GPIO_Init+0x206>
 8005b1c:	2304      	movs	r3, #4
 8005b1e:	e006      	b.n	8005b2e <HAL_GPIO_Init+0x206>
 8005b20:	2303      	movs	r3, #3
 8005b22:	e004      	b.n	8005b2e <HAL_GPIO_Init+0x206>
 8005b24:	2302      	movs	r3, #2
 8005b26:	e002      	b.n	8005b2e <HAL_GPIO_Init+0x206>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e000      	b.n	8005b2e <HAL_GPIO_Init+0x206>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	f002 0203 	and.w	r2, r2, #3
 8005b34:	0092      	lsls	r2, r2, #2
 8005b36:	4093      	lsls	r3, r2
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005b3e:	4937      	ldr	r1, [pc, #220]	; (8005c1c <HAL_GPIO_Init+0x2f4>)
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	089b      	lsrs	r3, r3, #2
 8005b44:	3302      	adds	r3, #2
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b4c:	4b3a      	ldr	r3, [pc, #232]	; (8005c38 <HAL_GPIO_Init+0x310>)
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	43db      	mvns	r3, r3
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005b70:	4a31      	ldr	r2, [pc, #196]	; (8005c38 <HAL_GPIO_Init+0x310>)
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b76:	4b30      	ldr	r3, [pc, #192]	; (8005c38 <HAL_GPIO_Init+0x310>)
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	43db      	mvns	r3, r3
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	4013      	ands	r3, r2
 8005b84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005b9a:	4a27      	ldr	r2, [pc, #156]	; (8005c38 <HAL_GPIO_Init+0x310>)
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005ba0:	4b25      	ldr	r3, [pc, #148]	; (8005c38 <HAL_GPIO_Init+0x310>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	43db      	mvns	r3, r3
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	4013      	ands	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005bc4:	4a1c      	ldr	r2, [pc, #112]	; (8005c38 <HAL_GPIO_Init+0x310>)
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005bca:	4b1b      	ldr	r3, [pc, #108]	; (8005c38 <HAL_GPIO_Init+0x310>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	43db      	mvns	r3, r3
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005bee:	4a12      	ldr	r2, [pc, #72]	; (8005c38 <HAL_GPIO_Init+0x310>)
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	fa22 f303 	lsr.w	r3, r2, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f47f ae97 	bne.w	8005938 <HAL_GPIO_Init+0x10>
  }
}
 8005c0a:	bf00      	nop
 8005c0c:	bf00      	nop
 8005c0e:	371c      	adds	r7, #28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	40010000 	.word	0x40010000
 8005c20:	48000400 	.word	0x48000400
 8005c24:	48000800 	.word	0x48000800
 8005c28:	48000c00 	.word	0x48000c00
 8005c2c:	48001000 	.word	0x48001000
 8005c30:	48001400 	.word	0x48001400
 8005c34:	48001800 	.word	0x48001800
 8005c38:	40010400 	.word	0x40010400

08005c3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691a      	ldr	r2, [r3, #16]
 8005c4c:	887b      	ldrh	r3, [r7, #2]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c54:	2301      	movs	r3, #1
 8005c56:	73fb      	strb	r3, [r7, #15]
 8005c58:	e001      	b.n	8005c5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	460b      	mov	r3, r1
 8005c76:	807b      	strh	r3, [r7, #2]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c7c:	787b      	ldrb	r3, [r7, #1]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c82:	887a      	ldrh	r2, [r7, #2]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c88:	e002      	b.n	8005c90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c8a:	887a      	ldrh	r2, [r7, #2]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005ca6:	4b08      	ldr	r3, [pc, #32]	; (8005cc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ca8:	695a      	ldr	r2, [r3, #20]
 8005caa:	88fb      	ldrh	r3, [r7, #6]
 8005cac:	4013      	ands	r3, r2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d006      	beq.n	8005cc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005cb2:	4a05      	ldr	r2, [pc, #20]	; (8005cc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005cb4:	88fb      	ldrh	r3, [r7, #6]
 8005cb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005cb8:	88fb      	ldrh	r3, [r7, #6]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fc fade 	bl	800227c <HAL_GPIO_EXTI_Callback>
  }
}
 8005cc0:	bf00      	nop
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	40010400 	.word	0x40010400

08005ccc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e081      	b.n	8005de2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7fd ff7e 	bl	8003bf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2224      	movs	r2, #36	; 0x24
 8005cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0201 	bic.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d107      	bne.n	8005d46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	689a      	ldr	r2, [r3, #8]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d42:	609a      	str	r2, [r3, #8]
 8005d44:	e006      	b.n	8005d54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	689a      	ldr	r2, [r3, #8]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005d52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d104      	bne.n	8005d66 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6812      	ldr	r2, [r2, #0]
 8005d70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68da      	ldr	r2, [r3, #12]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691a      	ldr	r2, [r3, #16]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	69d9      	ldr	r1, [r3, #28]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a1a      	ldr	r2, [r3, #32]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f042 0201 	orr.w	r2, r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
	...

08005dec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b088      	sub	sp, #32
 8005df0:	af02      	add	r7, sp, #8
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	4608      	mov	r0, r1
 8005df6:	4611      	mov	r1, r2
 8005df8:	461a      	mov	r2, r3
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	817b      	strh	r3, [r7, #10]
 8005dfe:	460b      	mov	r3, r1
 8005e00:	813b      	strh	r3, [r7, #8]
 8005e02:	4613      	mov	r3, r2
 8005e04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b20      	cmp	r3, #32
 8005e10:	f040 80f9 	bne.w	8006006 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <HAL_I2C_Mem_Write+0x34>
 8005e1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d105      	bne.n	8005e2c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e26:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e0ed      	b.n	8006008 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d101      	bne.n	8005e3a <HAL_I2C_Mem_Write+0x4e>
 8005e36:	2302      	movs	r3, #2
 8005e38:	e0e6      	b.n	8006008 <HAL_I2C_Mem_Write+0x21c>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e42:	f7fe f99f 	bl	8004184 <HAL_GetTick>
 8005e46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	2319      	movs	r3, #25
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 fac3 	bl	80063e0 <I2C_WaitOnFlagUntilTimeout>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d001      	beq.n	8005e64 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e0d1      	b.n	8006008 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2221      	movs	r2, #33	; 0x21
 8005e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2240      	movs	r2, #64	; 0x40
 8005e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a3a      	ldr	r2, [r7, #32]
 8005e7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e8c:	88f8      	ldrh	r0, [r7, #6]
 8005e8e:	893a      	ldrh	r2, [r7, #8]
 8005e90:	8979      	ldrh	r1, [r7, #10]
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	9301      	str	r3, [sp, #4]
 8005e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 f9d3 	bl	8006248 <I2C_RequestMemoryWrite>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d005      	beq.n	8005eb4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e0a9      	b.n	8006008 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2bff      	cmp	r3, #255	; 0xff
 8005ebc:	d90e      	bls.n	8005edc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	22ff      	movs	r2, #255	; 0xff
 8005ec2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	8979      	ldrh	r1, [r7, #10]
 8005ecc:	2300      	movs	r3, #0
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 fc3d 	bl	8006754 <I2C_TransferConfig>
 8005eda:	e00f      	b.n	8005efc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	8979      	ldrh	r1, [r7, #10]
 8005eee:	2300      	movs	r3, #0
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 fc2c 	bl	8006754 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 fabc 	bl	800647e <I2C_WaitOnTXISFlagUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e07b      	b.n	8006008 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f14:	781a      	ldrb	r2, [r3, #0]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d034      	beq.n	8005fb4 <HAL_I2C_Mem_Write+0x1c8>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d130      	bne.n	8005fb4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f58:	2200      	movs	r2, #0
 8005f5a:	2180      	movs	r1, #128	; 0x80
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 fa3f 	bl	80063e0 <I2C_WaitOnFlagUntilTimeout>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e04d      	b.n	8006008 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	2bff      	cmp	r3, #255	; 0xff
 8005f74:	d90e      	bls.n	8005f94 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	22ff      	movs	r2, #255	; 0xff
 8005f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	8979      	ldrh	r1, [r7, #10]
 8005f84:	2300      	movs	r3, #0
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 fbe1 	bl	8006754 <I2C_TransferConfig>
 8005f92:	e00f      	b.n	8005fb4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	8979      	ldrh	r1, [r7, #10]
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f000 fbd0 	bl	8006754 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d19e      	bne.n	8005efc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f000 faa2 	bl	800650c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e01a      	b.n	8006008 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6859      	ldr	r1, [r3, #4]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	4b0a      	ldr	r3, [pc, #40]	; (8006010 <HAL_I2C_Mem_Write+0x224>)
 8005fe6:	400b      	ands	r3, r1
 8005fe8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2220      	movs	r2, #32
 8005fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006002:	2300      	movs	r3, #0
 8006004:	e000      	b.n	8006008 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006006:	2302      	movs	r3, #2
  }
}
 8006008:	4618      	mov	r0, r3
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	fe00e800 	.word	0xfe00e800

08006014 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b088      	sub	sp, #32
 8006018:	af02      	add	r7, sp, #8
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	4608      	mov	r0, r1
 800601e:	4611      	mov	r1, r2
 8006020:	461a      	mov	r2, r3
 8006022:	4603      	mov	r3, r0
 8006024:	817b      	strh	r3, [r7, #10]
 8006026:	460b      	mov	r3, r1
 8006028:	813b      	strh	r3, [r7, #8]
 800602a:	4613      	mov	r3, r2
 800602c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b20      	cmp	r3, #32
 8006038:	f040 80fd 	bne.w	8006236 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <HAL_I2C_Mem_Read+0x34>
 8006042:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006044:	2b00      	cmp	r3, #0
 8006046:	d105      	bne.n	8006054 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800604e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e0f1      	b.n	8006238 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_I2C_Mem_Read+0x4e>
 800605e:	2302      	movs	r3, #2
 8006060:	e0ea      	b.n	8006238 <HAL_I2C_Mem_Read+0x224>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800606a:	f7fe f88b 	bl	8004184 <HAL_GetTick>
 800606e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	2319      	movs	r3, #25
 8006076:	2201      	movs	r2, #1
 8006078:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f000 f9af 	bl	80063e0 <I2C_WaitOnFlagUntilTimeout>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e0d5      	b.n	8006238 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2222      	movs	r2, #34	; 0x22
 8006090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2240      	movs	r2, #64	; 0x40
 8006098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6a3a      	ldr	r2, [r7, #32]
 80060a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060b4:	88f8      	ldrh	r0, [r7, #6]
 80060b6:	893a      	ldrh	r2, [r7, #8]
 80060b8:	8979      	ldrh	r1, [r7, #10]
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	9301      	str	r3, [sp, #4]
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	4603      	mov	r3, r0
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 f913 	bl	80062f0 <I2C_RequestMemoryRead>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d005      	beq.n	80060dc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e0ad      	b.n	8006238 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	2bff      	cmp	r3, #255	; 0xff
 80060e4:	d90e      	bls.n	8006104 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	22ff      	movs	r2, #255	; 0xff
 80060ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	8979      	ldrh	r1, [r7, #10]
 80060f4:	4b52      	ldr	r3, [pc, #328]	; (8006240 <HAL_I2C_Mem_Read+0x22c>)
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f000 fb29 	bl	8006754 <I2C_TransferConfig>
 8006102:	e00f      	b.n	8006124 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006108:	b29a      	uxth	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006112:	b2da      	uxtb	r2, r3
 8006114:	8979      	ldrh	r1, [r7, #10]
 8006116:	4b4a      	ldr	r3, [pc, #296]	; (8006240 <HAL_I2C_Mem_Read+0x22c>)
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f000 fb18 	bl	8006754 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612a:	2200      	movs	r2, #0
 800612c:	2104      	movs	r1, #4
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 f956 	bl	80063e0 <I2C_WaitOnFlagUntilTimeout>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e07c      	b.n	8006238 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	b2d2      	uxtb	r2, r2
 800614a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800615a:	3b01      	subs	r3, #1
 800615c:	b29a      	uxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006166:	b29b      	uxth	r3, r3
 8006168:	3b01      	subs	r3, #1
 800616a:	b29a      	uxth	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006174:	b29b      	uxth	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d034      	beq.n	80061e4 <HAL_I2C_Mem_Read+0x1d0>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800617e:	2b00      	cmp	r3, #0
 8006180:	d130      	bne.n	80061e4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006188:	2200      	movs	r2, #0
 800618a:	2180      	movs	r1, #128	; 0x80
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 f927 	bl	80063e0 <I2C_WaitOnFlagUntilTimeout>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e04d      	b.n	8006238 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2bff      	cmp	r3, #255	; 0xff
 80061a4:	d90e      	bls.n	80061c4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	22ff      	movs	r2, #255	; 0xff
 80061aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	8979      	ldrh	r1, [r7, #10]
 80061b4:	2300      	movs	r3, #0
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 fac9 	bl	8006754 <I2C_TransferConfig>
 80061c2:	e00f      	b.n	80061e4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	8979      	ldrh	r1, [r7, #10]
 80061d6:	2300      	movs	r3, #0
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 fab8 	bl	8006754 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d19a      	bne.n	8006124 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 f98a 	bl	800650c <I2C_WaitOnSTOPFlagUntilTimeout>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e01a      	b.n	8006238 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2220      	movs	r2, #32
 8006208:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6859      	ldr	r1, [r3, #4]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <HAL_I2C_Mem_Read+0x230>)
 8006216:	400b      	ands	r3, r1
 8006218:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2220      	movs	r2, #32
 800621e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	e000      	b.n	8006238 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006236:	2302      	movs	r3, #2
  }
}
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	80002400 	.word	0x80002400
 8006244:	fe00e800 	.word	0xfe00e800

08006248 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af02      	add	r7, sp, #8
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	4608      	mov	r0, r1
 8006252:	4611      	mov	r1, r2
 8006254:	461a      	mov	r2, r3
 8006256:	4603      	mov	r3, r0
 8006258:	817b      	strh	r3, [r7, #10]
 800625a:	460b      	mov	r3, r1
 800625c:	813b      	strh	r3, [r7, #8]
 800625e:	4613      	mov	r3, r2
 8006260:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006262:	88fb      	ldrh	r3, [r7, #6]
 8006264:	b2da      	uxtb	r2, r3
 8006266:	8979      	ldrh	r1, [r7, #10]
 8006268:	4b20      	ldr	r3, [pc, #128]	; (80062ec <I2C_RequestMemoryWrite+0xa4>)
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 fa6f 	bl	8006754 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006276:	69fa      	ldr	r2, [r7, #28]
 8006278:	69b9      	ldr	r1, [r7, #24]
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f000 f8ff 	bl	800647e <I2C_WaitOnTXISFlagUntilTimeout>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e02c      	b.n	80062e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800628a:	88fb      	ldrh	r3, [r7, #6]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d105      	bne.n	800629c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006290:	893b      	ldrh	r3, [r7, #8]
 8006292:	b2da      	uxtb	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	629a      	str	r2, [r3, #40]	; 0x28
 800629a:	e015      	b.n	80062c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800629c:	893b      	ldrh	r3, [r7, #8]
 800629e:	0a1b      	lsrs	r3, r3, #8
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062aa:	69fa      	ldr	r2, [r7, #28]
 80062ac:	69b9      	ldr	r1, [r7, #24]
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 f8e5 	bl	800647e <I2C_WaitOnTXISFlagUntilTimeout>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e012      	b.n	80062e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062be:	893b      	ldrh	r3, [r7, #8]
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	2200      	movs	r2, #0
 80062d0:	2180      	movs	r1, #128	; 0x80
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 f884 	bl	80063e0 <I2C_WaitOnFlagUntilTimeout>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e000      	b.n	80062e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	80002000 	.word	0x80002000

080062f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af02      	add	r7, sp, #8
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	4608      	mov	r0, r1
 80062fa:	4611      	mov	r1, r2
 80062fc:	461a      	mov	r2, r3
 80062fe:	4603      	mov	r3, r0
 8006300:	817b      	strh	r3, [r7, #10]
 8006302:	460b      	mov	r3, r1
 8006304:	813b      	strh	r3, [r7, #8]
 8006306:	4613      	mov	r3, r2
 8006308:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800630a:	88fb      	ldrh	r3, [r7, #6]
 800630c:	b2da      	uxtb	r2, r3
 800630e:	8979      	ldrh	r1, [r7, #10]
 8006310:	4b20      	ldr	r3, [pc, #128]	; (8006394 <I2C_RequestMemoryRead+0xa4>)
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	2300      	movs	r3, #0
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 fa1c 	bl	8006754 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800631c:	69fa      	ldr	r2, [r7, #28]
 800631e:	69b9      	ldr	r1, [r7, #24]
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 f8ac 	bl	800647e <I2C_WaitOnTXISFlagUntilTimeout>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e02c      	b.n	800638a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006330:	88fb      	ldrh	r3, [r7, #6]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d105      	bne.n	8006342 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006336:	893b      	ldrh	r3, [r7, #8]
 8006338:	b2da      	uxtb	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	629a      	str	r2, [r3, #40]	; 0x28
 8006340:	e015      	b.n	800636e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006342:	893b      	ldrh	r3, [r7, #8]
 8006344:	0a1b      	lsrs	r3, r3, #8
 8006346:	b29b      	uxth	r3, r3
 8006348:	b2da      	uxtb	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006350:	69fa      	ldr	r2, [r7, #28]
 8006352:	69b9      	ldr	r1, [r7, #24]
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 f892 	bl	800647e <I2C_WaitOnTXISFlagUntilTimeout>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e012      	b.n	800638a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006364:	893b      	ldrh	r3, [r7, #8]
 8006366:	b2da      	uxtb	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	2200      	movs	r2, #0
 8006376:	2140      	movs	r1, #64	; 0x40
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f000 f831 	bl	80063e0 <I2C_WaitOnFlagUntilTimeout>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e000      	b.n	800638a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	80002000 	.word	0x80002000

08006398 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d103      	bne.n	80063b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2200      	movs	r2, #0
 80063b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d007      	beq.n	80063d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699a      	ldr	r2, [r3, #24]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0201 	orr.w	r2, r2, #1
 80063d2:	619a      	str	r2, [r3, #24]
  }
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	603b      	str	r3, [r7, #0]
 80063ec:	4613      	mov	r3, r2
 80063ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063f0:	e031      	b.n	8006456 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f8:	d02d      	beq.n	8006456 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063fa:	f7fd fec3 	bl	8004184 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	429a      	cmp	r2, r3
 8006408:	d302      	bcc.n	8006410 <I2C_WaitOnFlagUntilTimeout+0x30>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d122      	bne.n	8006456 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699a      	ldr	r2, [r3, #24]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	4013      	ands	r3, r2
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	429a      	cmp	r2, r3
 800641e:	bf0c      	ite	eq
 8006420:	2301      	moveq	r3, #1
 8006422:	2300      	movne	r3, #0
 8006424:	b2db      	uxtb	r3, r3
 8006426:	461a      	mov	r2, r3
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	429a      	cmp	r2, r3
 800642c:	d113      	bne.n	8006456 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006432:	f043 0220 	orr.w	r2, r3, #32
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2220      	movs	r2, #32
 800643e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e00f      	b.n	8006476 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	699a      	ldr	r2, [r3, #24]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	4013      	ands	r3, r2
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	429a      	cmp	r2, r3
 8006464:	bf0c      	ite	eq
 8006466:	2301      	moveq	r3, #1
 8006468:	2300      	movne	r3, #0
 800646a:	b2db      	uxtb	r3, r3
 800646c:	461a      	mov	r2, r3
 800646e:	79fb      	ldrb	r3, [r7, #7]
 8006470:	429a      	cmp	r2, r3
 8006472:	d0be      	beq.n	80063f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	60f8      	str	r0, [r7, #12]
 8006486:	60b9      	str	r1, [r7, #8]
 8006488:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800648a:	e033      	b.n	80064f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	68b9      	ldr	r1, [r7, #8]
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 f87f 	bl	8006594 <I2C_IsErrorOccurred>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e031      	b.n	8006504 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a6:	d025      	beq.n	80064f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a8:	f7fd fe6c 	bl	8004184 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d302      	bcc.n	80064be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d11a      	bne.n	80064f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d013      	beq.n	80064f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d0:	f043 0220 	orr.w	r2, r3, #32
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e007      	b.n	8006504 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d1c4      	bne.n	800648c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006518:	e02f      	b.n	800657a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	68b9      	ldr	r1, [r7, #8]
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 f838 	bl	8006594 <I2C_IsErrorOccurred>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e02d      	b.n	800658a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800652e:	f7fd fe29 	bl	8004184 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	429a      	cmp	r2, r3
 800653c:	d302      	bcc.n	8006544 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d11a      	bne.n	800657a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b20      	cmp	r3, #32
 8006550:	d013      	beq.n	800657a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006556:	f043 0220 	orr.w	r2, r3, #32
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2220      	movs	r2, #32
 8006562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e007      	b.n	800658a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	f003 0320 	and.w	r3, r3, #32
 8006584:	2b20      	cmp	r3, #32
 8006586:	d1c8      	bne.n	800651a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
	...

08006594 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08a      	sub	sp, #40	; 0x28
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80065ae:	2300      	movs	r3, #0
 80065b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	f003 0310 	and.w	r3, r3, #16
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d068      	beq.n	8006692 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2210      	movs	r2, #16
 80065c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065c8:	e049      	b.n	800665e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d0:	d045      	beq.n	800665e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065d2:	f7fd fdd7 	bl	8004184 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d302      	bcc.n	80065e8 <I2C_IsErrorOccurred+0x54>
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d13a      	bne.n	800665e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800660a:	d121      	bne.n	8006650 <I2C_IsErrorOccurred+0xbc>
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006612:	d01d      	beq.n	8006650 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006614:	7cfb      	ldrb	r3, [r7, #19]
 8006616:	2b20      	cmp	r3, #32
 8006618:	d01a      	beq.n	8006650 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006628:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800662a:	f7fd fdab 	bl	8004184 <HAL_GetTick>
 800662e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006630:	e00e      	b.n	8006650 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006632:	f7fd fda7 	bl	8004184 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b19      	cmp	r3, #25
 800663e:	d907      	bls.n	8006650 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	f043 0320 	orr.w	r3, r3, #32
 8006646:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800664e:	e006      	b.n	800665e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	f003 0320 	and.w	r3, r3, #32
 800665a:	2b20      	cmp	r3, #32
 800665c:	d1e9      	bne.n	8006632 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	f003 0320 	and.w	r3, r3, #32
 8006668:	2b20      	cmp	r3, #32
 800666a:	d003      	beq.n	8006674 <I2C_IsErrorOccurred+0xe0>
 800666c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006670:	2b00      	cmp	r3, #0
 8006672:	d0aa      	beq.n	80065ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006678:	2b00      	cmp	r3, #0
 800667a:	d103      	bne.n	8006684 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2220      	movs	r2, #32
 8006682:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	f043 0304 	orr.w	r3, r3, #4
 800668a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00b      	beq.n	80066bc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	f043 0301 	orr.w	r3, r3, #1
 80066aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00b      	beq.n	80066de <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	f043 0308 	orr.w	r3, r3, #8
 80066cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00b      	beq.n	8006700 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80066e8:	6a3b      	ldr	r3, [r7, #32]
 80066ea:	f043 0302 	orr.w	r3, r3, #2
 80066ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006704:	2b00      	cmp	r3, #0
 8006706:	d01c      	beq.n	8006742 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f7ff fe45 	bl	8006398 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6859      	ldr	r1, [r3, #4]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	4b0d      	ldr	r3, [pc, #52]	; (8006750 <I2C_IsErrorOccurred+0x1bc>)
 800671a:	400b      	ands	r3, r1
 800671c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	431a      	orrs	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2220      	movs	r2, #32
 800672e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006742:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006746:	4618      	mov	r0, r3
 8006748:	3728      	adds	r7, #40	; 0x28
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	fe00e800 	.word	0xfe00e800

08006754 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	607b      	str	r3, [r7, #4]
 800675e:	460b      	mov	r3, r1
 8006760:	817b      	strh	r3, [r7, #10]
 8006762:	4613      	mov	r3, r2
 8006764:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006766:	897b      	ldrh	r3, [r7, #10]
 8006768:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800676c:	7a7b      	ldrb	r3, [r7, #9]
 800676e:	041b      	lsls	r3, r3, #16
 8006770:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006774:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	4313      	orrs	r3, r2
 800677e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006782:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	0d5b      	lsrs	r3, r3, #21
 800678e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006792:	4b08      	ldr	r3, [pc, #32]	; (80067b4 <I2C_TransferConfig+0x60>)
 8006794:	430b      	orrs	r3, r1
 8006796:	43db      	mvns	r3, r3
 8006798:	ea02 0103 	and.w	r1, r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80067a6:	bf00      	nop
 80067a8:	371c      	adds	r7, #28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	03ff63ff 	.word	0x03ff63ff

080067b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	d138      	bne.n	8006840 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d101      	bne.n	80067dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80067d8:	2302      	movs	r3, #2
 80067da:	e032      	b.n	8006842 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2224      	movs	r2, #36	; 0x24
 80067e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0201 	bic.w	r2, r2, #1
 80067fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800680a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6819      	ldr	r1, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0201 	orr.w	r2, r2, #1
 800682a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2220      	movs	r2, #32
 8006830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800683c:	2300      	movs	r3, #0
 800683e:	e000      	b.n	8006842 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006840:	2302      	movs	r3, #2
  }
}
 8006842:	4618      	mov	r0, r3
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800684e:	b480      	push	{r7}
 8006850:	b085      	sub	sp, #20
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b20      	cmp	r3, #32
 8006862:	d139      	bne.n	80068d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800686a:	2b01      	cmp	r3, #1
 800686c:	d101      	bne.n	8006872 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800686e:	2302      	movs	r3, #2
 8006870:	e033      	b.n	80068da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2224      	movs	r2, #36	; 0x24
 800687e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0201 	bic.w	r2, r2, #1
 8006890:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80068a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	021b      	lsls	r3, r3, #8
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f042 0201 	orr.w	r2, r2, #1
 80068c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2220      	movs	r2, #32
 80068c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068d4:	2300      	movs	r3, #0
 80068d6:	e000      	b.n	80068da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80068d8:	2302      	movs	r3, #2
  }
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
	...

080068e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80068f8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d102      	bne.n	800690e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	f001 b83a 	b.w	8007982 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800690e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006912:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 816f 	beq.w	8006c02 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006924:	4bb5      	ldr	r3, [pc, #724]	; (8006bfc <HAL_RCC_OscConfig+0x314>)
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f003 030c 	and.w	r3, r3, #12
 800692c:	2b04      	cmp	r3, #4
 800692e:	d00c      	beq.n	800694a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006930:	4bb2      	ldr	r3, [pc, #712]	; (8006bfc <HAL_RCC_OscConfig+0x314>)
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f003 030c 	and.w	r3, r3, #12
 8006938:	2b08      	cmp	r3, #8
 800693a:	d15c      	bne.n	80069f6 <HAL_RCC_OscConfig+0x10e>
 800693c:	4baf      	ldr	r3, [pc, #700]	; (8006bfc <HAL_RCC_OscConfig+0x314>)
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8006944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006948:	d155      	bne.n	80069f6 <HAL_RCC_OscConfig+0x10e>
 800694a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800694e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006952:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006956:	fa93 f3a3 	rbit	r3, r3
 800695a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800695e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006962:	fab3 f383 	clz	r3, r3
 8006966:	b2db      	uxtb	r3, r3
 8006968:	095b      	lsrs	r3, r3, #5
 800696a:	b2db      	uxtb	r3, r3
 800696c:	f043 0301 	orr.w	r3, r3, #1
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b01      	cmp	r3, #1
 8006974:	d102      	bne.n	800697c <HAL_RCC_OscConfig+0x94>
 8006976:	4ba1      	ldr	r3, [pc, #644]	; (8006bfc <HAL_RCC_OscConfig+0x314>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	e015      	b.n	80069a8 <HAL_RCC_OscConfig+0xc0>
 800697c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006980:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006984:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8006988:	fa93 f3a3 	rbit	r3, r3
 800698c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8006990:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006994:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8006998:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800699c:	fa93 f3a3 	rbit	r3, r3
 80069a0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80069a4:	4b95      	ldr	r3, [pc, #596]	; (8006bfc <HAL_RCC_OscConfig+0x314>)
 80069a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80069ac:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80069b0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80069b4:	fa92 f2a2 	rbit	r2, r2
 80069b8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80069bc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80069c0:	fab2 f282 	clz	r2, r2
 80069c4:	b2d2      	uxtb	r2, r2
 80069c6:	f042 0220 	orr.w	r2, r2, #32
 80069ca:	b2d2      	uxtb	r2, r2
 80069cc:	f002 021f 	and.w	r2, r2, #31
 80069d0:	2101      	movs	r1, #1
 80069d2:	fa01 f202 	lsl.w	r2, r1, r2
 80069d6:	4013      	ands	r3, r2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 8111 	beq.w	8006c00 <HAL_RCC_OscConfig+0x318>
 80069de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f040 8108 	bne.w	8006c00 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	f000 bfc6 	b.w	8007982 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a06:	d106      	bne.n	8006a16 <HAL_RCC_OscConfig+0x12e>
 8006a08:	4b7c      	ldr	r3, [pc, #496]	; (8006bfc <HAL_RCC_OscConfig+0x314>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a7b      	ldr	r2, [pc, #492]	; (8006bfc <HAL_RCC_OscConfig+0x314>)
 8006a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a12:	6013      	str	r3, [r2, #0]
 8006a14:	e036      	b.n	8006a84 <HAL_RCC_OscConfig+0x19c>
 8006a16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10c      	bne.n	8006a40 <HAL_RCC_OscConfig+0x158>
 8006a26:	4b75      	ldr	r3, [pc, #468]	; (8006bfc <HAL_RCC_OscConfig+0x314>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a74      	ldr	r2, [pc, #464]	; (8006bfc <HAL_RCC_OscConfig+0x314>)
 8006a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a30:	6013      	str	r3, [r2, #0]
 8006a32:	4b72      	ldr	r3, [pc, #456]	; (8006bfc <HAL_RCC_OscConfig+0x314>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a71      	ldr	r2, [pc, #452]	; (8006bfc <HAL_RCC_OscConfig+0x314>)
 8006a38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a3c:	6013      	str	r3, [r2, #0]
 8006a3e:	e021      	b.n	8006a84 <HAL_RCC_OscConfig+0x19c>
 8006a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a50:	d10c      	bne.n	8006a6c <HAL_RCC_OscConfig+0x184>
 8006a52:	4b6a      	ldr	r3, [pc, #424]	; (8006bfc <HAL_RCC_OscConfig+0x314>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a69      	ldr	r2, [pc, #420]	; (8006bfc <HAL_RCC_OscConfig+0x314>)
 8006a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	4b67      	ldr	r3, [pc, #412]	; (8006bfc <HAL_RCC_OscConfig+0x314>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a66      	ldr	r2, [pc, #408]	; (8006bfc <HAL_RCC_OscConfig+0x314>)
 8006a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	e00b      	b.n	8006a84 <HAL_RCC_OscConfig+0x19c>
 8006a6c:	4b63      	ldr	r3, [pc, #396]	; (8006bfc <HAL_RCC_OscConfig+0x314>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a62      	ldr	r2, [pc, #392]	; (8006bfc <HAL_RCC_OscConfig+0x314>)
 8006a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	4b60      	ldr	r3, [pc, #384]	; (8006bfc <HAL_RCC_OscConfig+0x314>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a5f      	ldr	r2, [pc, #380]	; (8006bfc <HAL_RCC_OscConfig+0x314>)
 8006a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a82:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a88:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d059      	beq.n	8006b48 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a94:	f7fd fb76 	bl	8004184 <HAL_GetTick>
 8006a98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a9c:	e00a      	b.n	8006ab4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a9e:	f7fd fb71 	bl	8004184 <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b64      	cmp	r3, #100	; 0x64
 8006aac:	d902      	bls.n	8006ab4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	f000 bf67 	b.w	8007982 <HAL_RCC_OscConfig+0x109a>
 8006ab4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ab8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006abc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006ac0:	fa93 f3a3 	rbit	r3, r3
 8006ac4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8006ac8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006acc:	fab3 f383 	clz	r3, r3
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	f043 0301 	orr.w	r3, r3, #1
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d102      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x1fe>
 8006ae0:	4b46      	ldr	r3, [pc, #280]	; (8006bfc <HAL_RCC_OscConfig+0x314>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	e015      	b.n	8006b12 <HAL_RCC_OscConfig+0x22a>
 8006ae6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006aea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8006af2:	fa93 f3a3 	rbit	r3, r3
 8006af6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8006afa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006afe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006b02:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8006b06:	fa93 f3a3 	rbit	r3, r3
 8006b0a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006b0e:	4b3b      	ldr	r3, [pc, #236]	; (8006bfc <HAL_RCC_OscConfig+0x314>)
 8006b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006b16:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8006b1a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8006b1e:	fa92 f2a2 	rbit	r2, r2
 8006b22:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8006b26:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006b2a:	fab2 f282 	clz	r2, r2
 8006b2e:	b2d2      	uxtb	r2, r2
 8006b30:	f042 0220 	orr.w	r2, r2, #32
 8006b34:	b2d2      	uxtb	r2, r2
 8006b36:	f002 021f 	and.w	r2, r2, #31
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8006b40:	4013      	ands	r3, r2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d0ab      	beq.n	8006a9e <HAL_RCC_OscConfig+0x1b6>
 8006b46:	e05c      	b.n	8006c02 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b48:	f7fd fb1c 	bl	8004184 <HAL_GetTick>
 8006b4c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b50:	e00a      	b.n	8006b68 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b52:	f7fd fb17 	bl	8004184 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b64      	cmp	r3, #100	; 0x64
 8006b60:	d902      	bls.n	8006b68 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	f000 bf0d 	b.w	8007982 <HAL_RCC_OscConfig+0x109a>
 8006b68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b6c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8006b74:	fa93 f3a3 	rbit	r3, r3
 8006b78:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8006b7c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b80:	fab3 f383 	clz	r3, r3
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	095b      	lsrs	r3, r3, #5
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	f043 0301 	orr.w	r3, r3, #1
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d102      	bne.n	8006b9a <HAL_RCC_OscConfig+0x2b2>
 8006b94:	4b19      	ldr	r3, [pc, #100]	; (8006bfc <HAL_RCC_OscConfig+0x314>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	e015      	b.n	8006bc6 <HAL_RCC_OscConfig+0x2de>
 8006b9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b9e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ba2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8006ba6:	fa93 f3a3 	rbit	r3, r3
 8006baa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8006bae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006bb2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006bb6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006bba:	fa93 f3a3 	rbit	r3, r3
 8006bbe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006bc2:	4b0e      	ldr	r3, [pc, #56]	; (8006bfc <HAL_RCC_OscConfig+0x314>)
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006bca:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8006bce:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006bd2:	fa92 f2a2 	rbit	r2, r2
 8006bd6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8006bda:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006bde:	fab2 f282 	clz	r2, r2
 8006be2:	b2d2      	uxtb	r2, r2
 8006be4:	f042 0220 	orr.w	r2, r2, #32
 8006be8:	b2d2      	uxtb	r2, r2
 8006bea:	f002 021f 	and.w	r2, r2, #31
 8006bee:	2101      	movs	r1, #1
 8006bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1ab      	bne.n	8006b52 <HAL_RCC_OscConfig+0x26a>
 8006bfa:	e002      	b.n	8006c02 <HAL_RCC_OscConfig+0x31a>
 8006bfc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 817f 	beq.w	8006f16 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006c18:	4ba7      	ldr	r3, [pc, #668]	; (8006eb8 <HAL_RCC_OscConfig+0x5d0>)
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f003 030c 	and.w	r3, r3, #12
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00c      	beq.n	8006c3e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006c24:	4ba4      	ldr	r3, [pc, #656]	; (8006eb8 <HAL_RCC_OscConfig+0x5d0>)
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f003 030c 	and.w	r3, r3, #12
 8006c2c:	2b08      	cmp	r3, #8
 8006c2e:	d173      	bne.n	8006d18 <HAL_RCC_OscConfig+0x430>
 8006c30:	4ba1      	ldr	r3, [pc, #644]	; (8006eb8 <HAL_RCC_OscConfig+0x5d0>)
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8006c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c3c:	d16c      	bne.n	8006d18 <HAL_RCC_OscConfig+0x430>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c44:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8006c48:	fa93 f3a3 	rbit	r3, r3
 8006c4c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8006c50:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c54:	fab3 f383 	clz	r3, r3
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	095b      	lsrs	r3, r3, #5
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	f043 0301 	orr.w	r3, r3, #1
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d102      	bne.n	8006c6e <HAL_RCC_OscConfig+0x386>
 8006c68:	4b93      	ldr	r3, [pc, #588]	; (8006eb8 <HAL_RCC_OscConfig+0x5d0>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	e013      	b.n	8006c96 <HAL_RCC_OscConfig+0x3ae>
 8006c6e:	2302      	movs	r3, #2
 8006c70:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c74:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8006c78:	fa93 f3a3 	rbit	r3, r3
 8006c7c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8006c80:	2302      	movs	r3, #2
 8006c82:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006c86:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8006c8a:	fa93 f3a3 	rbit	r3, r3
 8006c8e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006c92:	4b89      	ldr	r3, [pc, #548]	; (8006eb8 <HAL_RCC_OscConfig+0x5d0>)
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	2202      	movs	r2, #2
 8006c98:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8006c9c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8006ca0:	fa92 f2a2 	rbit	r2, r2
 8006ca4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8006ca8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006cac:	fab2 f282 	clz	r2, r2
 8006cb0:	b2d2      	uxtb	r2, r2
 8006cb2:	f042 0220 	orr.w	r2, r2, #32
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	f002 021f 	and.w	r2, r2, #31
 8006cbc:	2101      	movs	r1, #1
 8006cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00a      	beq.n	8006cde <HAL_RCC_OscConfig+0x3f6>
 8006cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ccc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d002      	beq.n	8006cde <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	f000 be52 	b.w	8007982 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cde:	4b76      	ldr	r3, [pc, #472]	; (8006eb8 <HAL_RCC_OscConfig+0x5d0>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	21f8      	movs	r1, #248	; 0xf8
 8006cf4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cf8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8006cfc:	fa91 f1a1 	rbit	r1, r1
 8006d00:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8006d04:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006d08:	fab1 f181 	clz	r1, r1
 8006d0c:	b2c9      	uxtb	r1, r1
 8006d0e:	408b      	lsls	r3, r1
 8006d10:	4969      	ldr	r1, [pc, #420]	; (8006eb8 <HAL_RCC_OscConfig+0x5d0>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d16:	e0fe      	b.n	8006f16 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 8088 	beq.w	8006e3a <HAL_RCC_OscConfig+0x552>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d30:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006d34:	fa93 f3a3 	rbit	r3, r3
 8006d38:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8006d3c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d40:	fab3 f383 	clz	r3, r3
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006d4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	461a      	mov	r2, r3
 8006d52:	2301      	movs	r3, #1
 8006d54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d56:	f7fd fa15 	bl	8004184 <HAL_GetTick>
 8006d5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d5e:	e00a      	b.n	8006d76 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d60:	f7fd fa10 	bl	8004184 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d902      	bls.n	8006d76 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	f000 be06 	b.w	8007982 <HAL_RCC_OscConfig+0x109a>
 8006d76:	2302      	movs	r3, #2
 8006d78:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d7c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006d80:	fa93 f3a3 	rbit	r3, r3
 8006d84:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8006d88:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d8c:	fab3 f383 	clz	r3, r3
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	095b      	lsrs	r3, r3, #5
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	f043 0301 	orr.w	r3, r3, #1
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d102      	bne.n	8006da6 <HAL_RCC_OscConfig+0x4be>
 8006da0:	4b45      	ldr	r3, [pc, #276]	; (8006eb8 <HAL_RCC_OscConfig+0x5d0>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	e013      	b.n	8006dce <HAL_RCC_OscConfig+0x4e6>
 8006da6:	2302      	movs	r3, #2
 8006da8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dac:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8006db0:	fa93 f3a3 	rbit	r3, r3
 8006db4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8006db8:	2302      	movs	r3, #2
 8006dba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006dbe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006dc2:	fa93 f3a3 	rbit	r3, r3
 8006dc6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006dca:	4b3b      	ldr	r3, [pc, #236]	; (8006eb8 <HAL_RCC_OscConfig+0x5d0>)
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8006dd4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006dd8:	fa92 f2a2 	rbit	r2, r2
 8006ddc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8006de0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006de4:	fab2 f282 	clz	r2, r2
 8006de8:	b2d2      	uxtb	r2, r2
 8006dea:	f042 0220 	orr.w	r2, r2, #32
 8006dee:	b2d2      	uxtb	r2, r2
 8006df0:	f002 021f 	and.w	r2, r2, #31
 8006df4:	2101      	movs	r1, #1
 8006df6:	fa01 f202 	lsl.w	r2, r1, r2
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d0af      	beq.n	8006d60 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e00:	4b2d      	ldr	r3, [pc, #180]	; (8006eb8 <HAL_RCC_OscConfig+0x5d0>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	21f8      	movs	r1, #248	; 0xf8
 8006e16:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e1a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8006e1e:	fa91 f1a1 	rbit	r1, r1
 8006e22:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8006e26:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006e2a:	fab1 f181 	clz	r1, r1
 8006e2e:	b2c9      	uxtb	r1, r1
 8006e30:	408b      	lsls	r3, r1
 8006e32:	4921      	ldr	r1, [pc, #132]	; (8006eb8 <HAL_RCC_OscConfig+0x5d0>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	600b      	str	r3, [r1, #0]
 8006e38:	e06d      	b.n	8006f16 <HAL_RCC_OscConfig+0x62e>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e40:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006e44:	fa93 f3a3 	rbit	r3, r3
 8006e48:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8006e4c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e50:	fab3 f383 	clz	r3, r3
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006e5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	461a      	mov	r2, r3
 8006e62:	2300      	movs	r3, #0
 8006e64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e66:	f7fd f98d 	bl	8004184 <HAL_GetTick>
 8006e6a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e6e:	e00a      	b.n	8006e86 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e70:	f7fd f988 	bl	8004184 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d902      	bls.n	8006e86 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	f000 bd7e 	b.w	8007982 <HAL_RCC_OscConfig+0x109a>
 8006e86:	2302      	movs	r3, #2
 8006e88:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e90:	fa93 f3a3 	rbit	r3, r3
 8006e94:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8006e98:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e9c:	fab3 f383 	clz	r3, r3
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	095b      	lsrs	r3, r3, #5
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	f043 0301 	orr.w	r3, r3, #1
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d105      	bne.n	8006ebc <HAL_RCC_OscConfig+0x5d4>
 8006eb0:	4b01      	ldr	r3, [pc, #4]	; (8006eb8 <HAL_RCC_OscConfig+0x5d0>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	e016      	b.n	8006ee4 <HAL_RCC_OscConfig+0x5fc>
 8006eb6:	bf00      	nop
 8006eb8:	40021000 	.word	0x40021000
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ec6:	fa93 f3a3 	rbit	r3, r3
 8006eca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006ece:	2302      	movs	r3, #2
 8006ed0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006ed4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006ed8:	fa93 f3a3 	rbit	r3, r3
 8006edc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006ee0:	4bbf      	ldr	r3, [pc, #764]	; (80071e0 <HAL_RCC_OscConfig+0x8f8>)
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8006eea:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006eee:	fa92 f2a2 	rbit	r2, r2
 8006ef2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8006ef6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006efa:	fab2 f282 	clz	r2, r2
 8006efe:	b2d2      	uxtb	r2, r2
 8006f00:	f042 0220 	orr.w	r2, r2, #32
 8006f04:	b2d2      	uxtb	r2, r2
 8006f06:	f002 021f 	and.w	r2, r2, #31
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8006f10:	4013      	ands	r3, r2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1ac      	bne.n	8006e70 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0308 	and.w	r3, r3, #8
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 8113 	beq.w	8007152 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d07c      	beq.n	8007036 <HAL_RCC_OscConfig+0x74e>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f46:	fa93 f3a3 	rbit	r3, r3
 8006f4a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8006f4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f52:	fab3 f383 	clz	r3, r3
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	461a      	mov	r2, r3
 8006f5a:	4ba2      	ldr	r3, [pc, #648]	; (80071e4 <HAL_RCC_OscConfig+0x8fc>)
 8006f5c:	4413      	add	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	461a      	mov	r2, r3
 8006f62:	2301      	movs	r3, #1
 8006f64:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f66:	f7fd f90d 	bl	8004184 <HAL_GetTick>
 8006f6a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f6e:	e00a      	b.n	8006f86 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f70:	f7fd f908 	bl	8004184 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d902      	bls.n	8006f86 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	f000 bcfe 	b.w	8007982 <HAL_RCC_OscConfig+0x109a>
 8006f86:	2302      	movs	r3, #2
 8006f88:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f90:	fa93 f2a3 	rbit	r2, r3
 8006f94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f98:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006f9c:	601a      	str	r2, [r3, #0]
 8006f9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	fa93 f2a3 	rbit	r2, r3
 8006fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fc6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006fca:	2202      	movs	r2, #2
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fd2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	fa93 f2a3 	rbit	r2, r3
 8006fdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fe0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006fe4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fe6:	4b7e      	ldr	r3, [pc, #504]	; (80071e0 <HAL_RCC_OscConfig+0x8f8>)
 8006fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006ff2:	2102      	movs	r1, #2
 8006ff4:	6019      	str	r1, [r3, #0]
 8006ff6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ffa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	fa93 f1a3 	rbit	r1, r3
 8007004:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007008:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800700c:	6019      	str	r1, [r3, #0]
  return result;
 800700e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007012:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	fab3 f383 	clz	r3, r3
 800701c:	b2db      	uxtb	r3, r3
 800701e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007022:	b2db      	uxtb	r3, r3
 8007024:	f003 031f 	and.w	r3, r3, #31
 8007028:	2101      	movs	r1, #1
 800702a:	fa01 f303 	lsl.w	r3, r1, r3
 800702e:	4013      	ands	r3, r2
 8007030:	2b00      	cmp	r3, #0
 8007032:	d09d      	beq.n	8006f70 <HAL_RCC_OscConfig+0x688>
 8007034:	e08d      	b.n	8007152 <HAL_RCC_OscConfig+0x86a>
 8007036:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800703a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800703e:	2201      	movs	r2, #1
 8007040:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007042:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007046:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	fa93 f2a3 	rbit	r2, r3
 8007050:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007054:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007058:	601a      	str	r2, [r3, #0]
  return result;
 800705a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800705e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007062:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007064:	fab3 f383 	clz	r3, r3
 8007068:	b2db      	uxtb	r3, r3
 800706a:	461a      	mov	r2, r3
 800706c:	4b5d      	ldr	r3, [pc, #372]	; (80071e4 <HAL_RCC_OscConfig+0x8fc>)
 800706e:	4413      	add	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	461a      	mov	r2, r3
 8007074:	2300      	movs	r3, #0
 8007076:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007078:	f7fd f884 	bl	8004184 <HAL_GetTick>
 800707c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007080:	e00a      	b.n	8007098 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007082:	f7fd f87f 	bl	8004184 <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	2b02      	cmp	r3, #2
 8007090:	d902      	bls.n	8007098 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	f000 bc75 	b.w	8007982 <HAL_RCC_OscConfig+0x109a>
 8007098:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800709c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80070a0:	2202      	movs	r2, #2
 80070a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	fa93 f2a3 	rbit	r2, r3
 80070b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070c4:	2202      	movs	r2, #2
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	fa93 f2a3 	rbit	r2, r3
 80070d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070e4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80070e8:	2202      	movs	r2, #2
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070f0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	fa93 f2a3 	rbit	r2, r3
 80070fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070fe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007102:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007104:	4b36      	ldr	r3, [pc, #216]	; (80071e0 <HAL_RCC_OscConfig+0x8f8>)
 8007106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007108:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800710c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007110:	2102      	movs	r1, #2
 8007112:	6019      	str	r1, [r3, #0]
 8007114:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007118:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	fa93 f1a3 	rbit	r1, r3
 8007122:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007126:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800712a:	6019      	str	r1, [r3, #0]
  return result;
 800712c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007130:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	fab3 f383 	clz	r3, r3
 800713a:	b2db      	uxtb	r3, r3
 800713c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007140:	b2db      	uxtb	r3, r3
 8007142:	f003 031f 	and.w	r3, r3, #31
 8007146:	2101      	movs	r1, #1
 8007148:	fa01 f303 	lsl.w	r3, r1, r3
 800714c:	4013      	ands	r3, r2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d197      	bne.n	8007082 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007152:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007156:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0304 	and.w	r3, r3, #4
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 81a5 	beq.w	80074b2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007168:	2300      	movs	r3, #0
 800716a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800716e:	4b1c      	ldr	r3, [pc, #112]	; (80071e0 <HAL_RCC_OscConfig+0x8f8>)
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d116      	bne.n	80071a8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800717a:	4b19      	ldr	r3, [pc, #100]	; (80071e0 <HAL_RCC_OscConfig+0x8f8>)
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	4a18      	ldr	r2, [pc, #96]	; (80071e0 <HAL_RCC_OscConfig+0x8f8>)
 8007180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007184:	61d3      	str	r3, [r2, #28]
 8007186:	4b16      	ldr	r3, [pc, #88]	; (80071e0 <HAL_RCC_OscConfig+0x8f8>)
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800718e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007192:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800719c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80071a0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80071a2:	2301      	movs	r3, #1
 80071a4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071a8:	4b0f      	ldr	r3, [pc, #60]	; (80071e8 <HAL_RCC_OscConfig+0x900>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d121      	bne.n	80071f8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071b4:	4b0c      	ldr	r3, [pc, #48]	; (80071e8 <HAL_RCC_OscConfig+0x900>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a0b      	ldr	r2, [pc, #44]	; (80071e8 <HAL_RCC_OscConfig+0x900>)
 80071ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071be:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071c0:	f7fc ffe0 	bl	8004184 <HAL_GetTick>
 80071c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071c8:	e010      	b.n	80071ec <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071ca:	f7fc ffdb 	bl	8004184 <HAL_GetTick>
 80071ce:	4602      	mov	r2, r0
 80071d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	2b64      	cmp	r3, #100	; 0x64
 80071d8:	d908      	bls.n	80071ec <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e3d1      	b.n	8007982 <HAL_RCC_OscConfig+0x109a>
 80071de:	bf00      	nop
 80071e0:	40021000 	.word	0x40021000
 80071e4:	10908120 	.word	0x10908120
 80071e8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071ec:	4b8d      	ldr	r3, [pc, #564]	; (8007424 <HAL_RCC_OscConfig+0xb3c>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d0e8      	beq.n	80071ca <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80071fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d106      	bne.n	8007216 <HAL_RCC_OscConfig+0x92e>
 8007208:	4b87      	ldr	r3, [pc, #540]	; (8007428 <HAL_RCC_OscConfig+0xb40>)
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	4a86      	ldr	r2, [pc, #536]	; (8007428 <HAL_RCC_OscConfig+0xb40>)
 800720e:	f043 0301 	orr.w	r3, r3, #1
 8007212:	6213      	str	r3, [r2, #32]
 8007214:	e035      	b.n	8007282 <HAL_RCC_OscConfig+0x99a>
 8007216:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800721a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10c      	bne.n	8007240 <HAL_RCC_OscConfig+0x958>
 8007226:	4b80      	ldr	r3, [pc, #512]	; (8007428 <HAL_RCC_OscConfig+0xb40>)
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	4a7f      	ldr	r2, [pc, #508]	; (8007428 <HAL_RCC_OscConfig+0xb40>)
 800722c:	f023 0301 	bic.w	r3, r3, #1
 8007230:	6213      	str	r3, [r2, #32]
 8007232:	4b7d      	ldr	r3, [pc, #500]	; (8007428 <HAL_RCC_OscConfig+0xb40>)
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	4a7c      	ldr	r2, [pc, #496]	; (8007428 <HAL_RCC_OscConfig+0xb40>)
 8007238:	f023 0304 	bic.w	r3, r3, #4
 800723c:	6213      	str	r3, [r2, #32]
 800723e:	e020      	b.n	8007282 <HAL_RCC_OscConfig+0x99a>
 8007240:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007244:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	2b05      	cmp	r3, #5
 800724e:	d10c      	bne.n	800726a <HAL_RCC_OscConfig+0x982>
 8007250:	4b75      	ldr	r3, [pc, #468]	; (8007428 <HAL_RCC_OscConfig+0xb40>)
 8007252:	6a1b      	ldr	r3, [r3, #32]
 8007254:	4a74      	ldr	r2, [pc, #464]	; (8007428 <HAL_RCC_OscConfig+0xb40>)
 8007256:	f043 0304 	orr.w	r3, r3, #4
 800725a:	6213      	str	r3, [r2, #32]
 800725c:	4b72      	ldr	r3, [pc, #456]	; (8007428 <HAL_RCC_OscConfig+0xb40>)
 800725e:	6a1b      	ldr	r3, [r3, #32]
 8007260:	4a71      	ldr	r2, [pc, #452]	; (8007428 <HAL_RCC_OscConfig+0xb40>)
 8007262:	f043 0301 	orr.w	r3, r3, #1
 8007266:	6213      	str	r3, [r2, #32]
 8007268:	e00b      	b.n	8007282 <HAL_RCC_OscConfig+0x99a>
 800726a:	4b6f      	ldr	r3, [pc, #444]	; (8007428 <HAL_RCC_OscConfig+0xb40>)
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	4a6e      	ldr	r2, [pc, #440]	; (8007428 <HAL_RCC_OscConfig+0xb40>)
 8007270:	f023 0301 	bic.w	r3, r3, #1
 8007274:	6213      	str	r3, [r2, #32]
 8007276:	4b6c      	ldr	r3, [pc, #432]	; (8007428 <HAL_RCC_OscConfig+0xb40>)
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	4a6b      	ldr	r2, [pc, #428]	; (8007428 <HAL_RCC_OscConfig+0xb40>)
 800727c:	f023 0304 	bic.w	r3, r3, #4
 8007280:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007282:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007286:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	2b00      	cmp	r3, #0
 8007290:	f000 8081 	beq.w	8007396 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007294:	f7fc ff76 	bl	8004184 <HAL_GetTick>
 8007298:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800729c:	e00b      	b.n	80072b6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800729e:	f7fc ff71 	bl	8004184 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d901      	bls.n	80072b6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e365      	b.n	8007982 <HAL_RCC_OscConfig+0x109a>
 80072b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80072ba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80072be:	2202      	movs	r2, #2
 80072c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80072c6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	fa93 f2a3 	rbit	r2, r3
 80072d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80072d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80072d8:	601a      	str	r2, [r3, #0]
 80072da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80072de:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80072e2:	2202      	movs	r2, #2
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80072ea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	fa93 f2a3 	rbit	r2, r3
 80072f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80072f8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80072fc:	601a      	str	r2, [r3, #0]
  return result;
 80072fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007302:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007306:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007308:	fab3 f383 	clz	r3, r3
 800730c:	b2db      	uxtb	r3, r3
 800730e:	095b      	lsrs	r3, r3, #5
 8007310:	b2db      	uxtb	r3, r3
 8007312:	f043 0302 	orr.w	r3, r3, #2
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b02      	cmp	r3, #2
 800731a:	d102      	bne.n	8007322 <HAL_RCC_OscConfig+0xa3a>
 800731c:	4b42      	ldr	r3, [pc, #264]	; (8007428 <HAL_RCC_OscConfig+0xb40>)
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	e013      	b.n	800734a <HAL_RCC_OscConfig+0xa62>
 8007322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007326:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800732a:	2202      	movs	r2, #2
 800732c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800732e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007332:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	fa93 f2a3 	rbit	r2, r3
 800733c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007340:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8007344:	601a      	str	r2, [r3, #0]
 8007346:	4b38      	ldr	r3, [pc, #224]	; (8007428 <HAL_RCC_OscConfig+0xb40>)
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800734e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007352:	2102      	movs	r1, #2
 8007354:	6011      	str	r1, [r2, #0]
 8007356:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800735a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800735e:	6812      	ldr	r2, [r2, #0]
 8007360:	fa92 f1a2 	rbit	r1, r2
 8007364:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007368:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800736c:	6011      	str	r1, [r2, #0]
  return result;
 800736e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007372:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8007376:	6812      	ldr	r2, [r2, #0]
 8007378:	fab2 f282 	clz	r2, r2
 800737c:	b2d2      	uxtb	r2, r2
 800737e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007382:	b2d2      	uxtb	r2, r2
 8007384:	f002 021f 	and.w	r2, r2, #31
 8007388:	2101      	movs	r1, #1
 800738a:	fa01 f202 	lsl.w	r2, r1, r2
 800738e:	4013      	ands	r3, r2
 8007390:	2b00      	cmp	r3, #0
 8007392:	d084      	beq.n	800729e <HAL_RCC_OscConfig+0x9b6>
 8007394:	e083      	b.n	800749e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007396:	f7fc fef5 	bl	8004184 <HAL_GetTick>
 800739a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800739e:	e00b      	b.n	80073b8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073a0:	f7fc fef0 	bl	8004184 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d901      	bls.n	80073b8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e2e4      	b.n	8007982 <HAL_RCC_OscConfig+0x109a>
 80073b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80073bc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80073c0:	2202      	movs	r2, #2
 80073c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80073c8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	fa93 f2a3 	rbit	r2, r3
 80073d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80073d6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80073e0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80073e4:	2202      	movs	r2, #2
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80073ec:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	fa93 f2a3 	rbit	r2, r3
 80073f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80073fa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80073fe:	601a      	str	r2, [r3, #0]
  return result;
 8007400:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007404:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007408:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800740a:	fab3 f383 	clz	r3, r3
 800740e:	b2db      	uxtb	r3, r3
 8007410:	095b      	lsrs	r3, r3, #5
 8007412:	b2db      	uxtb	r3, r3
 8007414:	f043 0302 	orr.w	r3, r3, #2
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b02      	cmp	r3, #2
 800741c:	d106      	bne.n	800742c <HAL_RCC_OscConfig+0xb44>
 800741e:	4b02      	ldr	r3, [pc, #8]	; (8007428 <HAL_RCC_OscConfig+0xb40>)
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	e017      	b.n	8007454 <HAL_RCC_OscConfig+0xb6c>
 8007424:	40007000 	.word	0x40007000
 8007428:	40021000 	.word	0x40021000
 800742c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007430:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007434:	2202      	movs	r2, #2
 8007436:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007438:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800743c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	fa93 f2a3 	rbit	r2, r3
 8007446:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800744a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	4bb3      	ldr	r3, [pc, #716]	; (8007720 <HAL_RCC_OscConfig+0xe38>)
 8007452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007454:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007458:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800745c:	2102      	movs	r1, #2
 800745e:	6011      	str	r1, [r2, #0]
 8007460:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007464:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007468:	6812      	ldr	r2, [r2, #0]
 800746a:	fa92 f1a2 	rbit	r1, r2
 800746e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007472:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8007476:	6011      	str	r1, [r2, #0]
  return result;
 8007478:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800747c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8007480:	6812      	ldr	r2, [r2, #0]
 8007482:	fab2 f282 	clz	r2, r2
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800748c:	b2d2      	uxtb	r2, r2
 800748e:	f002 021f 	and.w	r2, r2, #31
 8007492:	2101      	movs	r1, #1
 8007494:	fa01 f202 	lsl.w	r2, r1, r2
 8007498:	4013      	ands	r3, r2
 800749a:	2b00      	cmp	r3, #0
 800749c:	d180      	bne.n	80073a0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800749e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d105      	bne.n	80074b2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074a6:	4b9e      	ldr	r3, [pc, #632]	; (8007720 <HAL_RCC_OscConfig+0xe38>)
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	4a9d      	ldr	r2, [pc, #628]	; (8007720 <HAL_RCC_OscConfig+0xe38>)
 80074ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074b0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80074b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 825e 	beq.w	8007980 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074c4:	4b96      	ldr	r3, [pc, #600]	; (8007720 <HAL_RCC_OscConfig+0xe38>)
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f003 030c 	and.w	r3, r3, #12
 80074cc:	2b08      	cmp	r3, #8
 80074ce:	f000 821f 	beq.w	8007910 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80074d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	2b02      	cmp	r3, #2
 80074e0:	f040 8170 	bne.w	80077c4 <HAL_RCC_OscConfig+0xedc>
 80074e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80074e8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80074ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80074f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80074f6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	fa93 f2a3 	rbit	r2, r3
 8007500:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007504:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007508:	601a      	str	r2, [r3, #0]
  return result;
 800750a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800750e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007512:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007514:	fab3 f383 	clz	r3, r3
 8007518:	b2db      	uxtb	r3, r3
 800751a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800751e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	461a      	mov	r2, r3
 8007526:	2300      	movs	r3, #0
 8007528:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800752a:	f7fc fe2b 	bl	8004184 <HAL_GetTick>
 800752e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007532:	e009      	b.n	8007548 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007534:	f7fc fe26 	bl	8004184 <HAL_GetTick>
 8007538:	4602      	mov	r2, r0
 800753a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	2b02      	cmp	r3, #2
 8007542:	d901      	bls.n	8007548 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8007544:	2303      	movs	r3, #3
 8007546:	e21c      	b.n	8007982 <HAL_RCC_OscConfig+0x109a>
 8007548:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800754c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007550:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007554:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007556:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800755a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	fa93 f2a3 	rbit	r2, r3
 8007564:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007568:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800756c:	601a      	str	r2, [r3, #0]
  return result;
 800756e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007572:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007576:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007578:	fab3 f383 	clz	r3, r3
 800757c:	b2db      	uxtb	r3, r3
 800757e:	095b      	lsrs	r3, r3, #5
 8007580:	b2db      	uxtb	r3, r3
 8007582:	f043 0301 	orr.w	r3, r3, #1
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b01      	cmp	r3, #1
 800758a:	d102      	bne.n	8007592 <HAL_RCC_OscConfig+0xcaa>
 800758c:	4b64      	ldr	r3, [pc, #400]	; (8007720 <HAL_RCC_OscConfig+0xe38>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	e027      	b.n	80075e2 <HAL_RCC_OscConfig+0xcfa>
 8007592:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007596:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800759a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800759e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80075a4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	fa93 f2a3 	rbit	r2, r3
 80075ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80075b2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80075b6:	601a      	str	r2, [r3, #0]
 80075b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80075bc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80075c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80075c4:	601a      	str	r2, [r3, #0]
 80075c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80075ca:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	fa93 f2a3 	rbit	r2, r3
 80075d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80075d8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80075dc:	601a      	str	r2, [r3, #0]
 80075de:	4b50      	ldr	r3, [pc, #320]	; (8007720 <HAL_RCC_OscConfig+0xe38>)
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80075e6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80075ea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80075ee:	6011      	str	r1, [r2, #0]
 80075f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80075f4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80075f8:	6812      	ldr	r2, [r2, #0]
 80075fa:	fa92 f1a2 	rbit	r1, r2
 80075fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007602:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8007606:	6011      	str	r1, [r2, #0]
  return result;
 8007608:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800760c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8007610:	6812      	ldr	r2, [r2, #0]
 8007612:	fab2 f282 	clz	r2, r2
 8007616:	b2d2      	uxtb	r2, r2
 8007618:	f042 0220 	orr.w	r2, r2, #32
 800761c:	b2d2      	uxtb	r2, r2
 800761e:	f002 021f 	and.w	r2, r2, #31
 8007622:	2101      	movs	r1, #1
 8007624:	fa01 f202 	lsl.w	r2, r1, r2
 8007628:	4013      	ands	r3, r2
 800762a:	2b00      	cmp	r3, #0
 800762c:	d182      	bne.n	8007534 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800762e:	4b3c      	ldr	r3, [pc, #240]	; (8007720 <HAL_RCC_OscConfig+0xe38>)
 8007630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007632:	f023 020f 	bic.w	r2, r3, #15
 8007636:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800763a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	4937      	ldr	r1, [pc, #220]	; (8007720 <HAL_RCC_OscConfig+0xe38>)
 8007644:	4313      	orrs	r3, r2
 8007646:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007648:	4b35      	ldr	r3, [pc, #212]	; (8007720 <HAL_RCC_OscConfig+0xe38>)
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8007650:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007654:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	6a19      	ldr	r1, [r3, #32]
 800765c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007660:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	430b      	orrs	r3, r1
 800766a:	492d      	ldr	r1, [pc, #180]	; (8007720 <HAL_RCC_OscConfig+0xe38>)
 800766c:	4313      	orrs	r3, r2
 800766e:	604b      	str	r3, [r1, #4]
 8007670:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007674:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007678:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800767c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800767e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007682:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	fa93 f2a3 	rbit	r2, r3
 800768c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007690:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007694:	601a      	str	r2, [r3, #0]
  return result;
 8007696:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800769a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800769e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076a0:	fab3 f383 	clz	r3, r3
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80076aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	461a      	mov	r2, r3
 80076b2:	2301      	movs	r3, #1
 80076b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076b6:	f7fc fd65 	bl	8004184 <HAL_GetTick>
 80076ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80076be:	e009      	b.n	80076d4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076c0:	f7fc fd60 	bl	8004184 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d901      	bls.n	80076d4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e156      	b.n	8007982 <HAL_RCC_OscConfig+0x109a>
 80076d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80076d8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80076dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80076e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80076e6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	fa93 f2a3 	rbit	r2, r3
 80076f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80076f4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80076f8:	601a      	str	r2, [r3, #0]
  return result;
 80076fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80076fe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007702:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007704:	fab3 f383 	clz	r3, r3
 8007708:	b2db      	uxtb	r3, r3
 800770a:	095b      	lsrs	r3, r3, #5
 800770c:	b2db      	uxtb	r3, r3
 800770e:	f043 0301 	orr.w	r3, r3, #1
 8007712:	b2db      	uxtb	r3, r3
 8007714:	2b01      	cmp	r3, #1
 8007716:	d105      	bne.n	8007724 <HAL_RCC_OscConfig+0xe3c>
 8007718:	4b01      	ldr	r3, [pc, #4]	; (8007720 <HAL_RCC_OscConfig+0xe38>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	e02a      	b.n	8007774 <HAL_RCC_OscConfig+0xe8c>
 800771e:	bf00      	nop
 8007720:	40021000 	.word	0x40021000
 8007724:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007728:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800772c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007730:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007732:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007736:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	fa93 f2a3 	rbit	r2, r3
 8007740:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007744:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800774e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007752:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800775c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	fa93 f2a3 	rbit	r2, r3
 8007766:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800776a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800776e:	601a      	str	r2, [r3, #0]
 8007770:	4b86      	ldr	r3, [pc, #536]	; (800798c <HAL_RCC_OscConfig+0x10a4>)
 8007772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007774:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007778:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800777c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007780:	6011      	str	r1, [r2, #0]
 8007782:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007786:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800778a:	6812      	ldr	r2, [r2, #0]
 800778c:	fa92 f1a2 	rbit	r1, r2
 8007790:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007794:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8007798:	6011      	str	r1, [r2, #0]
  return result;
 800779a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800779e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80077a2:	6812      	ldr	r2, [r2, #0]
 80077a4:	fab2 f282 	clz	r2, r2
 80077a8:	b2d2      	uxtb	r2, r2
 80077aa:	f042 0220 	orr.w	r2, r2, #32
 80077ae:	b2d2      	uxtb	r2, r2
 80077b0:	f002 021f 	and.w	r2, r2, #31
 80077b4:	2101      	movs	r1, #1
 80077b6:	fa01 f202 	lsl.w	r2, r1, r2
 80077ba:	4013      	ands	r3, r2
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f43f af7f 	beq.w	80076c0 <HAL_RCC_OscConfig+0xdd8>
 80077c2:	e0dd      	b.n	8007980 <HAL_RCC_OscConfig+0x1098>
 80077c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80077c8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80077cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80077d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80077d6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	fa93 f2a3 	rbit	r2, r3
 80077e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80077e4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80077e8:	601a      	str	r2, [r3, #0]
  return result;
 80077ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80077ee:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80077f2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077f4:	fab3 f383 	clz	r3, r3
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80077fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	461a      	mov	r2, r3
 8007806:	2300      	movs	r3, #0
 8007808:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800780a:	f7fc fcbb 	bl	8004184 <HAL_GetTick>
 800780e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007812:	e009      	b.n	8007828 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007814:	f7fc fcb6 	bl	8004184 <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	2b02      	cmp	r3, #2
 8007822:	d901      	bls.n	8007828 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e0ac      	b.n	8007982 <HAL_RCC_OscConfig+0x109a>
 8007828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800782c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007830:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007834:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800783a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	fa93 f2a3 	rbit	r2, r3
 8007844:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007848:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800784c:	601a      	str	r2, [r3, #0]
  return result;
 800784e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007852:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007856:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007858:	fab3 f383 	clz	r3, r3
 800785c:	b2db      	uxtb	r3, r3
 800785e:	095b      	lsrs	r3, r3, #5
 8007860:	b2db      	uxtb	r3, r3
 8007862:	f043 0301 	orr.w	r3, r3, #1
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b01      	cmp	r3, #1
 800786a:	d102      	bne.n	8007872 <HAL_RCC_OscConfig+0xf8a>
 800786c:	4b47      	ldr	r3, [pc, #284]	; (800798c <HAL_RCC_OscConfig+0x10a4>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	e027      	b.n	80078c2 <HAL_RCC_OscConfig+0xfda>
 8007872:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007876:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800787a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800787e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007884:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	fa93 f2a3 	rbit	r2, r3
 800788e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007892:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007896:	601a      	str	r2, [r3, #0]
 8007898:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800789c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80078a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80078a4:	601a      	str	r2, [r3, #0]
 80078a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80078aa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	fa93 f2a3 	rbit	r2, r3
 80078b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80078b8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80078bc:	601a      	str	r2, [r3, #0]
 80078be:	4b33      	ldr	r3, [pc, #204]	; (800798c <HAL_RCC_OscConfig+0x10a4>)
 80078c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80078c6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80078ca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80078ce:	6011      	str	r1, [r2, #0]
 80078d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80078d4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80078d8:	6812      	ldr	r2, [r2, #0]
 80078da:	fa92 f1a2 	rbit	r1, r2
 80078de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80078e2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80078e6:	6011      	str	r1, [r2, #0]
  return result;
 80078e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80078ec:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80078f0:	6812      	ldr	r2, [r2, #0]
 80078f2:	fab2 f282 	clz	r2, r2
 80078f6:	b2d2      	uxtb	r2, r2
 80078f8:	f042 0220 	orr.w	r2, r2, #32
 80078fc:	b2d2      	uxtb	r2, r2
 80078fe:	f002 021f 	and.w	r2, r2, #31
 8007902:	2101      	movs	r1, #1
 8007904:	fa01 f202 	lsl.w	r2, r1, r2
 8007908:	4013      	ands	r3, r2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d182      	bne.n	8007814 <HAL_RCC_OscConfig+0xf2c>
 800790e:	e037      	b.n	8007980 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007914:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d101      	bne.n	8007924 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e02e      	b.n	8007982 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007924:	4b19      	ldr	r3, [pc, #100]	; (800798c <HAL_RCC_OscConfig+0x10a4>)
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800792c:	4b17      	ldr	r3, [pc, #92]	; (800798c <HAL_RCC_OscConfig+0x10a4>)
 800792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007930:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007934:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007938:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800793c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007940:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	69db      	ldr	r3, [r3, #28]
 8007948:	429a      	cmp	r2, r3
 800794a:	d117      	bne.n	800797c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800794c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007950:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007954:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007958:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007960:	429a      	cmp	r2, r3
 8007962:	d10b      	bne.n	800797c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8007964:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007968:	f003 020f 	and.w	r2, r3, #15
 800796c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007970:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8007978:	429a      	cmp	r2, r3
 800797a:	d001      	beq.n	8007980 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e000      	b.n	8007982 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	40021000 	.word	0x40021000

08007990 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b09e      	sub	sp, #120	; 0x78
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800799a:	2300      	movs	r3, #0
 800799c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e162      	b.n	8007c6e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80079a8:	4b90      	ldr	r3, [pc, #576]	; (8007bec <HAL_RCC_ClockConfig+0x25c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0307 	and.w	r3, r3, #7
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d910      	bls.n	80079d8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079b6:	4b8d      	ldr	r3, [pc, #564]	; (8007bec <HAL_RCC_ClockConfig+0x25c>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f023 0207 	bic.w	r2, r3, #7
 80079be:	498b      	ldr	r1, [pc, #556]	; (8007bec <HAL_RCC_ClockConfig+0x25c>)
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079c6:	4b89      	ldr	r3, [pc, #548]	; (8007bec <HAL_RCC_ClockConfig+0x25c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0307 	and.w	r3, r3, #7
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d001      	beq.n	80079d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e14a      	b.n	8007c6e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0302 	and.w	r3, r3, #2
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d008      	beq.n	80079f6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079e4:	4b82      	ldr	r3, [pc, #520]	; (8007bf0 <HAL_RCC_ClockConfig+0x260>)
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	497f      	ldr	r1, [pc, #508]	; (8007bf0 <HAL_RCC_ClockConfig+0x260>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f000 80dc 	beq.w	8007bbc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d13c      	bne.n	8007a86 <HAL_RCC_ClockConfig+0xf6>
 8007a0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a10:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a14:	fa93 f3a3 	rbit	r3, r3
 8007a18:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a1c:	fab3 f383 	clz	r3, r3
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	095b      	lsrs	r3, r3, #5
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	f043 0301 	orr.w	r3, r3, #1
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d102      	bne.n	8007a36 <HAL_RCC_ClockConfig+0xa6>
 8007a30:	4b6f      	ldr	r3, [pc, #444]	; (8007bf0 <HAL_RCC_ClockConfig+0x260>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	e00f      	b.n	8007a56 <HAL_RCC_ClockConfig+0xc6>
 8007a36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a3e:	fa93 f3a3 	rbit	r3, r3
 8007a42:	667b      	str	r3, [r7, #100]	; 0x64
 8007a44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a48:	663b      	str	r3, [r7, #96]	; 0x60
 8007a4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a4c:	fa93 f3a3 	rbit	r3, r3
 8007a50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a52:	4b67      	ldr	r3, [pc, #412]	; (8007bf0 <HAL_RCC_ClockConfig+0x260>)
 8007a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007a5a:	65ba      	str	r2, [r7, #88]	; 0x58
 8007a5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a5e:	fa92 f2a2 	rbit	r2, r2
 8007a62:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007a64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a66:	fab2 f282 	clz	r2, r2
 8007a6a:	b2d2      	uxtb	r2, r2
 8007a6c:	f042 0220 	orr.w	r2, r2, #32
 8007a70:	b2d2      	uxtb	r2, r2
 8007a72:	f002 021f 	and.w	r2, r2, #31
 8007a76:	2101      	movs	r1, #1
 8007a78:	fa01 f202 	lsl.w	r2, r1, r2
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d17b      	bne.n	8007b7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e0f3      	b.n	8007c6e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d13c      	bne.n	8007b08 <HAL_RCC_ClockConfig+0x178>
 8007a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a96:	fa93 f3a3 	rbit	r3, r3
 8007a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a9e:	fab3 f383 	clz	r3, r3
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	095b      	lsrs	r3, r3, #5
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	f043 0301 	orr.w	r3, r3, #1
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d102      	bne.n	8007ab8 <HAL_RCC_ClockConfig+0x128>
 8007ab2:	4b4f      	ldr	r3, [pc, #316]	; (8007bf0 <HAL_RCC_ClockConfig+0x260>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	e00f      	b.n	8007ad8 <HAL_RCC_ClockConfig+0x148>
 8007ab8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007abc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ac0:	fa93 f3a3 	rbit	r3, r3
 8007ac4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ac6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007aca:	643b      	str	r3, [r7, #64]	; 0x40
 8007acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ace:	fa93 f3a3 	rbit	r3, r3
 8007ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ad4:	4b46      	ldr	r3, [pc, #280]	; (8007bf0 <HAL_RCC_ClockConfig+0x260>)
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007adc:	63ba      	str	r2, [r7, #56]	; 0x38
 8007ade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ae0:	fa92 f2a2 	rbit	r2, r2
 8007ae4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8007ae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ae8:	fab2 f282 	clz	r2, r2
 8007aec:	b2d2      	uxtb	r2, r2
 8007aee:	f042 0220 	orr.w	r2, r2, #32
 8007af2:	b2d2      	uxtb	r2, r2
 8007af4:	f002 021f 	and.w	r2, r2, #31
 8007af8:	2101      	movs	r1, #1
 8007afa:	fa01 f202 	lsl.w	r2, r1, r2
 8007afe:	4013      	ands	r3, r2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d13a      	bne.n	8007b7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e0b2      	b.n	8007c6e <HAL_RCC_ClockConfig+0x2de>
 8007b08:	2302      	movs	r3, #2
 8007b0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0e:	fa93 f3a3 	rbit	r3, r3
 8007b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b16:	fab3 f383 	clz	r3, r3
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	095b      	lsrs	r3, r3, #5
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	f043 0301 	orr.w	r3, r3, #1
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d102      	bne.n	8007b30 <HAL_RCC_ClockConfig+0x1a0>
 8007b2a:	4b31      	ldr	r3, [pc, #196]	; (8007bf0 <HAL_RCC_ClockConfig+0x260>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	e00d      	b.n	8007b4c <HAL_RCC_ClockConfig+0x1bc>
 8007b30:	2302      	movs	r3, #2
 8007b32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b36:	fa93 f3a3 	rbit	r3, r3
 8007b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	623b      	str	r3, [r7, #32]
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	fa93 f3a3 	rbit	r3, r3
 8007b46:	61fb      	str	r3, [r7, #28]
 8007b48:	4b29      	ldr	r3, [pc, #164]	; (8007bf0 <HAL_RCC_ClockConfig+0x260>)
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	2202      	movs	r2, #2
 8007b4e:	61ba      	str	r2, [r7, #24]
 8007b50:	69ba      	ldr	r2, [r7, #24]
 8007b52:	fa92 f2a2 	rbit	r2, r2
 8007b56:	617a      	str	r2, [r7, #20]
  return result;
 8007b58:	697a      	ldr	r2, [r7, #20]
 8007b5a:	fab2 f282 	clz	r2, r2
 8007b5e:	b2d2      	uxtb	r2, r2
 8007b60:	f042 0220 	orr.w	r2, r2, #32
 8007b64:	b2d2      	uxtb	r2, r2
 8007b66:	f002 021f 	and.w	r2, r2, #31
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8007b70:	4013      	ands	r3, r2
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e079      	b.n	8007c6e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b7a:	4b1d      	ldr	r3, [pc, #116]	; (8007bf0 <HAL_RCC_ClockConfig+0x260>)
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f023 0203 	bic.w	r2, r3, #3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	491a      	ldr	r1, [pc, #104]	; (8007bf0 <HAL_RCC_ClockConfig+0x260>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b8c:	f7fc fafa 	bl	8004184 <HAL_GetTick>
 8007b90:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b92:	e00a      	b.n	8007baa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b94:	f7fc faf6 	bl	8004184 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d901      	bls.n	8007baa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e061      	b.n	8007c6e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007baa:	4b11      	ldr	r3, [pc, #68]	; (8007bf0 <HAL_RCC_ClockConfig+0x260>)
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f003 020c 	and.w	r2, r3, #12
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d1eb      	bne.n	8007b94 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007bbc:	4b0b      	ldr	r3, [pc, #44]	; (8007bec <HAL_RCC_ClockConfig+0x25c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0307 	and.w	r3, r3, #7
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d214      	bcs.n	8007bf4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bca:	4b08      	ldr	r3, [pc, #32]	; (8007bec <HAL_RCC_ClockConfig+0x25c>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f023 0207 	bic.w	r2, r3, #7
 8007bd2:	4906      	ldr	r1, [pc, #24]	; (8007bec <HAL_RCC_ClockConfig+0x25c>)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bda:	4b04      	ldr	r3, [pc, #16]	; (8007bec <HAL_RCC_ClockConfig+0x25c>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0307 	and.w	r3, r3, #7
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d005      	beq.n	8007bf4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e040      	b.n	8007c6e <HAL_RCC_ClockConfig+0x2de>
 8007bec:	40022000 	.word	0x40022000
 8007bf0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0304 	and.w	r3, r3, #4
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d008      	beq.n	8007c12 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c00:	4b1d      	ldr	r3, [pc, #116]	; (8007c78 <HAL_RCC_ClockConfig+0x2e8>)
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	491a      	ldr	r1, [pc, #104]	; (8007c78 <HAL_RCC_ClockConfig+0x2e8>)
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0308 	and.w	r3, r3, #8
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d009      	beq.n	8007c32 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c1e:	4b16      	ldr	r3, [pc, #88]	; (8007c78 <HAL_RCC_ClockConfig+0x2e8>)
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	00db      	lsls	r3, r3, #3
 8007c2c:	4912      	ldr	r1, [pc, #72]	; (8007c78 <HAL_RCC_ClockConfig+0x2e8>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007c32:	f000 f829 	bl	8007c88 <HAL_RCC_GetSysClockFreq>
 8007c36:	4601      	mov	r1, r0
 8007c38:	4b0f      	ldr	r3, [pc, #60]	; (8007c78 <HAL_RCC_ClockConfig+0x2e8>)
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c40:	22f0      	movs	r2, #240	; 0xf0
 8007c42:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	fa92 f2a2 	rbit	r2, r2
 8007c4a:	60fa      	str	r2, [r7, #12]
  return result;
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	fab2 f282 	clz	r2, r2
 8007c52:	b2d2      	uxtb	r2, r2
 8007c54:	40d3      	lsrs	r3, r2
 8007c56:	4a09      	ldr	r2, [pc, #36]	; (8007c7c <HAL_RCC_ClockConfig+0x2ec>)
 8007c58:	5cd3      	ldrb	r3, [r2, r3]
 8007c5a:	fa21 f303 	lsr.w	r3, r1, r3
 8007c5e:	4a08      	ldr	r2, [pc, #32]	; (8007c80 <HAL_RCC_ClockConfig+0x2f0>)
 8007c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007c62:	4b08      	ldr	r3, [pc, #32]	; (8007c84 <HAL_RCC_ClockConfig+0x2f4>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fc fa48 	bl	80040fc <HAL_InitTick>
  
  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3778      	adds	r7, #120	; 0x78
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	40021000 	.word	0x40021000
 8007c7c:	0800adac 	.word	0x0800adac
 8007c80:	200000b0 	.word	0x200000b0
 8007c84:	200000b4 	.word	0x200000b4

08007c88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b08b      	sub	sp, #44	; 0x2c
 8007c8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	61fb      	str	r3, [r7, #28]
 8007c92:	2300      	movs	r3, #0
 8007c94:	61bb      	str	r3, [r7, #24]
 8007c96:	2300      	movs	r3, #0
 8007c98:	627b      	str	r3, [r7, #36]	; 0x24
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007ca2:	4b2a      	ldr	r3, [pc, #168]	; (8007d4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	f003 030c 	and.w	r3, r3, #12
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	d002      	beq.n	8007cb8 <HAL_RCC_GetSysClockFreq+0x30>
 8007cb2:	2b08      	cmp	r3, #8
 8007cb4:	d003      	beq.n	8007cbe <HAL_RCC_GetSysClockFreq+0x36>
 8007cb6:	e03f      	b.n	8007d38 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007cb8:	4b25      	ldr	r3, [pc, #148]	; (8007d50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007cba:	623b      	str	r3, [r7, #32]
      break;
 8007cbc:	e03f      	b.n	8007d3e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007cc4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007cc8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	fa92 f2a2 	rbit	r2, r2
 8007cd0:	607a      	str	r2, [r7, #4]
  return result;
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	fab2 f282 	clz	r2, r2
 8007cd8:	b2d2      	uxtb	r2, r2
 8007cda:	40d3      	lsrs	r3, r2
 8007cdc:	4a1d      	ldr	r2, [pc, #116]	; (8007d54 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007cde:	5cd3      	ldrb	r3, [r2, r3]
 8007ce0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007ce2:	4b1a      	ldr	r3, [pc, #104]	; (8007d4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8007ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce6:	f003 030f 	and.w	r3, r3, #15
 8007cea:	220f      	movs	r2, #15
 8007cec:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	fa92 f2a2 	rbit	r2, r2
 8007cf4:	60fa      	str	r2, [r7, #12]
  return result;
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	fab2 f282 	clz	r2, r2
 8007cfc:	b2d2      	uxtb	r2, r2
 8007cfe:	40d3      	lsrs	r3, r2
 8007d00:	4a15      	ldr	r2, [pc, #84]	; (8007d58 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007d02:	5cd3      	ldrb	r3, [r2, r3]
 8007d04:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d008      	beq.n	8007d22 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007d10:	4a0f      	ldr	r2, [pc, #60]	; (8007d50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	fb02 f303 	mul.w	r3, r2, r3
 8007d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d20:	e007      	b.n	8007d32 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007d22:	4a0b      	ldr	r2, [pc, #44]	; (8007d50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	fb02 f303 	mul.w	r3, r2, r3
 8007d30:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	623b      	str	r3, [r7, #32]
      break;
 8007d36:	e002      	b.n	8007d3e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007d38:	4b05      	ldr	r3, [pc, #20]	; (8007d50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007d3a:	623b      	str	r3, [r7, #32]
      break;
 8007d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d3e:	6a3b      	ldr	r3, [r7, #32]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	372c      	adds	r7, #44	; 0x2c
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	40021000 	.word	0x40021000
 8007d50:	007a1200 	.word	0x007a1200
 8007d54:	0800adc4 	.word	0x0800adc4
 8007d58:	0800add4 	.word	0x0800add4

08007d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d60:	4b03      	ldr	r3, [pc, #12]	; (8007d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d62:	681b      	ldr	r3, [r3, #0]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	200000b0 	.word	0x200000b0

08007d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007d7a:	f7ff ffef 	bl	8007d5c <HAL_RCC_GetHCLKFreq>
 8007d7e:	4601      	mov	r1, r0
 8007d80:	4b0b      	ldr	r3, [pc, #44]	; (8007db0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d88:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007d8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	fa92 f2a2 	rbit	r2, r2
 8007d94:	603a      	str	r2, [r7, #0]
  return result;
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	fab2 f282 	clz	r2, r2
 8007d9c:	b2d2      	uxtb	r2, r2
 8007d9e:	40d3      	lsrs	r3, r2
 8007da0:	4a04      	ldr	r2, [pc, #16]	; (8007db4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007da2:	5cd3      	ldrb	r3, [r2, r3]
 8007da4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007da8:	4618      	mov	r0, r3
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	40021000 	.word	0x40021000
 8007db4:	0800adbc 	.word	0x0800adbc

08007db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007dbe:	f7ff ffcd 	bl	8007d5c <HAL_RCC_GetHCLKFreq>
 8007dc2:	4601      	mov	r1, r0
 8007dc4:	4b0b      	ldr	r3, [pc, #44]	; (8007df4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007dcc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007dd0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	fa92 f2a2 	rbit	r2, r2
 8007dd8:	603a      	str	r2, [r7, #0]
  return result;
 8007dda:	683a      	ldr	r2, [r7, #0]
 8007ddc:	fab2 f282 	clz	r2, r2
 8007de0:	b2d2      	uxtb	r2, r2
 8007de2:	40d3      	lsrs	r3, r2
 8007de4:	4a04      	ldr	r2, [pc, #16]	; (8007df8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007de6:	5cd3      	ldrb	r3, [r2, r3]
 8007de8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007dec:	4618      	mov	r0, r3
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	40021000 	.word	0x40021000
 8007df8:	0800adbc 	.word	0x0800adbc

08007dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b092      	sub	sp, #72	; 0x48
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e04:	2300      	movs	r3, #0
 8007e06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 80d4 	beq.w	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e20:	4b4e      	ldr	r3, [pc, #312]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e22:	69db      	ldr	r3, [r3, #28]
 8007e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10e      	bne.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e2c:	4b4b      	ldr	r3, [pc, #300]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	4a4a      	ldr	r2, [pc, #296]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e36:	61d3      	str	r3, [r2, #28]
 8007e38:	4b48      	ldr	r3, [pc, #288]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e3a:	69db      	ldr	r3, [r3, #28]
 8007e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e40:	60bb      	str	r3, [r7, #8]
 8007e42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e44:	2301      	movs	r3, #1
 8007e46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e4a:	4b45      	ldr	r3, [pc, #276]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d118      	bne.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e56:	4b42      	ldr	r3, [pc, #264]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a41      	ldr	r2, [pc, #260]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e62:	f7fc f98f 	bl	8004184 <HAL_GetTick>
 8007e66:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e68:	e008      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e6a:	f7fc f98b 	bl	8004184 <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	2b64      	cmp	r3, #100	; 0x64
 8007e76:	d901      	bls.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e1d6      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e7c:	4b38      	ldr	r3, [pc, #224]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d0f0      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007e88:	4b34      	ldr	r3, [pc, #208]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
 8007e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e90:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 8084 	beq.w	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ea2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d07c      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ea8:	4b2c      	ldr	r3, [pc, #176]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007eb6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eba:	fa93 f3a3 	rbit	r3, r3
 8007ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007ec2:	fab3 f383 	clz	r3, r3
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	461a      	mov	r2, r3
 8007eca:	4b26      	ldr	r3, [pc, #152]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007ecc:	4413      	add	r3, r2
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	6013      	str	r3, [r2, #0]
 8007ed6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007eda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ede:	fa93 f3a3 	rbit	r3, r3
 8007ee2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007ee6:	fab3 f383 	clz	r3, r3
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	461a      	mov	r2, r3
 8007eee:	4b1d      	ldr	r3, [pc, #116]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007ef0:	4413      	add	r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007efa:	4a18      	ldr	r2, [pc, #96]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007efe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d04b      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f0a:	f7fc f93b 	bl	8004184 <HAL_GetTick>
 8007f0e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f10:	e00a      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f12:	f7fc f937 	bl	8004184 <HAL_GetTick>
 8007f16:	4602      	mov	r2, r0
 8007f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d901      	bls.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e180      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007f28:	2302      	movs	r3, #2
 8007f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2e:	fa93 f3a3 	rbit	r3, r3
 8007f32:	627b      	str	r3, [r7, #36]	; 0x24
 8007f34:	2302      	movs	r3, #2
 8007f36:	623b      	str	r3, [r7, #32]
 8007f38:	6a3b      	ldr	r3, [r7, #32]
 8007f3a:	fa93 f3a3 	rbit	r3, r3
 8007f3e:	61fb      	str	r3, [r7, #28]
  return result;
 8007f40:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f42:	fab3 f383 	clz	r3, r3
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	095b      	lsrs	r3, r3, #5
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	f043 0302 	orr.w	r3, r3, #2
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d108      	bne.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007f56:	4b01      	ldr	r3, [pc, #4]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	e00d      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007f5c:	40021000 	.word	0x40021000
 8007f60:	40007000 	.word	0x40007000
 8007f64:	10908100 	.word	0x10908100
 8007f68:	2302      	movs	r3, #2
 8007f6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	fa93 f3a3 	rbit	r3, r3
 8007f72:	617b      	str	r3, [r7, #20]
 8007f74:	4b9a      	ldr	r3, [pc, #616]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f78:	2202      	movs	r2, #2
 8007f7a:	613a      	str	r2, [r7, #16]
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	fa92 f2a2 	rbit	r2, r2
 8007f82:	60fa      	str	r2, [r7, #12]
  return result;
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	fab2 f282 	clz	r2, r2
 8007f8a:	b2d2      	uxtb	r2, r2
 8007f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f90:	b2d2      	uxtb	r2, r2
 8007f92:	f002 021f 	and.w	r2, r2, #31
 8007f96:	2101      	movs	r1, #1
 8007f98:	fa01 f202 	lsl.w	r2, r1, r2
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d0b7      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007fa2:	4b8f      	ldr	r3, [pc, #572]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	498c      	ldr	r1, [pc, #560]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007fb4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d105      	bne.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fbc:	4b88      	ldr	r3, [pc, #544]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007fbe:	69db      	ldr	r3, [r3, #28]
 8007fc0:	4a87      	ldr	r2, [pc, #540]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fc6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d008      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007fd4:	4b82      	ldr	r3, [pc, #520]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd8:	f023 0203 	bic.w	r2, r3, #3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	497f      	ldr	r1, [pc, #508]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0302 	and.w	r3, r3, #2
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d008      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ff2:	4b7b      	ldr	r3, [pc, #492]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	4978      	ldr	r1, [pc, #480]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008000:	4313      	orrs	r3, r2
 8008002:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0304 	and.w	r3, r3, #4
 800800c:	2b00      	cmp	r3, #0
 800800e:	d008      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008010:	4b73      	ldr	r3, [pc, #460]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008014:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	4970      	ldr	r1, [pc, #448]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800801e:	4313      	orrs	r3, r2
 8008020:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b00      	cmp	r3, #0
 800802c:	d008      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800802e:	4b6c      	ldr	r3, [pc, #432]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008032:	f023 0210 	bic.w	r2, r3, #16
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	4969      	ldr	r1, [pc, #420]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800803c:	4313      	orrs	r3, r2
 800803e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d008      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800804c:	4b64      	ldr	r3, [pc, #400]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008058:	4961      	ldr	r1, [pc, #388]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800805a:	4313      	orrs	r3, r2
 800805c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008066:	2b00      	cmp	r3, #0
 8008068:	d008      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800806a:	4b5d      	ldr	r3, [pc, #372]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800806c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800806e:	f023 0220 	bic.w	r2, r3, #32
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	495a      	ldr	r1, [pc, #360]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008078:	4313      	orrs	r3, r2
 800807a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d008      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008088:	4b55      	ldr	r3, [pc, #340]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800808a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800808c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008094:	4952      	ldr	r1, [pc, #328]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008096:	4313      	orrs	r3, r2
 8008098:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0308 	and.w	r3, r3, #8
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d008      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80080a6:	4b4e      	ldr	r3, [pc, #312]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80080a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	494b      	ldr	r1, [pc, #300]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80080b4:	4313      	orrs	r3, r2
 80080b6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0310 	and.w	r3, r3, #16
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d008      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80080c4:	4b46      	ldr	r3, [pc, #280]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80080c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	4943      	ldr	r1, [pc, #268]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80080d2:	4313      	orrs	r3, r2
 80080d4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d008      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80080e2:	4b3f      	ldr	r3, [pc, #252]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ee:	493c      	ldr	r1, [pc, #240]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80080f0:	4313      	orrs	r3, r2
 80080f2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d008      	beq.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008100:	4b37      	ldr	r3, [pc, #220]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008104:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800810c:	4934      	ldr	r1, [pc, #208]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800810e:	4313      	orrs	r3, r2
 8008110:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800811a:	2b00      	cmp	r3, #0
 800811c:	d008      	beq.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800811e:	4b30      	ldr	r3, [pc, #192]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008122:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812a:	492d      	ldr	r1, [pc, #180]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800812c:	4313      	orrs	r3, r2
 800812e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d008      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800813c:	4b28      	ldr	r3, [pc, #160]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800813e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008140:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008148:	4925      	ldr	r1, [pc, #148]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800814a:	4313      	orrs	r3, r2
 800814c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008156:	2b00      	cmp	r3, #0
 8008158:	d008      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800815a:	4b21      	ldr	r3, [pc, #132]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800815c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008166:	491e      	ldr	r1, [pc, #120]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008168:	4313      	orrs	r3, r2
 800816a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d008      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8008178:	4b19      	ldr	r3, [pc, #100]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800817a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800817c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008184:	4916      	ldr	r1, [pc, #88]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008186:	4313      	orrs	r3, r2
 8008188:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d008      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8008196:	4b12      	ldr	r3, [pc, #72]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a2:	490f      	ldr	r1, [pc, #60]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80081a4:	4313      	orrs	r3, r2
 80081a6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d008      	beq.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80081b4:	4b0a      	ldr	r3, [pc, #40]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80081b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081c0:	4907      	ldr	r1, [pc, #28]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00c      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80081d2:	4b03      	ldr	r3, [pc, #12]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80081d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	e002      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80081de:	bf00      	nop
 80081e0:	40021000 	.word	0x40021000
 80081e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081e6:	4913      	ldr	r1, [pc, #76]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80081e8:	4313      	orrs	r3, r2
 80081ea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d008      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80081f8:	4b0e      	ldr	r3, [pc, #56]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80081fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008204:	490b      	ldr	r1, [pc, #44]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008206:	4313      	orrs	r3, r2
 8008208:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d008      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8008216:	4b07      	ldr	r3, [pc, #28]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008222:	4904      	ldr	r1, [pc, #16]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008224:	4313      	orrs	r3, r2
 8008226:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3748      	adds	r7, #72	; 0x48
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	40021000 	.word	0x40021000

08008238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e049      	b.n	80082de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d106      	bne.n	8008264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7fb fd2c 	bl	8003cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2202      	movs	r2, #2
 8008268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	3304      	adds	r3, #4
 8008274:	4619      	mov	r1, r3
 8008276:	4610      	mov	r0, r2
 8008278:	f000 fc12 	bl	8008aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b082      	sub	sp, #8
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d101      	bne.n	80082f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e049      	b.n	800838c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2b00      	cmp	r3, #0
 8008302:	d106      	bne.n	8008312 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7fb fcb5 	bl	8003c7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2202      	movs	r2, #2
 8008316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	3304      	adds	r3, #4
 8008322:	4619      	mov	r1, r3
 8008324:	4610      	mov	r0, r2
 8008326:	f000 fbbb 	bl	8008aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2201      	movs	r2, #1
 8008386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d109      	bne.n	80083b8 <HAL_TIM_PWM_Start+0x24>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	bf14      	ite	ne
 80083b0:	2301      	movne	r3, #1
 80083b2:	2300      	moveq	r3, #0
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	e03c      	b.n	8008432 <HAL_TIM_PWM_Start+0x9e>
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	2b04      	cmp	r3, #4
 80083bc:	d109      	bne.n	80083d2 <HAL_TIM_PWM_Start+0x3e>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	bf14      	ite	ne
 80083ca:	2301      	movne	r3, #1
 80083cc:	2300      	moveq	r3, #0
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	e02f      	b.n	8008432 <HAL_TIM_PWM_Start+0x9e>
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	2b08      	cmp	r3, #8
 80083d6:	d109      	bne.n	80083ec <HAL_TIM_PWM_Start+0x58>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	bf14      	ite	ne
 80083e4:	2301      	movne	r3, #1
 80083e6:	2300      	moveq	r3, #0
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	e022      	b.n	8008432 <HAL_TIM_PWM_Start+0x9e>
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	2b0c      	cmp	r3, #12
 80083f0:	d109      	bne.n	8008406 <HAL_TIM_PWM_Start+0x72>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	bf14      	ite	ne
 80083fe:	2301      	movne	r3, #1
 8008400:	2300      	moveq	r3, #0
 8008402:	b2db      	uxtb	r3, r3
 8008404:	e015      	b.n	8008432 <HAL_TIM_PWM_Start+0x9e>
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	2b10      	cmp	r3, #16
 800840a:	d109      	bne.n	8008420 <HAL_TIM_PWM_Start+0x8c>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b01      	cmp	r3, #1
 8008416:	bf14      	ite	ne
 8008418:	2301      	movne	r3, #1
 800841a:	2300      	moveq	r3, #0
 800841c:	b2db      	uxtb	r3, r3
 800841e:	e008      	b.n	8008432 <HAL_TIM_PWM_Start+0x9e>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008426:	b2db      	uxtb	r3, r3
 8008428:	2b01      	cmp	r3, #1
 800842a:	bf14      	ite	ne
 800842c:	2301      	movne	r3, #1
 800842e:	2300      	moveq	r3, #0
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e0a1      	b.n	800857e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d104      	bne.n	800844a <HAL_TIM_PWM_Start+0xb6>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2202      	movs	r2, #2
 8008444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008448:	e023      	b.n	8008492 <HAL_TIM_PWM_Start+0xfe>
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	2b04      	cmp	r3, #4
 800844e:	d104      	bne.n	800845a <HAL_TIM_PWM_Start+0xc6>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2202      	movs	r2, #2
 8008454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008458:	e01b      	b.n	8008492 <HAL_TIM_PWM_Start+0xfe>
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	2b08      	cmp	r3, #8
 800845e:	d104      	bne.n	800846a <HAL_TIM_PWM_Start+0xd6>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2202      	movs	r2, #2
 8008464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008468:	e013      	b.n	8008492 <HAL_TIM_PWM_Start+0xfe>
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	2b0c      	cmp	r3, #12
 800846e:	d104      	bne.n	800847a <HAL_TIM_PWM_Start+0xe6>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2202      	movs	r2, #2
 8008474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008478:	e00b      	b.n	8008492 <HAL_TIM_PWM_Start+0xfe>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	2b10      	cmp	r3, #16
 800847e:	d104      	bne.n	800848a <HAL_TIM_PWM_Start+0xf6>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2202      	movs	r2, #2
 8008484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008488:	e003      	b.n	8008492 <HAL_TIM_PWM_Start+0xfe>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2202      	movs	r2, #2
 800848e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2201      	movs	r2, #1
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	4618      	mov	r0, r3
 800849c:	f000 ff3e 	bl	800931c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a38      	ldr	r2, [pc, #224]	; (8008588 <HAL_TIM_PWM_Start+0x1f4>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d018      	beq.n	80084dc <HAL_TIM_PWM_Start+0x148>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a37      	ldr	r2, [pc, #220]	; (800858c <HAL_TIM_PWM_Start+0x1f8>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d013      	beq.n	80084dc <HAL_TIM_PWM_Start+0x148>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a35      	ldr	r2, [pc, #212]	; (8008590 <HAL_TIM_PWM_Start+0x1fc>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d00e      	beq.n	80084dc <HAL_TIM_PWM_Start+0x148>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a34      	ldr	r2, [pc, #208]	; (8008594 <HAL_TIM_PWM_Start+0x200>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d009      	beq.n	80084dc <HAL_TIM_PWM_Start+0x148>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a32      	ldr	r2, [pc, #200]	; (8008598 <HAL_TIM_PWM_Start+0x204>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d004      	beq.n	80084dc <HAL_TIM_PWM_Start+0x148>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a31      	ldr	r2, [pc, #196]	; (800859c <HAL_TIM_PWM_Start+0x208>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d101      	bne.n	80084e0 <HAL_TIM_PWM_Start+0x14c>
 80084dc:	2301      	movs	r3, #1
 80084de:	e000      	b.n	80084e2 <HAL_TIM_PWM_Start+0x14e>
 80084e0:	2300      	movs	r3, #0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d007      	beq.n	80084f6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a23      	ldr	r2, [pc, #140]	; (8008588 <HAL_TIM_PWM_Start+0x1f4>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d01d      	beq.n	800853c <HAL_TIM_PWM_Start+0x1a8>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008508:	d018      	beq.n	800853c <HAL_TIM_PWM_Start+0x1a8>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a24      	ldr	r2, [pc, #144]	; (80085a0 <HAL_TIM_PWM_Start+0x20c>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d013      	beq.n	800853c <HAL_TIM_PWM_Start+0x1a8>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a22      	ldr	r2, [pc, #136]	; (80085a4 <HAL_TIM_PWM_Start+0x210>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d00e      	beq.n	800853c <HAL_TIM_PWM_Start+0x1a8>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a1a      	ldr	r2, [pc, #104]	; (800858c <HAL_TIM_PWM_Start+0x1f8>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d009      	beq.n	800853c <HAL_TIM_PWM_Start+0x1a8>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a18      	ldr	r2, [pc, #96]	; (8008590 <HAL_TIM_PWM_Start+0x1fc>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d004      	beq.n	800853c <HAL_TIM_PWM_Start+0x1a8>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a19      	ldr	r2, [pc, #100]	; (800859c <HAL_TIM_PWM_Start+0x208>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d115      	bne.n	8008568 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	689a      	ldr	r2, [r3, #8]
 8008542:	4b19      	ldr	r3, [pc, #100]	; (80085a8 <HAL_TIM_PWM_Start+0x214>)
 8008544:	4013      	ands	r3, r2
 8008546:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2b06      	cmp	r3, #6
 800854c:	d015      	beq.n	800857a <HAL_TIM_PWM_Start+0x1e6>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008554:	d011      	beq.n	800857a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f042 0201 	orr.w	r2, r2, #1
 8008564:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008566:	e008      	b.n	800857a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f042 0201 	orr.w	r2, r2, #1
 8008576:	601a      	str	r2, [r3, #0]
 8008578:	e000      	b.n	800857c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800857a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	40012c00 	.word	0x40012c00
 800858c:	40013400 	.word	0x40013400
 8008590:	40014000 	.word	0x40014000
 8008594:	40014400 	.word	0x40014400
 8008598:	40014800 	.word	0x40014800
 800859c:	40015000 	.word	0x40015000
 80085a0:	40000400 	.word	0x40000400
 80085a4:	40000800 	.word	0x40000800
 80085a8:	00010007 	.word	0x00010007

080085ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2200      	movs	r2, #0
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 feac 	bl	800931c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a40      	ldr	r2, [pc, #256]	; (80086cc <HAL_TIM_PWM_Stop+0x120>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d018      	beq.n	8008600 <HAL_TIM_PWM_Stop+0x54>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a3f      	ldr	r2, [pc, #252]	; (80086d0 <HAL_TIM_PWM_Stop+0x124>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d013      	beq.n	8008600 <HAL_TIM_PWM_Stop+0x54>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a3d      	ldr	r2, [pc, #244]	; (80086d4 <HAL_TIM_PWM_Stop+0x128>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d00e      	beq.n	8008600 <HAL_TIM_PWM_Stop+0x54>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a3c      	ldr	r2, [pc, #240]	; (80086d8 <HAL_TIM_PWM_Stop+0x12c>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d009      	beq.n	8008600 <HAL_TIM_PWM_Stop+0x54>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a3a      	ldr	r2, [pc, #232]	; (80086dc <HAL_TIM_PWM_Stop+0x130>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d004      	beq.n	8008600 <HAL_TIM_PWM_Stop+0x54>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a39      	ldr	r2, [pc, #228]	; (80086e0 <HAL_TIM_PWM_Stop+0x134>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d101      	bne.n	8008604 <HAL_TIM_PWM_Stop+0x58>
 8008600:	2301      	movs	r3, #1
 8008602:	e000      	b.n	8008606 <HAL_TIM_PWM_Stop+0x5a>
 8008604:	2300      	movs	r3, #0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d017      	beq.n	800863a <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	6a1a      	ldr	r2, [r3, #32]
 8008610:	f241 1311 	movw	r3, #4369	; 0x1111
 8008614:	4013      	ands	r3, r2
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10f      	bne.n	800863a <HAL_TIM_PWM_Stop+0x8e>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	6a1a      	ldr	r2, [r3, #32]
 8008620:	f240 4344 	movw	r3, #1092	; 0x444
 8008624:	4013      	ands	r3, r2
 8008626:	2b00      	cmp	r3, #0
 8008628:	d107      	bne.n	800863a <HAL_TIM_PWM_Stop+0x8e>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008638:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	6a1a      	ldr	r2, [r3, #32]
 8008640:	f241 1311 	movw	r3, #4369	; 0x1111
 8008644:	4013      	ands	r3, r2
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10f      	bne.n	800866a <HAL_TIM_PWM_Stop+0xbe>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	6a1a      	ldr	r2, [r3, #32]
 8008650:	f240 4344 	movw	r3, #1092	; 0x444
 8008654:	4013      	ands	r3, r2
 8008656:	2b00      	cmp	r3, #0
 8008658:	d107      	bne.n	800866a <HAL_TIM_PWM_Stop+0xbe>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f022 0201 	bic.w	r2, r2, #1
 8008668:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d104      	bne.n	800867a <HAL_TIM_PWM_Stop+0xce>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008678:	e023      	b.n	80086c2 <HAL_TIM_PWM_Stop+0x116>
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2b04      	cmp	r3, #4
 800867e:	d104      	bne.n	800868a <HAL_TIM_PWM_Stop+0xde>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008688:	e01b      	b.n	80086c2 <HAL_TIM_PWM_Stop+0x116>
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2b08      	cmp	r3, #8
 800868e:	d104      	bne.n	800869a <HAL_TIM_PWM_Stop+0xee>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008698:	e013      	b.n	80086c2 <HAL_TIM_PWM_Stop+0x116>
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	2b0c      	cmp	r3, #12
 800869e:	d104      	bne.n	80086aa <HAL_TIM_PWM_Stop+0xfe>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086a8:	e00b      	b.n	80086c2 <HAL_TIM_PWM_Stop+0x116>
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	2b10      	cmp	r3, #16
 80086ae:	d104      	bne.n	80086ba <HAL_TIM_PWM_Stop+0x10e>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086b8:	e003      	b.n	80086c2 <HAL_TIM_PWM_Stop+0x116>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2201      	movs	r2, #1
 80086be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	40012c00 	.word	0x40012c00
 80086d0:	40013400 	.word	0x40013400
 80086d4:	40014000 	.word	0x40014000
 80086d8:	40014400 	.word	0x40014400
 80086dc:	40014800 	.word	0x40014800
 80086e0:	40015000 	.word	0x40015000

080086e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086f0:	2300      	movs	r3, #0
 80086f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d101      	bne.n	8008702 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80086fe:	2302      	movs	r3, #2
 8008700:	e0ff      	b.n	8008902 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2b14      	cmp	r3, #20
 800870e:	f200 80f0 	bhi.w	80088f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008712:	a201      	add	r2, pc, #4	; (adr r2, 8008718 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008718:	0800876d 	.word	0x0800876d
 800871c:	080088f3 	.word	0x080088f3
 8008720:	080088f3 	.word	0x080088f3
 8008724:	080088f3 	.word	0x080088f3
 8008728:	080087ad 	.word	0x080087ad
 800872c:	080088f3 	.word	0x080088f3
 8008730:	080088f3 	.word	0x080088f3
 8008734:	080088f3 	.word	0x080088f3
 8008738:	080087ef 	.word	0x080087ef
 800873c:	080088f3 	.word	0x080088f3
 8008740:	080088f3 	.word	0x080088f3
 8008744:	080088f3 	.word	0x080088f3
 8008748:	0800882f 	.word	0x0800882f
 800874c:	080088f3 	.word	0x080088f3
 8008750:	080088f3 	.word	0x080088f3
 8008754:	080088f3 	.word	0x080088f3
 8008758:	08008871 	.word	0x08008871
 800875c:	080088f3 	.word	0x080088f3
 8008760:	080088f3 	.word	0x080088f3
 8008764:	080088f3 	.word	0x080088f3
 8008768:	080088b1 	.word	0x080088b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68b9      	ldr	r1, [r7, #8]
 8008772:	4618      	mov	r0, r3
 8008774:	f000 fa32 	bl	8008bdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	699a      	ldr	r2, [r3, #24]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f042 0208 	orr.w	r2, r2, #8
 8008786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	699a      	ldr	r2, [r3, #24]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f022 0204 	bic.w	r2, r2, #4
 8008796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6999      	ldr	r1, [r3, #24]
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	691a      	ldr	r2, [r3, #16]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	430a      	orrs	r2, r1
 80087a8:	619a      	str	r2, [r3, #24]
      break;
 80087aa:	e0a5      	b.n	80088f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68b9      	ldr	r1, [r7, #8]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 faac 	bl	8008d10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	699a      	ldr	r2, [r3, #24]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	699a      	ldr	r2, [r3, #24]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	6999      	ldr	r1, [r3, #24]
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	021a      	lsls	r2, r3, #8
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	430a      	orrs	r2, r1
 80087ea:	619a      	str	r2, [r3, #24]
      break;
 80087ec:	e084      	b.n	80088f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68b9      	ldr	r1, [r7, #8]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f000 fb1f 	bl	8008e38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	69da      	ldr	r2, [r3, #28]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f042 0208 	orr.w	r2, r2, #8
 8008808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	69da      	ldr	r2, [r3, #28]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f022 0204 	bic.w	r2, r2, #4
 8008818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	69d9      	ldr	r1, [r3, #28]
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	691a      	ldr	r2, [r3, #16]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	430a      	orrs	r2, r1
 800882a:	61da      	str	r2, [r3, #28]
      break;
 800882c:	e064      	b.n	80088f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68b9      	ldr	r1, [r7, #8]
 8008834:	4618      	mov	r0, r3
 8008836:	f000 fb91 	bl	8008f5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	69da      	ldr	r2, [r3, #28]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	69da      	ldr	r2, [r3, #28]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	69d9      	ldr	r1, [r3, #28]
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	021a      	lsls	r2, r3, #8
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	430a      	orrs	r2, r1
 800886c:	61da      	str	r2, [r3, #28]
      break;
 800886e:	e043      	b.n	80088f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68b9      	ldr	r1, [r7, #8]
 8008876:	4618      	mov	r0, r3
 8008878:	f000 fbe0 	bl	800903c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f042 0208 	orr.w	r2, r2, #8
 800888a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f022 0204 	bic.w	r2, r2, #4
 800889a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	691a      	ldr	r2, [r3, #16]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	430a      	orrs	r2, r1
 80088ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80088ae:	e023      	b.n	80088f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68b9      	ldr	r1, [r7, #8]
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 fc2a 	bl	8009110 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	021a      	lsls	r2, r3, #8
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	430a      	orrs	r2, r1
 80088ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80088f0:	e002      	b.n	80088f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	75fb      	strb	r3, [r7, #23]
      break;
 80088f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008900:	7dfb      	ldrb	r3, [r7, #23]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3718      	adds	r7, #24
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop

0800890c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008920:	2b01      	cmp	r3, #1
 8008922:	d101      	bne.n	8008928 <HAL_TIM_ConfigClockSource+0x1c>
 8008924:	2302      	movs	r3, #2
 8008926:	e0b6      	b.n	8008a96 <HAL_TIM_ConfigClockSource+0x18a>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2202      	movs	r2, #2
 8008934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008946:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800894a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008952:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008964:	d03e      	beq.n	80089e4 <HAL_TIM_ConfigClockSource+0xd8>
 8008966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800896a:	f200 8087 	bhi.w	8008a7c <HAL_TIM_ConfigClockSource+0x170>
 800896e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008972:	f000 8086 	beq.w	8008a82 <HAL_TIM_ConfigClockSource+0x176>
 8008976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800897a:	d87f      	bhi.n	8008a7c <HAL_TIM_ConfigClockSource+0x170>
 800897c:	2b70      	cmp	r3, #112	; 0x70
 800897e:	d01a      	beq.n	80089b6 <HAL_TIM_ConfigClockSource+0xaa>
 8008980:	2b70      	cmp	r3, #112	; 0x70
 8008982:	d87b      	bhi.n	8008a7c <HAL_TIM_ConfigClockSource+0x170>
 8008984:	2b60      	cmp	r3, #96	; 0x60
 8008986:	d050      	beq.n	8008a2a <HAL_TIM_ConfigClockSource+0x11e>
 8008988:	2b60      	cmp	r3, #96	; 0x60
 800898a:	d877      	bhi.n	8008a7c <HAL_TIM_ConfigClockSource+0x170>
 800898c:	2b50      	cmp	r3, #80	; 0x50
 800898e:	d03c      	beq.n	8008a0a <HAL_TIM_ConfigClockSource+0xfe>
 8008990:	2b50      	cmp	r3, #80	; 0x50
 8008992:	d873      	bhi.n	8008a7c <HAL_TIM_ConfigClockSource+0x170>
 8008994:	2b40      	cmp	r3, #64	; 0x40
 8008996:	d058      	beq.n	8008a4a <HAL_TIM_ConfigClockSource+0x13e>
 8008998:	2b40      	cmp	r3, #64	; 0x40
 800899a:	d86f      	bhi.n	8008a7c <HAL_TIM_ConfigClockSource+0x170>
 800899c:	2b30      	cmp	r3, #48	; 0x30
 800899e:	d064      	beq.n	8008a6a <HAL_TIM_ConfigClockSource+0x15e>
 80089a0:	2b30      	cmp	r3, #48	; 0x30
 80089a2:	d86b      	bhi.n	8008a7c <HAL_TIM_ConfigClockSource+0x170>
 80089a4:	2b20      	cmp	r3, #32
 80089a6:	d060      	beq.n	8008a6a <HAL_TIM_ConfigClockSource+0x15e>
 80089a8:	2b20      	cmp	r3, #32
 80089aa:	d867      	bhi.n	8008a7c <HAL_TIM_ConfigClockSource+0x170>
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d05c      	beq.n	8008a6a <HAL_TIM_ConfigClockSource+0x15e>
 80089b0:	2b10      	cmp	r3, #16
 80089b2:	d05a      	beq.n	8008a6a <HAL_TIM_ConfigClockSource+0x15e>
 80089b4:	e062      	b.n	8008a7c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6818      	ldr	r0, [r3, #0]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	6899      	ldr	r1, [r3, #8]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	685a      	ldr	r2, [r3, #4]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	f000 fc89 	bl	80092dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80089d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	609a      	str	r2, [r3, #8]
      break;
 80089e2:	e04f      	b.n	8008a84 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6818      	ldr	r0, [r3, #0]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	6899      	ldr	r1, [r3, #8]
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	685a      	ldr	r2, [r3, #4]
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	f000 fc72 	bl	80092dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	689a      	ldr	r2, [r3, #8]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a06:	609a      	str	r2, [r3, #8]
      break;
 8008a08:	e03c      	b.n	8008a84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6818      	ldr	r0, [r3, #0]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	6859      	ldr	r1, [r3, #4]
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	461a      	mov	r2, r3
 8008a18:	f000 fbe6 	bl	80091e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2150      	movs	r1, #80	; 0x50
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 fc3f 	bl	80092a6 <TIM_ITRx_SetConfig>
      break;
 8008a28:	e02c      	b.n	8008a84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6818      	ldr	r0, [r3, #0]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	6859      	ldr	r1, [r3, #4]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	461a      	mov	r2, r3
 8008a38:	f000 fc05 	bl	8009246 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2160      	movs	r1, #96	; 0x60
 8008a42:	4618      	mov	r0, r3
 8008a44:	f000 fc2f 	bl	80092a6 <TIM_ITRx_SetConfig>
      break;
 8008a48:	e01c      	b.n	8008a84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6818      	ldr	r0, [r3, #0]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	6859      	ldr	r1, [r3, #4]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	461a      	mov	r2, r3
 8008a58:	f000 fbc6 	bl	80091e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2140      	movs	r1, #64	; 0x40
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 fc1f 	bl	80092a6 <TIM_ITRx_SetConfig>
      break;
 8008a68:	e00c      	b.n	8008a84 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4619      	mov	r1, r3
 8008a74:	4610      	mov	r0, r2
 8008a76:	f000 fc16 	bl	80092a6 <TIM_ITRx_SetConfig>
      break;
 8008a7a:	e003      	b.n	8008a84 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a80:	e000      	b.n	8008a84 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008a82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
	...

08008aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a42      	ldr	r2, [pc, #264]	; (8008bbc <TIM_Base_SetConfig+0x11c>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d013      	beq.n	8008ae0 <TIM_Base_SetConfig+0x40>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008abe:	d00f      	beq.n	8008ae0 <TIM_Base_SetConfig+0x40>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a3f      	ldr	r2, [pc, #252]	; (8008bc0 <TIM_Base_SetConfig+0x120>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d00b      	beq.n	8008ae0 <TIM_Base_SetConfig+0x40>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a3e      	ldr	r2, [pc, #248]	; (8008bc4 <TIM_Base_SetConfig+0x124>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d007      	beq.n	8008ae0 <TIM_Base_SetConfig+0x40>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a3d      	ldr	r2, [pc, #244]	; (8008bc8 <TIM_Base_SetConfig+0x128>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d003      	beq.n	8008ae0 <TIM_Base_SetConfig+0x40>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a3c      	ldr	r2, [pc, #240]	; (8008bcc <TIM_Base_SetConfig+0x12c>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d108      	bne.n	8008af2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a31      	ldr	r2, [pc, #196]	; (8008bbc <TIM_Base_SetConfig+0x11c>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d01f      	beq.n	8008b3a <TIM_Base_SetConfig+0x9a>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b00:	d01b      	beq.n	8008b3a <TIM_Base_SetConfig+0x9a>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a2e      	ldr	r2, [pc, #184]	; (8008bc0 <TIM_Base_SetConfig+0x120>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d017      	beq.n	8008b3a <TIM_Base_SetConfig+0x9a>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a2d      	ldr	r2, [pc, #180]	; (8008bc4 <TIM_Base_SetConfig+0x124>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d013      	beq.n	8008b3a <TIM_Base_SetConfig+0x9a>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a2c      	ldr	r2, [pc, #176]	; (8008bc8 <TIM_Base_SetConfig+0x128>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d00f      	beq.n	8008b3a <TIM_Base_SetConfig+0x9a>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a2c      	ldr	r2, [pc, #176]	; (8008bd0 <TIM_Base_SetConfig+0x130>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d00b      	beq.n	8008b3a <TIM_Base_SetConfig+0x9a>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a2b      	ldr	r2, [pc, #172]	; (8008bd4 <TIM_Base_SetConfig+0x134>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d007      	beq.n	8008b3a <TIM_Base_SetConfig+0x9a>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a2a      	ldr	r2, [pc, #168]	; (8008bd8 <TIM_Base_SetConfig+0x138>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d003      	beq.n	8008b3a <TIM_Base_SetConfig+0x9a>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a25      	ldr	r2, [pc, #148]	; (8008bcc <TIM_Base_SetConfig+0x12c>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d108      	bne.n	8008b4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	695b      	ldr	r3, [r3, #20]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	689a      	ldr	r2, [r3, #8]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a12      	ldr	r2, [pc, #72]	; (8008bbc <TIM_Base_SetConfig+0x11c>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d013      	beq.n	8008ba0 <TIM_Base_SetConfig+0x100>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a13      	ldr	r2, [pc, #76]	; (8008bc8 <TIM_Base_SetConfig+0x128>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d00f      	beq.n	8008ba0 <TIM_Base_SetConfig+0x100>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a13      	ldr	r2, [pc, #76]	; (8008bd0 <TIM_Base_SetConfig+0x130>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d00b      	beq.n	8008ba0 <TIM_Base_SetConfig+0x100>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a12      	ldr	r2, [pc, #72]	; (8008bd4 <TIM_Base_SetConfig+0x134>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d007      	beq.n	8008ba0 <TIM_Base_SetConfig+0x100>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a11      	ldr	r2, [pc, #68]	; (8008bd8 <TIM_Base_SetConfig+0x138>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d003      	beq.n	8008ba0 <TIM_Base_SetConfig+0x100>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a0c      	ldr	r2, [pc, #48]	; (8008bcc <TIM_Base_SetConfig+0x12c>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d103      	bne.n	8008ba8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	691a      	ldr	r2, [r3, #16]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	615a      	str	r2, [r3, #20]
}
 8008bae:	bf00      	nop
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	40012c00 	.word	0x40012c00
 8008bc0:	40000400 	.word	0x40000400
 8008bc4:	40000800 	.word	0x40000800
 8008bc8:	40013400 	.word	0x40013400
 8008bcc:	40015000 	.word	0x40015000
 8008bd0:	40014000 	.word	0x40014000
 8008bd4:	40014400 	.word	0x40014400
 8008bd8:	40014800 	.word	0x40014800

08008bdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b087      	sub	sp, #28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a1b      	ldr	r3, [r3, #32]
 8008bea:	f023 0201 	bic.w	r2, r3, #1
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a1b      	ldr	r3, [r3, #32]
 8008bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f023 0303 	bic.w	r3, r3, #3
 8008c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f023 0302 	bic.w	r3, r3, #2
 8008c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	697a      	ldr	r2, [r7, #20]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a30      	ldr	r2, [pc, #192]	; (8008cf8 <TIM_OC1_SetConfig+0x11c>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d013      	beq.n	8008c64 <TIM_OC1_SetConfig+0x88>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a2f      	ldr	r2, [pc, #188]	; (8008cfc <TIM_OC1_SetConfig+0x120>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d00f      	beq.n	8008c64 <TIM_OC1_SetConfig+0x88>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a2e      	ldr	r2, [pc, #184]	; (8008d00 <TIM_OC1_SetConfig+0x124>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d00b      	beq.n	8008c64 <TIM_OC1_SetConfig+0x88>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a2d      	ldr	r2, [pc, #180]	; (8008d04 <TIM_OC1_SetConfig+0x128>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d007      	beq.n	8008c64 <TIM_OC1_SetConfig+0x88>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a2c      	ldr	r2, [pc, #176]	; (8008d08 <TIM_OC1_SetConfig+0x12c>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d003      	beq.n	8008c64 <TIM_OC1_SetConfig+0x88>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a2b      	ldr	r2, [pc, #172]	; (8008d0c <TIM_OC1_SetConfig+0x130>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d10c      	bne.n	8008c7e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	f023 0308 	bic.w	r3, r3, #8
 8008c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	697a      	ldr	r2, [r7, #20]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	f023 0304 	bic.w	r3, r3, #4
 8008c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a1d      	ldr	r2, [pc, #116]	; (8008cf8 <TIM_OC1_SetConfig+0x11c>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d013      	beq.n	8008cae <TIM_OC1_SetConfig+0xd2>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a1c      	ldr	r2, [pc, #112]	; (8008cfc <TIM_OC1_SetConfig+0x120>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d00f      	beq.n	8008cae <TIM_OC1_SetConfig+0xd2>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a1b      	ldr	r2, [pc, #108]	; (8008d00 <TIM_OC1_SetConfig+0x124>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d00b      	beq.n	8008cae <TIM_OC1_SetConfig+0xd2>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a1a      	ldr	r2, [pc, #104]	; (8008d04 <TIM_OC1_SetConfig+0x128>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d007      	beq.n	8008cae <TIM_OC1_SetConfig+0xd2>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a19      	ldr	r2, [pc, #100]	; (8008d08 <TIM_OC1_SetConfig+0x12c>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d003      	beq.n	8008cae <TIM_OC1_SetConfig+0xd2>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a18      	ldr	r2, [pc, #96]	; (8008d0c <TIM_OC1_SetConfig+0x130>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d111      	bne.n	8008cd2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	699b      	ldr	r3, [r3, #24]
 8008ccc:	693a      	ldr	r2, [r7, #16]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	693a      	ldr	r2, [r7, #16]
 8008cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	685a      	ldr	r2, [r3, #4]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	621a      	str	r2, [r3, #32]
}
 8008cec:	bf00      	nop
 8008cee:	371c      	adds	r7, #28
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	40012c00 	.word	0x40012c00
 8008cfc:	40013400 	.word	0x40013400
 8008d00:	40014000 	.word	0x40014000
 8008d04:	40014400 	.word	0x40014400
 8008d08:	40014800 	.word	0x40014800
 8008d0c:	40015000 	.word	0x40015000

08008d10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b087      	sub	sp, #28
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a1b      	ldr	r3, [r3, #32]
 8008d1e:	f023 0210 	bic.w	r2, r3, #16
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a1b      	ldr	r3, [r3, #32]
 8008d2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	021b      	lsls	r3, r3, #8
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	f023 0320 	bic.w	r3, r3, #32
 8008d5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	011b      	lsls	r3, r3, #4
 8008d66:	697a      	ldr	r2, [r7, #20]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a2c      	ldr	r2, [pc, #176]	; (8008e20 <TIM_OC2_SetConfig+0x110>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d007      	beq.n	8008d84 <TIM_OC2_SetConfig+0x74>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a2b      	ldr	r2, [pc, #172]	; (8008e24 <TIM_OC2_SetConfig+0x114>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d003      	beq.n	8008d84 <TIM_OC2_SetConfig+0x74>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a2a      	ldr	r2, [pc, #168]	; (8008e28 <TIM_OC2_SetConfig+0x118>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d10d      	bne.n	8008da0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	011b      	lsls	r3, r3, #4
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a1f      	ldr	r2, [pc, #124]	; (8008e20 <TIM_OC2_SetConfig+0x110>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d013      	beq.n	8008dd0 <TIM_OC2_SetConfig+0xc0>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a1e      	ldr	r2, [pc, #120]	; (8008e24 <TIM_OC2_SetConfig+0x114>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d00f      	beq.n	8008dd0 <TIM_OC2_SetConfig+0xc0>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a1e      	ldr	r2, [pc, #120]	; (8008e2c <TIM_OC2_SetConfig+0x11c>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d00b      	beq.n	8008dd0 <TIM_OC2_SetConfig+0xc0>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a1d      	ldr	r2, [pc, #116]	; (8008e30 <TIM_OC2_SetConfig+0x120>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d007      	beq.n	8008dd0 <TIM_OC2_SetConfig+0xc0>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a1c      	ldr	r2, [pc, #112]	; (8008e34 <TIM_OC2_SetConfig+0x124>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d003      	beq.n	8008dd0 <TIM_OC2_SetConfig+0xc0>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a17      	ldr	r2, [pc, #92]	; (8008e28 <TIM_OC2_SetConfig+0x118>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d113      	bne.n	8008df8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008dd6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008dde:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	695b      	ldr	r3, [r3, #20]
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	693a      	ldr	r2, [r7, #16]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	685a      	ldr	r2, [r3, #4]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	621a      	str	r2, [r3, #32]
}
 8008e12:	bf00      	nop
 8008e14:	371c      	adds	r7, #28
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	40012c00 	.word	0x40012c00
 8008e24:	40013400 	.word	0x40013400
 8008e28:	40015000 	.word	0x40015000
 8008e2c:	40014000 	.word	0x40014000
 8008e30:	40014400 	.word	0x40014400
 8008e34:	40014800 	.word	0x40014800

08008e38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b087      	sub	sp, #28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a1b      	ldr	r3, [r3, #32]
 8008e46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	69db      	ldr	r3, [r3, #28]
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f023 0303 	bic.w	r3, r3, #3
 8008e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	021b      	lsls	r3, r3, #8
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a2b      	ldr	r2, [pc, #172]	; (8008f44 <TIM_OC3_SetConfig+0x10c>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d007      	beq.n	8008eaa <TIM_OC3_SetConfig+0x72>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a2a      	ldr	r2, [pc, #168]	; (8008f48 <TIM_OC3_SetConfig+0x110>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d003      	beq.n	8008eaa <TIM_OC3_SetConfig+0x72>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a29      	ldr	r2, [pc, #164]	; (8008f4c <TIM_OC3_SetConfig+0x114>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d10d      	bne.n	8008ec6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008eb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	021b      	lsls	r3, r3, #8
 8008eb8:	697a      	ldr	r2, [r7, #20]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ec4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a1e      	ldr	r2, [pc, #120]	; (8008f44 <TIM_OC3_SetConfig+0x10c>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d013      	beq.n	8008ef6 <TIM_OC3_SetConfig+0xbe>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a1d      	ldr	r2, [pc, #116]	; (8008f48 <TIM_OC3_SetConfig+0x110>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d00f      	beq.n	8008ef6 <TIM_OC3_SetConfig+0xbe>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a1d      	ldr	r2, [pc, #116]	; (8008f50 <TIM_OC3_SetConfig+0x118>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d00b      	beq.n	8008ef6 <TIM_OC3_SetConfig+0xbe>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a1c      	ldr	r2, [pc, #112]	; (8008f54 <TIM_OC3_SetConfig+0x11c>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d007      	beq.n	8008ef6 <TIM_OC3_SetConfig+0xbe>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a1b      	ldr	r2, [pc, #108]	; (8008f58 <TIM_OC3_SetConfig+0x120>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d003      	beq.n	8008ef6 <TIM_OC3_SetConfig+0xbe>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a16      	ldr	r2, [pc, #88]	; (8008f4c <TIM_OC3_SetConfig+0x114>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d113      	bne.n	8008f1e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	011b      	lsls	r3, r3, #4
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	699b      	ldr	r3, [r3, #24]
 8008f16:	011b      	lsls	r3, r3, #4
 8008f18:	693a      	ldr	r2, [r7, #16]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	693a      	ldr	r2, [r7, #16]
 8008f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	685a      	ldr	r2, [r3, #4]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	697a      	ldr	r2, [r7, #20]
 8008f36:	621a      	str	r2, [r3, #32]
}
 8008f38:	bf00      	nop
 8008f3a:	371c      	adds	r7, #28
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr
 8008f44:	40012c00 	.word	0x40012c00
 8008f48:	40013400 	.word	0x40013400
 8008f4c:	40015000 	.word	0x40015000
 8008f50:	40014000 	.word	0x40014000
 8008f54:	40014400 	.word	0x40014400
 8008f58:	40014800 	.word	0x40014800

08008f5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b087      	sub	sp, #28
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a1b      	ldr	r3, [r3, #32]
 8008f76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	021b      	lsls	r3, r3, #8
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	031b      	lsls	r3, r3, #12
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a1a      	ldr	r2, [pc, #104]	; (8009024 <TIM_OC4_SetConfig+0xc8>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d013      	beq.n	8008fe8 <TIM_OC4_SetConfig+0x8c>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a19      	ldr	r2, [pc, #100]	; (8009028 <TIM_OC4_SetConfig+0xcc>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d00f      	beq.n	8008fe8 <TIM_OC4_SetConfig+0x8c>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a18      	ldr	r2, [pc, #96]	; (800902c <TIM_OC4_SetConfig+0xd0>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d00b      	beq.n	8008fe8 <TIM_OC4_SetConfig+0x8c>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a17      	ldr	r2, [pc, #92]	; (8009030 <TIM_OC4_SetConfig+0xd4>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d007      	beq.n	8008fe8 <TIM_OC4_SetConfig+0x8c>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a16      	ldr	r2, [pc, #88]	; (8009034 <TIM_OC4_SetConfig+0xd8>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d003      	beq.n	8008fe8 <TIM_OC4_SetConfig+0x8c>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a15      	ldr	r2, [pc, #84]	; (8009038 <TIM_OC4_SetConfig+0xdc>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d109      	bne.n	8008ffc <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	695b      	ldr	r3, [r3, #20]
 8008ff4:	019b      	lsls	r3, r3, #6
 8008ff6:	697a      	ldr	r2, [r7, #20]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	621a      	str	r2, [r3, #32]
}
 8009016:	bf00      	nop
 8009018:	371c      	adds	r7, #28
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	40012c00 	.word	0x40012c00
 8009028:	40013400 	.word	0x40013400
 800902c:	40014000 	.word	0x40014000
 8009030:	40014400 	.word	0x40014400
 8009034:	40014800 	.word	0x40014800
 8009038:	40015000 	.word	0x40015000

0800903c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800903c:	b480      	push	{r7}
 800903e:	b087      	sub	sp, #28
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a1b      	ldr	r3, [r3, #32]
 8009056:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800906a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800906e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	4313      	orrs	r3, r2
 8009078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009080:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	041b      	lsls	r3, r3, #16
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	4313      	orrs	r3, r2
 800908c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a19      	ldr	r2, [pc, #100]	; (80090f8 <TIM_OC5_SetConfig+0xbc>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d013      	beq.n	80090be <TIM_OC5_SetConfig+0x82>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a18      	ldr	r2, [pc, #96]	; (80090fc <TIM_OC5_SetConfig+0xc0>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d00f      	beq.n	80090be <TIM_OC5_SetConfig+0x82>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a17      	ldr	r2, [pc, #92]	; (8009100 <TIM_OC5_SetConfig+0xc4>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d00b      	beq.n	80090be <TIM_OC5_SetConfig+0x82>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a16      	ldr	r2, [pc, #88]	; (8009104 <TIM_OC5_SetConfig+0xc8>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d007      	beq.n	80090be <TIM_OC5_SetConfig+0x82>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a15      	ldr	r2, [pc, #84]	; (8009108 <TIM_OC5_SetConfig+0xcc>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d003      	beq.n	80090be <TIM_OC5_SetConfig+0x82>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a14      	ldr	r2, [pc, #80]	; (800910c <TIM_OC5_SetConfig+0xd0>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d109      	bne.n	80090d2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	695b      	ldr	r3, [r3, #20]
 80090ca:	021b      	lsls	r3, r3, #8
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	697a      	ldr	r2, [r7, #20]
 80090d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	685a      	ldr	r2, [r3, #4]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	693a      	ldr	r2, [r7, #16]
 80090ea:	621a      	str	r2, [r3, #32]
}
 80090ec:	bf00      	nop
 80090ee:	371c      	adds	r7, #28
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr
 80090f8:	40012c00 	.word	0x40012c00
 80090fc:	40013400 	.word	0x40013400
 8009100:	40014000 	.word	0x40014000
 8009104:	40014400 	.word	0x40014400
 8009108:	40014800 	.word	0x40014800
 800910c:	40015000 	.word	0x40015000

08009110 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009110:	b480      	push	{r7}
 8009112:	b087      	sub	sp, #28
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a1b      	ldr	r3, [r3, #32]
 800912a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800913e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	021b      	lsls	r3, r3, #8
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	4313      	orrs	r3, r2
 800914e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	051b      	lsls	r3, r3, #20
 800915e:	693a      	ldr	r2, [r7, #16]
 8009160:	4313      	orrs	r3, r2
 8009162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a1a      	ldr	r2, [pc, #104]	; (80091d0 <TIM_OC6_SetConfig+0xc0>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d013      	beq.n	8009194 <TIM_OC6_SetConfig+0x84>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a19      	ldr	r2, [pc, #100]	; (80091d4 <TIM_OC6_SetConfig+0xc4>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d00f      	beq.n	8009194 <TIM_OC6_SetConfig+0x84>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a18      	ldr	r2, [pc, #96]	; (80091d8 <TIM_OC6_SetConfig+0xc8>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d00b      	beq.n	8009194 <TIM_OC6_SetConfig+0x84>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a17      	ldr	r2, [pc, #92]	; (80091dc <TIM_OC6_SetConfig+0xcc>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d007      	beq.n	8009194 <TIM_OC6_SetConfig+0x84>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a16      	ldr	r2, [pc, #88]	; (80091e0 <TIM_OC6_SetConfig+0xd0>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d003      	beq.n	8009194 <TIM_OC6_SetConfig+0x84>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4a15      	ldr	r2, [pc, #84]	; (80091e4 <TIM_OC6_SetConfig+0xd4>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d109      	bne.n	80091a8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800919a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	695b      	ldr	r3, [r3, #20]
 80091a0:	029b      	lsls	r3, r3, #10
 80091a2:	697a      	ldr	r2, [r7, #20]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	697a      	ldr	r2, [r7, #20]
 80091ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	685a      	ldr	r2, [r3, #4]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	693a      	ldr	r2, [r7, #16]
 80091c0:	621a      	str	r2, [r3, #32]
}
 80091c2:	bf00      	nop
 80091c4:	371c      	adds	r7, #28
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	40012c00 	.word	0x40012c00
 80091d4:	40013400 	.word	0x40013400
 80091d8:	40014000 	.word	0x40014000
 80091dc:	40014400 	.word	0x40014400
 80091e0:	40014800 	.word	0x40014800
 80091e4:	40015000 	.word	0x40015000

080091e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b087      	sub	sp, #28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6a1b      	ldr	r3, [r3, #32]
 80091f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	f023 0201 	bic.w	r2, r3, #1
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	699b      	ldr	r3, [r3, #24]
 800920a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009212:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	011b      	lsls	r3, r3, #4
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	4313      	orrs	r3, r2
 800921c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	f023 030a 	bic.w	r3, r3, #10
 8009224:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009226:	697a      	ldr	r2, [r7, #20]
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	4313      	orrs	r3, r2
 800922c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	697a      	ldr	r2, [r7, #20]
 8009238:	621a      	str	r2, [r3, #32]
}
 800923a:	bf00      	nop
 800923c:	371c      	adds	r7, #28
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr

08009246 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009246:	b480      	push	{r7}
 8009248:	b087      	sub	sp, #28
 800924a:	af00      	add	r7, sp, #0
 800924c:	60f8      	str	r0, [r7, #12]
 800924e:	60b9      	str	r1, [r7, #8]
 8009250:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6a1b      	ldr	r3, [r3, #32]
 8009256:	f023 0210 	bic.w	r2, r3, #16
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6a1b      	ldr	r3, [r3, #32]
 8009268:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009270:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	031b      	lsls	r3, r3, #12
 8009276:	697a      	ldr	r2, [r7, #20]
 8009278:	4313      	orrs	r3, r2
 800927a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009282:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	011b      	lsls	r3, r3, #4
 8009288:	693a      	ldr	r2, [r7, #16]
 800928a:	4313      	orrs	r3, r2
 800928c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	693a      	ldr	r2, [r7, #16]
 8009298:	621a      	str	r2, [r3, #32]
}
 800929a:	bf00      	nop
 800929c:	371c      	adds	r7, #28
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr

080092a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092a6:	b480      	push	{r7}
 80092a8:	b085      	sub	sp, #20
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
 80092ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	f043 0307 	orr.w	r3, r3, #7
 80092c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	609a      	str	r2, [r3, #8]
}
 80092d0:	bf00      	nop
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092dc:	b480      	push	{r7}
 80092de:	b087      	sub	sp, #28
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	607a      	str	r2, [r7, #4]
 80092e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	021a      	lsls	r2, r3, #8
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	431a      	orrs	r2, r3
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	4313      	orrs	r3, r2
 8009304:	697a      	ldr	r2, [r7, #20]
 8009306:	4313      	orrs	r3, r2
 8009308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	697a      	ldr	r2, [r7, #20]
 800930e:	609a      	str	r2, [r3, #8]
}
 8009310:	bf00      	nop
 8009312:	371c      	adds	r7, #28
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800931c:	b480      	push	{r7}
 800931e:	b087      	sub	sp, #28
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	f003 031f 	and.w	r3, r3, #31
 800932e:	2201      	movs	r2, #1
 8009330:	fa02 f303 	lsl.w	r3, r2, r3
 8009334:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6a1a      	ldr	r2, [r3, #32]
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	43db      	mvns	r3, r3
 800933e:	401a      	ands	r2, r3
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6a1a      	ldr	r2, [r3, #32]
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	f003 031f 	and.w	r3, r3, #31
 800934e:	6879      	ldr	r1, [r7, #4]
 8009350:	fa01 f303 	lsl.w	r3, r1, r3
 8009354:	431a      	orrs	r2, r3
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	621a      	str	r2, [r3, #32]
}
 800935a:	bf00      	nop
 800935c:	371c      	adds	r7, #28
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
	...

08009368 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009378:	2b01      	cmp	r3, #1
 800937a:	d101      	bne.n	8009380 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800937c:	2302      	movs	r3, #2
 800937e:	e06d      	b.n	800945c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2202      	movs	r2, #2
 800938c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a30      	ldr	r2, [pc, #192]	; (8009468 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d009      	beq.n	80093be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a2f      	ldr	r2, [pc, #188]	; (800946c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d004      	beq.n	80093be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a2d      	ldr	r2, [pc, #180]	; (8009470 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d108      	bne.n	80093d0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80093c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	4313      	orrs	r3, r2
 80093e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a1e      	ldr	r2, [pc, #120]	; (8009468 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d01d      	beq.n	8009430 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093fc:	d018      	beq.n	8009430 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a1c      	ldr	r2, [pc, #112]	; (8009474 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d013      	beq.n	8009430 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a1a      	ldr	r2, [pc, #104]	; (8009478 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d00e      	beq.n	8009430 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a15      	ldr	r2, [pc, #84]	; (800946c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d009      	beq.n	8009430 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a16      	ldr	r2, [pc, #88]	; (800947c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d004      	beq.n	8009430 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a11      	ldr	r2, [pc, #68]	; (8009470 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d10c      	bne.n	800944a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009436:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	4313      	orrs	r3, r2
 8009440:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68ba      	ldr	r2, [r7, #8]
 8009448:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2201      	movs	r2, #1
 800944e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3714      	adds	r7, #20
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr
 8009468:	40012c00 	.word	0x40012c00
 800946c:	40013400 	.word	0x40013400
 8009470:	40015000 	.word	0x40015000
 8009474:	40000400 	.word	0x40000400
 8009478:	40000800 	.word	0x40000800
 800947c:	40014000 	.word	0x40014000

08009480 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800948a:	2300      	movs	r3, #0
 800948c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009494:	2b01      	cmp	r3, #1
 8009496:	d101      	bne.n	800949c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009498:	2302      	movs	r3, #2
 800949a:	e06a      	b.n	8009572 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2201      	movs	r2, #1
 80094a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	4313      	orrs	r3, r2
 80094be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4313      	orrs	r3, r2
 80094da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	695b      	ldr	r3, [r3, #20]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009502:	4313      	orrs	r3, r2
 8009504:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	041b      	lsls	r3, r3, #16
 8009512:	4313      	orrs	r3, r2
 8009514:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a19      	ldr	r2, [pc, #100]	; (8009580 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d009      	beq.n	8009534 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a17      	ldr	r2, [pc, #92]	; (8009584 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d004      	beq.n	8009534 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a16      	ldr	r2, [pc, #88]	; (8009588 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d115      	bne.n	8009560 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953e:	051b      	lsls	r3, r3, #20
 8009540:	4313      	orrs	r3, r2
 8009542:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	4313      	orrs	r3, r2
 8009550:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	6a1b      	ldr	r3, [r3, #32]
 800955c:	4313      	orrs	r3, r2
 800955e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	40012c00 	.word	0x40012c00
 8009584:	40013400 	.word	0x40013400
 8009588:	40015000 	.word	0x40015000

0800958c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d101      	bne.n	800959e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	e040      	b.n	8009620 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d106      	bne.n	80095b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f7fa fcb4 	bl	8003f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2224      	movs	r2, #36	; 0x24
 80095b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f022 0201 	bic.w	r2, r2, #1
 80095c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 fc00 	bl	8009dd0 <UART_SetConfig>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d101      	bne.n	80095da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	e022      	b.n	8009620 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d002      	beq.n	80095e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 fdc8 	bl	800a178 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	689a      	ldr	r2, [r3, #8]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009606:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f042 0201 	orr.w	r2, r2, #1
 8009616:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 fe4f 	bl	800a2bc <UART_CheckIdleState>
 800961e:	4603      	mov	r3, r0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b08a      	sub	sp, #40	; 0x28
 800962c:	af02      	add	r7, sp, #8
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	603b      	str	r3, [r7, #0]
 8009634:	4613      	mov	r3, r2
 8009636:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800963c:	2b20      	cmp	r3, #32
 800963e:	d178      	bne.n	8009732 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d002      	beq.n	800964c <HAL_UART_Transmit+0x24>
 8009646:	88fb      	ldrh	r3, [r7, #6]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d101      	bne.n	8009650 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	e071      	b.n	8009734 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2200      	movs	r2, #0
 8009654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2221      	movs	r2, #33	; 0x21
 800965c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800965e:	f7fa fd91 	bl	8004184 <HAL_GetTick>
 8009662:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	88fa      	ldrh	r2, [r7, #6]
 8009668:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	88fa      	ldrh	r2, [r7, #6]
 8009670:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800967c:	d108      	bne.n	8009690 <HAL_UART_Transmit+0x68>
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d104      	bne.n	8009690 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009686:	2300      	movs	r3, #0
 8009688:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	61bb      	str	r3, [r7, #24]
 800968e:	e003      	b.n	8009698 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009694:	2300      	movs	r3, #0
 8009696:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009698:	e030      	b.n	80096fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	9300      	str	r3, [sp, #0]
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	2200      	movs	r2, #0
 80096a2:	2180      	movs	r1, #128	; 0x80
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f000 feb1 	bl	800a40c <UART_WaitOnFlagUntilTimeout>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d004      	beq.n	80096ba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2220      	movs	r2, #32
 80096b4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80096b6:	2303      	movs	r3, #3
 80096b8:	e03c      	b.n	8009734 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10b      	bne.n	80096d8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	881a      	ldrh	r2, [r3, #0]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096cc:	b292      	uxth	r2, r2
 80096ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	3302      	adds	r3, #2
 80096d4:	61bb      	str	r3, [r7, #24]
 80096d6:	e008      	b.n	80096ea <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	781a      	ldrb	r2, [r3, #0]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	b292      	uxth	r2, r2
 80096e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	3301      	adds	r3, #1
 80096e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	3b01      	subs	r3, #1
 80096f4:	b29a      	uxth	r2, r3
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009702:	b29b      	uxth	r3, r3
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1c8      	bne.n	800969a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	2200      	movs	r2, #0
 8009710:	2140      	movs	r1, #64	; 0x40
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f000 fe7a 	bl	800a40c <UART_WaitOnFlagUntilTimeout>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d004      	beq.n	8009728 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2220      	movs	r2, #32
 8009722:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8009724:	2303      	movs	r3, #3
 8009726:	e005      	b.n	8009734 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2220      	movs	r2, #32
 800972c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	e000      	b.n	8009734 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8009732:	2302      	movs	r3, #2
  }
}
 8009734:	4618      	mov	r0, r3
 8009736:	3720      	adds	r7, #32
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b08a      	sub	sp, #40	; 0x28
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	4613      	mov	r3, r2
 8009748:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009750:	2b20      	cmp	r3, #32
 8009752:	d132      	bne.n	80097ba <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d002      	beq.n	8009760 <HAL_UART_Receive_IT+0x24>
 800975a:	88fb      	ldrh	r3, [r7, #6]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d101      	bne.n	8009764 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	e02b      	b.n	80097bc <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009774:	2b00      	cmp	r3, #0
 8009776:	d018      	beq.n	80097aa <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	e853 3f00 	ldrex	r3, [r3]
 8009784:	613b      	str	r3, [r7, #16]
   return(result);
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800978c:	627b      	str	r3, [r7, #36]	; 0x24
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	461a      	mov	r2, r3
 8009794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009796:	623b      	str	r3, [r7, #32]
 8009798:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979a:	69f9      	ldr	r1, [r7, #28]
 800979c:	6a3a      	ldr	r2, [r7, #32]
 800979e:	e841 2300 	strex	r3, r2, [r1]
 80097a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1e6      	bne.n	8009778 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80097aa:	88fb      	ldrh	r3, [r7, #6]
 80097ac:	461a      	mov	r2, r3
 80097ae:	68b9      	ldr	r1, [r7, #8]
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 fe93 	bl	800a4dc <UART_Start_Receive_IT>
 80097b6:	4603      	mov	r3, r0
 80097b8:	e000      	b.n	80097bc <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80097ba:	2302      	movs	r3, #2
  }
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3728      	adds	r7, #40	; 0x28
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b0ba      	sub	sp, #232	; 0xe8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	69db      	ldr	r3, [r3, #28]
 80097d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80097ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80097ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80097f2:	4013      	ands	r3, r2
 80097f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80097f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d115      	bne.n	800982c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009804:	f003 0320 	and.w	r3, r3, #32
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00f      	beq.n	800982c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800980c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009810:	f003 0320 	and.w	r3, r3, #32
 8009814:	2b00      	cmp	r3, #0
 8009816:	d009      	beq.n	800982c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800981c:	2b00      	cmp	r3, #0
 800981e:	f000 82ab 	beq.w	8009d78 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	4798      	blx	r3
      }
      return;
 800982a:	e2a5      	b.n	8009d78 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800982c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009830:	2b00      	cmp	r3, #0
 8009832:	f000 8117 	beq.w	8009a64 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800983a:	f003 0301 	and.w	r3, r3, #1
 800983e:	2b00      	cmp	r3, #0
 8009840:	d106      	bne.n	8009850 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009842:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009846:	4b85      	ldr	r3, [pc, #532]	; (8009a5c <HAL_UART_IRQHandler+0x298>)
 8009848:	4013      	ands	r3, r2
 800984a:	2b00      	cmp	r3, #0
 800984c:	f000 810a 	beq.w	8009a64 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009854:	f003 0301 	and.w	r3, r3, #1
 8009858:	2b00      	cmp	r3, #0
 800985a:	d011      	beq.n	8009880 <HAL_UART_IRQHandler+0xbc>
 800985c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009864:	2b00      	cmp	r3, #0
 8009866:	d00b      	beq.n	8009880 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2201      	movs	r2, #1
 800986e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009876:	f043 0201 	orr.w	r2, r3, #1
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009884:	f003 0302 	and.w	r3, r3, #2
 8009888:	2b00      	cmp	r3, #0
 800988a:	d011      	beq.n	80098b0 <HAL_UART_IRQHandler+0xec>
 800988c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009890:	f003 0301 	and.w	r3, r3, #1
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00b      	beq.n	80098b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2202      	movs	r2, #2
 800989e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098a6:	f043 0204 	orr.w	r2, r3, #4
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098b4:	f003 0304 	and.w	r3, r3, #4
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d011      	beq.n	80098e0 <HAL_UART_IRQHandler+0x11c>
 80098bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098c0:	f003 0301 	and.w	r3, r3, #1
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00b      	beq.n	80098e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2204      	movs	r2, #4
 80098ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098d6:	f043 0202 	orr.w	r2, r3, #2
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80098e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098e4:	f003 0308 	and.w	r3, r3, #8
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d017      	beq.n	800991c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80098ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098f0:	f003 0320 	and.w	r3, r3, #32
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d105      	bne.n	8009904 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80098f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00b      	beq.n	800991c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2208      	movs	r2, #8
 800990a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009912:	f043 0208 	orr.w	r2, r3, #8
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800991c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009924:	2b00      	cmp	r3, #0
 8009926:	d012      	beq.n	800994e <HAL_UART_IRQHandler+0x18a>
 8009928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800992c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00c      	beq.n	800994e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800993c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009944:	f043 0220 	orr.w	r2, r3, #32
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009954:	2b00      	cmp	r3, #0
 8009956:	f000 8211 	beq.w	8009d7c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800995a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800995e:	f003 0320 	and.w	r3, r3, #32
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00d      	beq.n	8009982 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800996a:	f003 0320 	and.w	r3, r3, #32
 800996e:	2b00      	cmp	r3, #0
 8009970:	d007      	beq.n	8009982 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009976:	2b00      	cmp	r3, #0
 8009978:	d003      	beq.n	8009982 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009988:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009996:	2b40      	cmp	r3, #64	; 0x40
 8009998:	d005      	beq.n	80099a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800999a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800999e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d04f      	beq.n	8009a46 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fe5e 	bl	800a668 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b6:	2b40      	cmp	r3, #64	; 0x40
 80099b8:	d141      	bne.n	8009a3e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	3308      	adds	r3, #8
 80099c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099c8:	e853 3f00 	ldrex	r3, [r3]
 80099cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80099d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	3308      	adds	r3, #8
 80099e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80099e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80099ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80099f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80099f6:	e841 2300 	strex	r3, r2, [r1]
 80099fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80099fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1d9      	bne.n	80099ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d013      	beq.n	8009a36 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a12:	4a13      	ldr	r2, [pc, #76]	; (8009a60 <HAL_UART_IRQHandler+0x29c>)
 8009a14:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fb ff45 	bl	80058aa <HAL_DMA_Abort_IT>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d017      	beq.n	8009a56 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009a30:	4610      	mov	r0, r2
 8009a32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a34:	e00f      	b.n	8009a56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 f9b4 	bl	8009da4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a3c:	e00b      	b.n	8009a56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f9b0 	bl	8009da4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a44:	e007      	b.n	8009a56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 f9ac 	bl	8009da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009a54:	e192      	b.n	8009d7c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a56:	bf00      	nop
    return;
 8009a58:	e190      	b.n	8009d7c <HAL_UART_IRQHandler+0x5b8>
 8009a5a:	bf00      	nop
 8009a5c:	04000120 	.word	0x04000120
 8009a60:	0800a731 	.word	0x0800a731

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	f040 814b 	bne.w	8009d04 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a72:	f003 0310 	and.w	r3, r3, #16
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f000 8144 	beq.w	8009d04 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a80:	f003 0310 	and.w	r3, r3, #16
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f000 813d 	beq.w	8009d04 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2210      	movs	r2, #16
 8009a90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a9c:	2b40      	cmp	r3, #64	; 0x40
 8009a9e:	f040 80b5 	bne.w	8009c0c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009aae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	f000 8164 	beq.w	8009d80 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009abe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	f080 815c 	bcs.w	8009d80 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ace:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ad6:	699b      	ldr	r3, [r3, #24]
 8009ad8:	2b20      	cmp	r3, #32
 8009ada:	f000 8086 	beq.w	8009bea <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009aea:	e853 3f00 	ldrex	r3, [r3]
 8009aee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009af2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009af6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009afa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	461a      	mov	r2, r3
 8009b04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009b08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009b0c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b10:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009b14:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009b18:	e841 2300 	strex	r3, r2, [r1]
 8009b1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d1da      	bne.n	8009ade <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	3308      	adds	r3, #8
 8009b2e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b32:	e853 3f00 	ldrex	r3, [r3]
 8009b36:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009b38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b3a:	f023 0301 	bic.w	r3, r3, #1
 8009b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	3308      	adds	r3, #8
 8009b48:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009b4c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009b50:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b52:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009b54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009b58:	e841 2300 	strex	r3, r2, [r1]
 8009b5c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009b5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1e1      	bne.n	8009b28 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	3308      	adds	r3, #8
 8009b6a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b6e:	e853 3f00 	ldrex	r3, [r3]
 8009b72:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	3308      	adds	r3, #8
 8009b84:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009b88:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009b8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009b8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009b90:	e841 2300 	strex	r3, r2, [r1]
 8009b94:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009b96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d1e3      	bne.n	8009b64 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2220      	movs	r2, #32
 8009ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bb2:	e853 3f00 	ldrex	r3, [r3]
 8009bb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bba:	f023 0310 	bic.w	r3, r3, #16
 8009bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8009bce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009bd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009bd4:	e841 2300 	strex	r3, r2, [r1]
 8009bd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1e4      	bne.n	8009baa <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7fb fe27 	bl	8005838 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2202      	movs	r2, #2
 8009bee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	1ad3      	subs	r3, r2, r3
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	4619      	mov	r1, r3
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 f8d7 	bl	8009db8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009c0a:	e0b9      	b.n	8009d80 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f000 80ab 	beq.w	8009d84 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8009c2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	f000 80a6 	beq.w	8009d84 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c40:	e853 3f00 	ldrex	r3, [r3]
 8009c44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	461a      	mov	r2, r3
 8009c56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8009c5c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c62:	e841 2300 	strex	r3, r2, [r1]
 8009c66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1e4      	bne.n	8009c38 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	3308      	adds	r3, #8
 8009c74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c78:	e853 3f00 	ldrex	r3, [r3]
 8009c7c:	623b      	str	r3, [r7, #32]
   return(result);
 8009c7e:	6a3b      	ldr	r3, [r7, #32]
 8009c80:	f023 0301 	bic.w	r3, r3, #1
 8009c84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	3308      	adds	r3, #8
 8009c8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009c92:	633a      	str	r2, [r7, #48]	; 0x30
 8009c94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c9a:	e841 2300 	strex	r3, r2, [r1]
 8009c9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d1e3      	bne.n	8009c6e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2220      	movs	r2, #32
 8009caa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	e853 3f00 	ldrex	r3, [r3]
 8009cc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f023 0310 	bic.w	r3, r3, #16
 8009cce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009cdc:	61fb      	str	r3, [r7, #28]
 8009cde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce0:	69b9      	ldr	r1, [r7, #24]
 8009ce2:	69fa      	ldr	r2, [r7, #28]
 8009ce4:	e841 2300 	strex	r3, r2, [r1]
 8009ce8:	617b      	str	r3, [r7, #20]
   return(result);
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d1e4      	bne.n	8009cba <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009cf6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f85b 	bl	8009db8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d02:	e03f      	b.n	8009d84 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00e      	beq.n	8009d2e <HAL_UART_IRQHandler+0x56a>
 8009d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d008      	beq.n	8009d2e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009d24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 feea 	bl	800ab00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d2c:	e02d      	b.n	8009d8a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00e      	beq.n	8009d58 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d008      	beq.n	8009d58 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d01c      	beq.n	8009d88 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	4798      	blx	r3
    }
    return;
 8009d56:	e017      	b.n	8009d88 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d012      	beq.n	8009d8a <HAL_UART_IRQHandler+0x5c6>
 8009d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00c      	beq.n	8009d8a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 fcf3 	bl	800a75c <UART_EndTransmit_IT>
    return;
 8009d76:	e008      	b.n	8009d8a <HAL_UART_IRQHandler+0x5c6>
      return;
 8009d78:	bf00      	nop
 8009d7a:	e006      	b.n	8009d8a <HAL_UART_IRQHandler+0x5c6>
    return;
 8009d7c:	bf00      	nop
 8009d7e:	e004      	b.n	8009d8a <HAL_UART_IRQHandler+0x5c6>
      return;
 8009d80:	bf00      	nop
 8009d82:	e002      	b.n	8009d8a <HAL_UART_IRQHandler+0x5c6>
      return;
 8009d84:	bf00      	nop
 8009d86:	e000      	b.n	8009d8a <HAL_UART_IRQHandler+0x5c6>
    return;
 8009d88:	bf00      	nop
  }

}
 8009d8a:	37e8      	adds	r7, #232	; 0xe8
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009dac:	bf00      	nop
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009dc4:	bf00      	nop
 8009dc6:	370c      	adds	r7, #12
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b088      	sub	sp, #32
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	689a      	ldr	r2, [r3, #8]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	431a      	orrs	r2, r3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	431a      	orrs	r2, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	69db      	ldr	r3, [r3, #28]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	4b92      	ldr	r3, [pc, #584]	; (800a044 <UART_SetConfig+0x274>)
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	6812      	ldr	r2, [r2, #0]
 8009e02:	6979      	ldr	r1, [r7, #20]
 8009e04:	430b      	orrs	r3, r1
 8009e06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	68da      	ldr	r2, [r3, #12]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	430a      	orrs	r2, r1
 8009e1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	699b      	ldr	r3, [r3, #24]
 8009e22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a1b      	ldr	r3, [r3, #32]
 8009e28:	697a      	ldr	r2, [r7, #20]
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	697a      	ldr	r2, [r7, #20]
 8009e3e:	430a      	orrs	r2, r1
 8009e40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a80      	ldr	r2, [pc, #512]	; (800a048 <UART_SetConfig+0x278>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d120      	bne.n	8009e8e <UART_SetConfig+0xbe>
 8009e4c:	4b7f      	ldr	r3, [pc, #508]	; (800a04c <UART_SetConfig+0x27c>)
 8009e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e50:	f003 0303 	and.w	r3, r3, #3
 8009e54:	2b03      	cmp	r3, #3
 8009e56:	d817      	bhi.n	8009e88 <UART_SetConfig+0xb8>
 8009e58:	a201      	add	r2, pc, #4	; (adr r2, 8009e60 <UART_SetConfig+0x90>)
 8009e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5e:	bf00      	nop
 8009e60:	08009e71 	.word	0x08009e71
 8009e64:	08009e7d 	.word	0x08009e7d
 8009e68:	08009e83 	.word	0x08009e83
 8009e6c:	08009e77 	.word	0x08009e77
 8009e70:	2301      	movs	r3, #1
 8009e72:	77fb      	strb	r3, [r7, #31]
 8009e74:	e0b5      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009e76:	2302      	movs	r3, #2
 8009e78:	77fb      	strb	r3, [r7, #31]
 8009e7a:	e0b2      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009e7c:	2304      	movs	r3, #4
 8009e7e:	77fb      	strb	r3, [r7, #31]
 8009e80:	e0af      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009e82:	2308      	movs	r3, #8
 8009e84:	77fb      	strb	r3, [r7, #31]
 8009e86:	e0ac      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009e88:	2310      	movs	r3, #16
 8009e8a:	77fb      	strb	r3, [r7, #31]
 8009e8c:	e0a9      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a6f      	ldr	r2, [pc, #444]	; (800a050 <UART_SetConfig+0x280>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d124      	bne.n	8009ee2 <UART_SetConfig+0x112>
 8009e98:	4b6c      	ldr	r3, [pc, #432]	; (800a04c <UART_SetConfig+0x27c>)
 8009e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009ea0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ea4:	d011      	beq.n	8009eca <UART_SetConfig+0xfa>
 8009ea6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009eaa:	d817      	bhi.n	8009edc <UART_SetConfig+0x10c>
 8009eac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009eb0:	d011      	beq.n	8009ed6 <UART_SetConfig+0x106>
 8009eb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009eb6:	d811      	bhi.n	8009edc <UART_SetConfig+0x10c>
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d003      	beq.n	8009ec4 <UART_SetConfig+0xf4>
 8009ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ec0:	d006      	beq.n	8009ed0 <UART_SetConfig+0x100>
 8009ec2:	e00b      	b.n	8009edc <UART_SetConfig+0x10c>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	77fb      	strb	r3, [r7, #31]
 8009ec8:	e08b      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009eca:	2302      	movs	r3, #2
 8009ecc:	77fb      	strb	r3, [r7, #31]
 8009ece:	e088      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009ed0:	2304      	movs	r3, #4
 8009ed2:	77fb      	strb	r3, [r7, #31]
 8009ed4:	e085      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009ed6:	2308      	movs	r3, #8
 8009ed8:	77fb      	strb	r3, [r7, #31]
 8009eda:	e082      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009edc:	2310      	movs	r3, #16
 8009ede:	77fb      	strb	r3, [r7, #31]
 8009ee0:	e07f      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a5b      	ldr	r2, [pc, #364]	; (800a054 <UART_SetConfig+0x284>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d124      	bne.n	8009f36 <UART_SetConfig+0x166>
 8009eec:	4b57      	ldr	r3, [pc, #348]	; (800a04c <UART_SetConfig+0x27c>)
 8009eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009ef4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009ef8:	d011      	beq.n	8009f1e <UART_SetConfig+0x14e>
 8009efa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009efe:	d817      	bhi.n	8009f30 <UART_SetConfig+0x160>
 8009f00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009f04:	d011      	beq.n	8009f2a <UART_SetConfig+0x15a>
 8009f06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009f0a:	d811      	bhi.n	8009f30 <UART_SetConfig+0x160>
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d003      	beq.n	8009f18 <UART_SetConfig+0x148>
 8009f10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009f14:	d006      	beq.n	8009f24 <UART_SetConfig+0x154>
 8009f16:	e00b      	b.n	8009f30 <UART_SetConfig+0x160>
 8009f18:	2300      	movs	r3, #0
 8009f1a:	77fb      	strb	r3, [r7, #31]
 8009f1c:	e061      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009f1e:	2302      	movs	r3, #2
 8009f20:	77fb      	strb	r3, [r7, #31]
 8009f22:	e05e      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009f24:	2304      	movs	r3, #4
 8009f26:	77fb      	strb	r3, [r7, #31]
 8009f28:	e05b      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009f2a:	2308      	movs	r3, #8
 8009f2c:	77fb      	strb	r3, [r7, #31]
 8009f2e:	e058      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009f30:	2310      	movs	r3, #16
 8009f32:	77fb      	strb	r3, [r7, #31]
 8009f34:	e055      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a47      	ldr	r2, [pc, #284]	; (800a058 <UART_SetConfig+0x288>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d124      	bne.n	8009f8a <UART_SetConfig+0x1ba>
 8009f40:	4b42      	ldr	r3, [pc, #264]	; (800a04c <UART_SetConfig+0x27c>)
 8009f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f44:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009f48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f4c:	d011      	beq.n	8009f72 <UART_SetConfig+0x1a2>
 8009f4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f52:	d817      	bhi.n	8009f84 <UART_SetConfig+0x1b4>
 8009f54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f58:	d011      	beq.n	8009f7e <UART_SetConfig+0x1ae>
 8009f5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f5e:	d811      	bhi.n	8009f84 <UART_SetConfig+0x1b4>
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d003      	beq.n	8009f6c <UART_SetConfig+0x19c>
 8009f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f68:	d006      	beq.n	8009f78 <UART_SetConfig+0x1a8>
 8009f6a:	e00b      	b.n	8009f84 <UART_SetConfig+0x1b4>
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	77fb      	strb	r3, [r7, #31]
 8009f70:	e037      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009f72:	2302      	movs	r3, #2
 8009f74:	77fb      	strb	r3, [r7, #31]
 8009f76:	e034      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009f78:	2304      	movs	r3, #4
 8009f7a:	77fb      	strb	r3, [r7, #31]
 8009f7c:	e031      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009f7e:	2308      	movs	r3, #8
 8009f80:	77fb      	strb	r3, [r7, #31]
 8009f82:	e02e      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009f84:	2310      	movs	r3, #16
 8009f86:	77fb      	strb	r3, [r7, #31]
 8009f88:	e02b      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a33      	ldr	r2, [pc, #204]	; (800a05c <UART_SetConfig+0x28c>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d124      	bne.n	8009fde <UART_SetConfig+0x20e>
 8009f94:	4b2d      	ldr	r3, [pc, #180]	; (800a04c <UART_SetConfig+0x27c>)
 8009f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f98:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009f9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009fa0:	d011      	beq.n	8009fc6 <UART_SetConfig+0x1f6>
 8009fa2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009fa6:	d817      	bhi.n	8009fd8 <UART_SetConfig+0x208>
 8009fa8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009fac:	d011      	beq.n	8009fd2 <UART_SetConfig+0x202>
 8009fae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009fb2:	d811      	bhi.n	8009fd8 <UART_SetConfig+0x208>
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d003      	beq.n	8009fc0 <UART_SetConfig+0x1f0>
 8009fb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009fbc:	d006      	beq.n	8009fcc <UART_SetConfig+0x1fc>
 8009fbe:	e00b      	b.n	8009fd8 <UART_SetConfig+0x208>
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	77fb      	strb	r3, [r7, #31]
 8009fc4:	e00d      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009fc6:	2302      	movs	r3, #2
 8009fc8:	77fb      	strb	r3, [r7, #31]
 8009fca:	e00a      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009fcc:	2304      	movs	r3, #4
 8009fce:	77fb      	strb	r3, [r7, #31]
 8009fd0:	e007      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009fd2:	2308      	movs	r3, #8
 8009fd4:	77fb      	strb	r3, [r7, #31]
 8009fd6:	e004      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009fd8:	2310      	movs	r3, #16
 8009fda:	77fb      	strb	r3, [r7, #31]
 8009fdc:	e001      	b.n	8009fe2 <UART_SetConfig+0x212>
 8009fde:	2310      	movs	r3, #16
 8009fe0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	69db      	ldr	r3, [r3, #28]
 8009fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fea:	d16b      	bne.n	800a0c4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8009fec:	7ffb      	ldrb	r3, [r7, #31]
 8009fee:	2b08      	cmp	r3, #8
 8009ff0:	d838      	bhi.n	800a064 <UART_SetConfig+0x294>
 8009ff2:	a201      	add	r2, pc, #4	; (adr r2, 8009ff8 <UART_SetConfig+0x228>)
 8009ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff8:	0800a01d 	.word	0x0800a01d
 8009ffc:	0800a025 	.word	0x0800a025
 800a000:	0800a02d 	.word	0x0800a02d
 800a004:	0800a065 	.word	0x0800a065
 800a008:	0800a033 	.word	0x0800a033
 800a00c:	0800a065 	.word	0x0800a065
 800a010:	0800a065 	.word	0x0800a065
 800a014:	0800a065 	.word	0x0800a065
 800a018:	0800a03b 	.word	0x0800a03b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a01c:	f7fd feaa 	bl	8007d74 <HAL_RCC_GetPCLK1Freq>
 800a020:	61b8      	str	r0, [r7, #24]
        break;
 800a022:	e024      	b.n	800a06e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a024:	f7fd fec8 	bl	8007db8 <HAL_RCC_GetPCLK2Freq>
 800a028:	61b8      	str	r0, [r7, #24]
        break;
 800a02a:	e020      	b.n	800a06e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a02c:	4b0c      	ldr	r3, [pc, #48]	; (800a060 <UART_SetConfig+0x290>)
 800a02e:	61bb      	str	r3, [r7, #24]
        break;
 800a030:	e01d      	b.n	800a06e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a032:	f7fd fe29 	bl	8007c88 <HAL_RCC_GetSysClockFreq>
 800a036:	61b8      	str	r0, [r7, #24]
        break;
 800a038:	e019      	b.n	800a06e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a03a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a03e:	61bb      	str	r3, [r7, #24]
        break;
 800a040:	e015      	b.n	800a06e <UART_SetConfig+0x29e>
 800a042:	bf00      	nop
 800a044:	efff69f3 	.word	0xefff69f3
 800a048:	40013800 	.word	0x40013800
 800a04c:	40021000 	.word	0x40021000
 800a050:	40004400 	.word	0x40004400
 800a054:	40004800 	.word	0x40004800
 800a058:	40004c00 	.word	0x40004c00
 800a05c:	40005000 	.word	0x40005000
 800a060:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800a064:	2300      	movs	r3, #0
 800a066:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	77bb      	strb	r3, [r7, #30]
        break;
 800a06c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d073      	beq.n	800a15c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	005a      	lsls	r2, r3, #1
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	085b      	lsrs	r3, r3, #1
 800a07e:	441a      	add	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	fbb2 f3f3 	udiv	r3, r2, r3
 800a088:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	2b0f      	cmp	r3, #15
 800a08e:	d916      	bls.n	800a0be <UART_SetConfig+0x2ee>
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a096:	d212      	bcs.n	800a0be <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	f023 030f 	bic.w	r3, r3, #15
 800a0a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	085b      	lsrs	r3, r3, #1
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	f003 0307 	and.w	r3, r3, #7
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	89fb      	ldrh	r3, [r7, #14]
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	89fa      	ldrh	r2, [r7, #14]
 800a0ba:	60da      	str	r2, [r3, #12]
 800a0bc:	e04e      	b.n	800a15c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	77bb      	strb	r3, [r7, #30]
 800a0c2:	e04b      	b.n	800a15c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a0c4:	7ffb      	ldrb	r3, [r7, #31]
 800a0c6:	2b08      	cmp	r3, #8
 800a0c8:	d827      	bhi.n	800a11a <UART_SetConfig+0x34a>
 800a0ca:	a201      	add	r2, pc, #4	; (adr r2, 800a0d0 <UART_SetConfig+0x300>)
 800a0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d0:	0800a0f5 	.word	0x0800a0f5
 800a0d4:	0800a0fd 	.word	0x0800a0fd
 800a0d8:	0800a105 	.word	0x0800a105
 800a0dc:	0800a11b 	.word	0x0800a11b
 800a0e0:	0800a10b 	.word	0x0800a10b
 800a0e4:	0800a11b 	.word	0x0800a11b
 800a0e8:	0800a11b 	.word	0x0800a11b
 800a0ec:	0800a11b 	.word	0x0800a11b
 800a0f0:	0800a113 	.word	0x0800a113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0f4:	f7fd fe3e 	bl	8007d74 <HAL_RCC_GetPCLK1Freq>
 800a0f8:	61b8      	str	r0, [r7, #24]
        break;
 800a0fa:	e013      	b.n	800a124 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0fc:	f7fd fe5c 	bl	8007db8 <HAL_RCC_GetPCLK2Freq>
 800a100:	61b8      	str	r0, [r7, #24]
        break;
 800a102:	e00f      	b.n	800a124 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a104:	4b1b      	ldr	r3, [pc, #108]	; (800a174 <UART_SetConfig+0x3a4>)
 800a106:	61bb      	str	r3, [r7, #24]
        break;
 800a108:	e00c      	b.n	800a124 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a10a:	f7fd fdbd 	bl	8007c88 <HAL_RCC_GetSysClockFreq>
 800a10e:	61b8      	str	r0, [r7, #24]
        break;
 800a110:	e008      	b.n	800a124 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a116:	61bb      	str	r3, [r7, #24]
        break;
 800a118:	e004      	b.n	800a124 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800a11a:	2300      	movs	r3, #0
 800a11c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	77bb      	strb	r3, [r7, #30]
        break;
 800a122:	bf00      	nop
    }

    if (pclk != 0U)
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d018      	beq.n	800a15c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	085a      	lsrs	r2, r3, #1
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	441a      	add	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	fbb2 f3f3 	udiv	r3, r2, r3
 800a13c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	2b0f      	cmp	r3, #15
 800a142:	d909      	bls.n	800a158 <UART_SetConfig+0x388>
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a14a:	d205      	bcs.n	800a158 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	b29a      	uxth	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	60da      	str	r2, [r3, #12]
 800a156:	e001      	b.n	800a15c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a168:	7fbb      	ldrb	r3, [r7, #30]
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3720      	adds	r7, #32
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	007a1200 	.word	0x007a1200

0800a178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a184:	f003 0301 	and.w	r3, r3, #1
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00a      	beq.n	800a1a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a6:	f003 0302 	and.w	r3, r3, #2
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00a      	beq.n	800a1c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	430a      	orrs	r2, r1
 800a1c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c8:	f003 0304 	and.w	r3, r3, #4
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d00a      	beq.n	800a1e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	430a      	orrs	r2, r1
 800a1e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ea:	f003 0308 	and.w	r3, r3, #8
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00a      	beq.n	800a208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	430a      	orrs	r2, r1
 800a206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20c:	f003 0310 	and.w	r3, r3, #16
 800a210:	2b00      	cmp	r3, #0
 800a212:	d00a      	beq.n	800a22a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	430a      	orrs	r2, r1
 800a228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22e:	f003 0320 	and.w	r3, r3, #32
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00a      	beq.n	800a24c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	430a      	orrs	r2, r1
 800a24a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a254:	2b00      	cmp	r3, #0
 800a256:	d01a      	beq.n	800a28e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	430a      	orrs	r2, r1
 800a26c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a276:	d10a      	bne.n	800a28e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	430a      	orrs	r2, r1
 800a28c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00a      	beq.n	800a2b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	430a      	orrs	r2, r1
 800a2ae:	605a      	str	r2, [r3, #4]
  }
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b098      	sub	sp, #96	; 0x60
 800a2c0:	af02      	add	r7, sp, #8
 800a2c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2cc:	f7f9 ff5a 	bl	8004184 <HAL_GetTick>
 800a2d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f003 0308 	and.w	r3, r3, #8
 800a2dc:	2b08      	cmp	r3, #8
 800a2de:	d12e      	bne.n	800a33e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 f88c 	bl	800a40c <UART_WaitOnFlagUntilTimeout>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d021      	beq.n	800a33e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a302:	e853 3f00 	ldrex	r3, [r3]
 800a306:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a30a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a30e:	653b      	str	r3, [r7, #80]	; 0x50
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	461a      	mov	r2, r3
 800a316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a318:	647b      	str	r3, [r7, #68]	; 0x44
 800a31a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a31c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a31e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a320:	e841 2300 	strex	r3, r2, [r1]
 800a324:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d1e6      	bne.n	800a2fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2220      	movs	r2, #32
 800a330:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a33a:	2303      	movs	r3, #3
 800a33c:	e062      	b.n	800a404 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 0304 	and.w	r3, r3, #4
 800a348:	2b04      	cmp	r3, #4
 800a34a:	d149      	bne.n	800a3e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a34c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a354:	2200      	movs	r2, #0
 800a356:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f856 	bl	800a40c <UART_WaitOnFlagUntilTimeout>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	d03c      	beq.n	800a3e0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36e:	e853 3f00 	ldrex	r3, [r3]
 800a372:	623b      	str	r3, [r7, #32]
   return(result);
 800a374:	6a3b      	ldr	r3, [r7, #32]
 800a376:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a37a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	461a      	mov	r2, r3
 800a382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a384:	633b      	str	r3, [r7, #48]	; 0x30
 800a386:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a388:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a38a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a38c:	e841 2300 	strex	r3, r2, [r1]
 800a390:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a394:	2b00      	cmp	r3, #0
 800a396:	d1e6      	bne.n	800a366 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	3308      	adds	r3, #8
 800a39e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	e853 3f00 	ldrex	r3, [r3]
 800a3a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f023 0301 	bic.w	r3, r3, #1
 800a3ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	3308      	adds	r3, #8
 800a3b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3b8:	61fa      	str	r2, [r7, #28]
 800a3ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3bc:	69b9      	ldr	r1, [r7, #24]
 800a3be:	69fa      	ldr	r2, [r7, #28]
 800a3c0:	e841 2300 	strex	r3, r2, [r1]
 800a3c4:	617b      	str	r3, [r7, #20]
   return(result);
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1e5      	bne.n	800a398 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2220      	movs	r2, #32
 800a3d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3dc:	2303      	movs	r3, #3
 800a3de:	e011      	b.n	800a404 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2220      	movs	r2, #32
 800a3e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2220      	movs	r2, #32
 800a3ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a402:	2300      	movs	r3, #0
}
 800a404:	4618      	mov	r0, r3
 800a406:	3758      	adds	r7, #88	; 0x58
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	603b      	str	r3, [r7, #0]
 800a418:	4613      	mov	r3, r2
 800a41a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a41c:	e049      	b.n	800a4b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a424:	d045      	beq.n	800a4b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a426:	f7f9 fead 	bl	8004184 <HAL_GetTick>
 800a42a:	4602      	mov	r2, r0
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	69ba      	ldr	r2, [r7, #24]
 800a432:	429a      	cmp	r2, r3
 800a434:	d302      	bcc.n	800a43c <UART_WaitOnFlagUntilTimeout+0x30>
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d101      	bne.n	800a440 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a43c:	2303      	movs	r3, #3
 800a43e:	e048      	b.n	800a4d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 0304 	and.w	r3, r3, #4
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d031      	beq.n	800a4b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	69db      	ldr	r3, [r3, #28]
 800a454:	f003 0308 	and.w	r3, r3, #8
 800a458:	2b08      	cmp	r3, #8
 800a45a:	d110      	bne.n	800a47e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2208      	movs	r2, #8
 800a462:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f000 f8ff 	bl	800a668 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2208      	movs	r2, #8
 800a46e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2200      	movs	r2, #0
 800a476:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800a47a:	2301      	movs	r3, #1
 800a47c:	e029      	b.n	800a4d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	69db      	ldr	r3, [r3, #28]
 800a484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a48c:	d111      	bne.n	800a4b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a496:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f000 f8e5 	bl	800a668 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2220      	movs	r2, #32
 800a4a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	e00f      	b.n	800a4d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	69da      	ldr	r2, [r3, #28]
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	4013      	ands	r3, r2
 800a4bc:	68ba      	ldr	r2, [r7, #8]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	bf0c      	ite	eq
 800a4c2:	2301      	moveq	r3, #1
 800a4c4:	2300      	movne	r3, #0
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	79fb      	ldrb	r3, [r7, #7]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d0a6      	beq.n	800a41e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
	...

0800a4dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b097      	sub	sp, #92	; 0x5c
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	68ba      	ldr	r2, [r7, #8]
 800a4ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	88fa      	ldrh	r2, [r7, #6]
 800a4f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	88fa      	ldrh	r2, [r7, #6]
 800a4fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2200      	movs	r2, #0
 800a504:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a50e:	d10e      	bne.n	800a52e <UART_Start_Receive_IT+0x52>
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d105      	bne.n	800a524 <UART_Start_Receive_IT+0x48>
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a51e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a522:	e02d      	b.n	800a580 <UART_Start_Receive_IT+0xa4>
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	22ff      	movs	r2, #255	; 0xff
 800a528:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a52c:	e028      	b.n	800a580 <UART_Start_Receive_IT+0xa4>
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d10d      	bne.n	800a552 <UART_Start_Receive_IT+0x76>
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d104      	bne.n	800a548 <UART_Start_Receive_IT+0x6c>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	22ff      	movs	r2, #255	; 0xff
 800a542:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a546:	e01b      	b.n	800a580 <UART_Start_Receive_IT+0xa4>
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	227f      	movs	r2, #127	; 0x7f
 800a54c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a550:	e016      	b.n	800a580 <UART_Start_Receive_IT+0xa4>
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a55a:	d10d      	bne.n	800a578 <UART_Start_Receive_IT+0x9c>
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	691b      	ldr	r3, [r3, #16]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d104      	bne.n	800a56e <UART_Start_Receive_IT+0x92>
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	227f      	movs	r2, #127	; 0x7f
 800a568:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a56c:	e008      	b.n	800a580 <UART_Start_Receive_IT+0xa4>
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	223f      	movs	r2, #63	; 0x3f
 800a572:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a576:	e003      	b.n	800a580 <UART_Start_Receive_IT+0xa4>
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2200      	movs	r2, #0
 800a584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2222      	movs	r2, #34	; 0x22
 800a58c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	3308      	adds	r3, #8
 800a596:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a59a:	e853 3f00 	ldrex	r3, [r3]
 800a59e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a2:	f043 0301 	orr.w	r3, r3, #1
 800a5a6:	657b      	str	r3, [r7, #84]	; 0x54
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	3308      	adds	r3, #8
 800a5ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a5b0:	64ba      	str	r2, [r7, #72]	; 0x48
 800a5b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a5b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5b8:	e841 2300 	strex	r3, r2, [r1]
 800a5bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a5be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d1e5      	bne.n	800a590 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5cc:	d107      	bne.n	800a5de <UART_Start_Receive_IT+0x102>
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	691b      	ldr	r3, [r3, #16]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d103      	bne.n	800a5de <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	4a21      	ldr	r2, [pc, #132]	; (800a660 <UART_Start_Receive_IT+0x184>)
 800a5da:	669a      	str	r2, [r3, #104]	; 0x68
 800a5dc:	e002      	b.n	800a5e4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	4a20      	ldr	r2, [pc, #128]	; (800a664 <UART_Start_Receive_IT+0x188>)
 800a5e2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	691b      	ldr	r3, [r3, #16]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d019      	beq.n	800a620 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f4:	e853 3f00 	ldrex	r3, [r3]
 800a5f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a600:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	461a      	mov	r2, r3
 800a608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a60a:	637b      	str	r3, [r7, #52]	; 0x34
 800a60c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a612:	e841 2300 	strex	r3, r2, [r1]
 800a616:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d1e6      	bne.n	800a5ec <UART_Start_Receive_IT+0x110>
 800a61e:	e018      	b.n	800a652 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	e853 3f00 	ldrex	r3, [r3]
 800a62c:	613b      	str	r3, [r7, #16]
   return(result);
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	f043 0320 	orr.w	r3, r3, #32
 800a634:	653b      	str	r3, [r7, #80]	; 0x50
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	461a      	mov	r2, r3
 800a63c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a63e:	623b      	str	r3, [r7, #32]
 800a640:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a642:	69f9      	ldr	r1, [r7, #28]
 800a644:	6a3a      	ldr	r2, [r7, #32]
 800a646:	e841 2300 	strex	r3, r2, [r1]
 800a64a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1e6      	bne.n	800a620 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800a652:	2300      	movs	r3, #0
}
 800a654:	4618      	mov	r0, r3
 800a656:	375c      	adds	r7, #92	; 0x5c
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr
 800a660:	0800a959 	.word	0x0800a959
 800a664:	0800a7b1 	.word	0x0800a7b1

0800a668 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a668:	b480      	push	{r7}
 800a66a:	b095      	sub	sp, #84	; 0x54
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a678:	e853 3f00 	ldrex	r3, [r3]
 800a67c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a680:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a684:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	461a      	mov	r2, r3
 800a68c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a68e:	643b      	str	r3, [r7, #64]	; 0x40
 800a690:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a692:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a694:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a696:	e841 2300 	strex	r3, r2, [r1]
 800a69a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1e6      	bne.n	800a670 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	3308      	adds	r3, #8
 800a6a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6aa:	6a3b      	ldr	r3, [r7, #32]
 800a6ac:	e853 3f00 	ldrex	r3, [r3]
 800a6b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	f023 0301 	bic.w	r3, r3, #1
 800a6b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	3308      	adds	r3, #8
 800a6c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a6c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a6c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6ca:	e841 2300 	strex	r3, r2, [r1]
 800a6ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d1e5      	bne.n	800a6a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d118      	bne.n	800a710 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	e853 3f00 	ldrex	r3, [r3]
 800a6ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	f023 0310 	bic.w	r3, r3, #16
 800a6f2:	647b      	str	r3, [r7, #68]	; 0x44
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6fc:	61bb      	str	r3, [r7, #24]
 800a6fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a700:	6979      	ldr	r1, [r7, #20]
 800a702:	69ba      	ldr	r2, [r7, #24]
 800a704:	e841 2300 	strex	r3, r2, [r1]
 800a708:	613b      	str	r3, [r7, #16]
   return(result);
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d1e6      	bne.n	800a6de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2220      	movs	r2, #32
 800a714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a724:	bf00      	nop
 800a726:	3754      	adds	r7, #84	; 0x54
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2200      	movs	r2, #0
 800a742:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2200      	movs	r2, #0
 800a74a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f7ff fb28 	bl	8009da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a754:	bf00      	nop
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b088      	sub	sp, #32
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	e853 3f00 	ldrex	r3, [r3]
 800a770:	60bb      	str	r3, [r7, #8]
   return(result);
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a778:	61fb      	str	r3, [r7, #28]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	61bb      	str	r3, [r7, #24]
 800a784:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a786:	6979      	ldr	r1, [r7, #20]
 800a788:	69ba      	ldr	r2, [r7, #24]
 800a78a:	e841 2300 	strex	r3, r2, [r1]
 800a78e:	613b      	str	r3, [r7, #16]
   return(result);
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d1e6      	bne.n	800a764 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2220      	movs	r2, #32
 800a79a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f7ff faf4 	bl	8009d90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7a8:	bf00      	nop
 800a7aa:	3720      	adds	r7, #32
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b09c      	sub	sp, #112	; 0x70
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a7be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7c8:	2b22      	cmp	r3, #34	; 0x22
 800a7ca:	f040 80b9 	bne.w	800a940 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a7d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a7d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a7dc:	b2d9      	uxtb	r1, r3
 800a7de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a7e2:	b2da      	uxtb	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7e8:	400a      	ands	r2, r1
 800a7ea:	b2d2      	uxtb	r2, r2
 800a7ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7f2:	1c5a      	adds	r2, r3, #1
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	3b01      	subs	r3, #1
 800a802:	b29a      	uxth	r2, r3
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a810:	b29b      	uxth	r3, r3
 800a812:	2b00      	cmp	r3, #0
 800a814:	f040 809c 	bne.w	800a950 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a820:	e853 3f00 	ldrex	r3, [r3]
 800a824:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a828:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a82c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	461a      	mov	r2, r3
 800a834:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a836:	65bb      	str	r3, [r7, #88]	; 0x58
 800a838:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a83a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a83c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a83e:	e841 2300 	strex	r3, r2, [r1]
 800a842:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a846:	2b00      	cmp	r3, #0
 800a848:	d1e6      	bne.n	800a818 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	3308      	adds	r3, #8
 800a850:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a854:	e853 3f00 	ldrex	r3, [r3]
 800a858:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a85a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a85c:	f023 0301 	bic.w	r3, r3, #1
 800a860:	667b      	str	r3, [r7, #100]	; 0x64
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	3308      	adds	r3, #8
 800a868:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a86a:	647a      	str	r2, [r7, #68]	; 0x44
 800a86c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a86e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a872:	e841 2300 	strex	r3, r2, [r1]
 800a876:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1e5      	bne.n	800a84a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2220      	movs	r2, #32
 800a882:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d018      	beq.n	800a8d2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a8:	e853 3f00 	ldrex	r3, [r3]
 800a8ac:	623b      	str	r3, [r7, #32]
   return(result);
 800a8ae:	6a3b      	ldr	r3, [r7, #32]
 800a8b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a8b4:	663b      	str	r3, [r7, #96]	; 0x60
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8be:	633b      	str	r3, [r7, #48]	; 0x30
 800a8c0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8c6:	e841 2300 	strex	r3, r2, [r1]
 800a8ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1e6      	bne.n	800a8a0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d12e      	bne.n	800a938 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	e853 3f00 	ldrex	r3, [r3]
 800a8ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f023 0310 	bic.w	r3, r3, #16
 800a8f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8fe:	61fb      	str	r3, [r7, #28]
 800a900:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a902:	69b9      	ldr	r1, [r7, #24]
 800a904:	69fa      	ldr	r2, [r7, #28]
 800a906:	e841 2300 	strex	r3, r2, [r1]
 800a90a:	617b      	str	r3, [r7, #20]
   return(result);
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1e6      	bne.n	800a8e0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	69db      	ldr	r3, [r3, #28]
 800a918:	f003 0310 	and.w	r3, r3, #16
 800a91c:	2b10      	cmp	r3, #16
 800a91e:	d103      	bne.n	800a928 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2210      	movs	r2, #16
 800a926:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a92e:	4619      	mov	r1, r3
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f7ff fa41 	bl	8009db8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a936:	e00b      	b.n	800a950 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f7f7 fcdb 	bl	80022f4 <HAL_UART_RxCpltCallback>
}
 800a93e:	e007      	b.n	800a950 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	699a      	ldr	r2, [r3, #24]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f042 0208 	orr.w	r2, r2, #8
 800a94e:	619a      	str	r2, [r3, #24]
}
 800a950:	bf00      	nop
 800a952:	3770      	adds	r7, #112	; 0x70
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b09c      	sub	sp, #112	; 0x70
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a966:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a970:	2b22      	cmp	r3, #34	; 0x22
 800a972:	f040 80b9 	bne.w	800aae8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a97c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a984:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a986:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800a98a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a98e:	4013      	ands	r3, r2
 800a990:	b29a      	uxth	r2, r3
 800a992:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a994:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a99a:	1c9a      	adds	r2, r3, #2
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f040 809c 	bne.w	800aaf8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9c8:	e853 3f00 	ldrex	r3, [r3]
 800a9cc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a9ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a9d4:	667b      	str	r3, [r7, #100]	; 0x64
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9de:	657b      	str	r3, [r7, #84]	; 0x54
 800a9e0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a9e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a9e6:	e841 2300 	strex	r3, r2, [r1]
 800a9ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a9ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1e6      	bne.n	800a9c0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	3308      	adds	r3, #8
 800a9f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9fc:	e853 3f00 	ldrex	r3, [r3]
 800aa00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa04:	f023 0301 	bic.w	r3, r3, #1
 800aa08:	663b      	str	r3, [r7, #96]	; 0x60
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	3308      	adds	r3, #8
 800aa10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa12:	643a      	str	r2, [r7, #64]	; 0x40
 800aa14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa1a:	e841 2300 	strex	r3, r2, [r1]
 800aa1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d1e5      	bne.n	800a9f2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2220      	movs	r2, #32
 800aa2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d018      	beq.n	800aa7a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa4e:	6a3b      	ldr	r3, [r7, #32]
 800aa50:	e853 3f00 	ldrex	r3, [r3]
 800aa54:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aa5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	461a      	mov	r2, r3
 800aa64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa66:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa68:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa6e:	e841 2300 	strex	r3, r2, [r1]
 800aa72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d1e6      	bne.n	800aa48 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d12e      	bne.n	800aae0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2200      	movs	r2, #0
 800aa86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	e853 3f00 	ldrex	r3, [r3]
 800aa94:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	f023 0310 	bic.w	r3, r3, #16
 800aa9c:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aaa6:	61bb      	str	r3, [r7, #24]
 800aaa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaaa:	6979      	ldr	r1, [r7, #20]
 800aaac:	69ba      	ldr	r2, [r7, #24]
 800aaae:	e841 2300 	strex	r3, r2, [r1]
 800aab2:	613b      	str	r3, [r7, #16]
   return(result);
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d1e6      	bne.n	800aa88 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	69db      	ldr	r3, [r3, #28]
 800aac0:	f003 0310 	and.w	r3, r3, #16
 800aac4:	2b10      	cmp	r3, #16
 800aac6:	d103      	bne.n	800aad0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2210      	movs	r2, #16
 800aace:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800aad6:	4619      	mov	r1, r3
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f7ff f96d 	bl	8009db8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aade:	e00b      	b.n	800aaf8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f7f7 fc07 	bl	80022f4 <HAL_UART_RxCpltCallback>
}
 800aae6:	e007      	b.n	800aaf8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	699a      	ldr	r2, [r3, #24]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f042 0208 	orr.w	r2, r2, #8
 800aaf6:	619a      	str	r2, [r3, #24]
}
 800aaf8:	bf00      	nop
 800aafa:	3770      	adds	r7, #112	; 0x70
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ab08:	bf00      	nop
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <__libc_init_array>:
 800ab14:	b570      	push	{r4, r5, r6, lr}
 800ab16:	4d0d      	ldr	r5, [pc, #52]	; (800ab4c <__libc_init_array+0x38>)
 800ab18:	4c0d      	ldr	r4, [pc, #52]	; (800ab50 <__libc_init_array+0x3c>)
 800ab1a:	1b64      	subs	r4, r4, r5
 800ab1c:	10a4      	asrs	r4, r4, #2
 800ab1e:	2600      	movs	r6, #0
 800ab20:	42a6      	cmp	r6, r4
 800ab22:	d109      	bne.n	800ab38 <__libc_init_array+0x24>
 800ab24:	4d0b      	ldr	r5, [pc, #44]	; (800ab54 <__libc_init_array+0x40>)
 800ab26:	4c0c      	ldr	r4, [pc, #48]	; (800ab58 <__libc_init_array+0x44>)
 800ab28:	f000 f820 	bl	800ab6c <_init>
 800ab2c:	1b64      	subs	r4, r4, r5
 800ab2e:	10a4      	asrs	r4, r4, #2
 800ab30:	2600      	movs	r6, #0
 800ab32:	42a6      	cmp	r6, r4
 800ab34:	d105      	bne.n	800ab42 <__libc_init_array+0x2e>
 800ab36:	bd70      	pop	{r4, r5, r6, pc}
 800ab38:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab3c:	4798      	blx	r3
 800ab3e:	3601      	adds	r6, #1
 800ab40:	e7ee      	b.n	800ab20 <__libc_init_array+0xc>
 800ab42:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab46:	4798      	blx	r3
 800ab48:	3601      	adds	r6, #1
 800ab4a:	e7f2      	b.n	800ab32 <__libc_init_array+0x1e>
 800ab4c:	0800ade4 	.word	0x0800ade4
 800ab50:	0800ade4 	.word	0x0800ade4
 800ab54:	0800ade4 	.word	0x0800ade4
 800ab58:	0800ade8 	.word	0x0800ade8

0800ab5c <memset>:
 800ab5c:	4402      	add	r2, r0
 800ab5e:	4603      	mov	r3, r0
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d100      	bne.n	800ab66 <memset+0xa>
 800ab64:	4770      	bx	lr
 800ab66:	f803 1b01 	strb.w	r1, [r3], #1
 800ab6a:	e7f9      	b.n	800ab60 <memset+0x4>

0800ab6c <_init>:
 800ab6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6e:	bf00      	nop
 800ab70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab72:	bc08      	pop	{r3}
 800ab74:	469e      	mov	lr, r3
 800ab76:	4770      	bx	lr

0800ab78 <_fini>:
 800ab78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab7a:	bf00      	nop
 800ab7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab7e:	bc08      	pop	{r3}
 800ab80:	469e      	mov	lr, r3
 800ab82:	4770      	bx	lr
